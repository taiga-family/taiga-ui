@import '@taiga-ui/core/styles/taiga-ui-local';

@keyframes outside {
    0% {
        transform: translate3d(calc(var(--t-translate) * var(--tui-inline)), 0, 0);
    }

    100% {
        transform: translate3d(calc(100% * var(--tui-inline)), 0, 0);
    }
}

@keyframes inside {
    0% {
        transform: translate3d(calc(100% * var(--tui-inline)), 0, 0);
    }

    100% {
        transform: translate3d(calc(var(--t-translate) * var(--tui-inline)), 0, 0);
    }
}

:host {
    --t-height: var(--tui-height-l);
    --t-padding: var(--tui-padding-l);
    --t-label: -0.7rem;
    --t-label-size: 0.83em;
    --t-translate: 6.5rem;

    position: relative;
    display: block;
    block-size: var(--t-height);
    min-inline-size: 24rem;
    border-radius: var(--tui-radius-l);
    overflow: hidden;
    font: var(--tui-font-text-ui-m);

    &[data-size='m'] {
        --t-label: -0.7em;
        --t-height: var(--tui-height-m);
        --t-padding: var(--tui-padding-m);

        border-radius: var(--tui-radius-m);
        font: var(--tui-font-text-ui-s);

        .t-card {
            inline-size: 1.5rem;
            block-size: 1.5rem;
        }

        [tuiChevron] {
            margin-inline-end: -0.875rem;
            margin-inline-start: 0.125rem;
        }
    }

    :host-context(tui-root._mobile) {
        min-inline-size: 19rem;

        --t-translate: 4rem;
    }

    // Increasing specificity to override dark mode appearance
    &[tuiAppearance][data-appearance]:has(:-webkit-autofill) {
        background: var(--tui-service-autofill-background) !important;
    }

    [tuiChevron] {
        block-size: auto;
        align-self: stretch;
        border-inline-end: var(--t-padding) solid transparent;
        margin-inline-end: -0.75rem;
        box-sizing: content-box;
        font-size: 1rem;
        cursor: pointer;
    }
}

.t-wrapper {
    position: absolute;
    inline-size: 100%;
    block-size: 100%;
    transition: opacity 0s var(--tui-duration);

    &_cvc,
    &_expire {
        opacity: 0;
        pointer-events: none;
        animation: outside var(--tui-duration) ease-in-out;
    }

    &_cvc {
        margin-inline-start: 7rem;

        :host-context(tui-root._mobile) & {
            margin-inline-start: 4rem;
        }
    }

    &_active {
        transition: none;
        pointer-events: auto;
        opacity: 1;
        animation: inside var(--tui-duration) ease-in-out forwards;
    }
}

.t-card {
    inline-size: 2rem;
    block-size: 2rem;
}

.t-collapsed {
    .fullsize();

    padding: calc(var(--t-height) / 3) var(--t-padding) 0;
    box-sizing: border-box;
    line-height: calc(2 * var(--t-height) / 3);
    color: var(--tui-text-primary);
    white-space: nowrap;
    pointer-events: none;

    &::after {
        content: '*';
        float: left;
        opacity: 0;

        :host-context([dir='rtl']) & {
            float: none;
        }
    }

    &_enable-mask {
        &::before {
            content: attr(data-before);
        }

        &::after {
            opacity: 1;

            :host-context([dir='rtl']) & {
                transition: opacity 0s var(--tui-duration);
            }
        }

        .t-collapsed-wrapper {
            left: 1.375rem;

            :host-context([dir='rtl']) & {
                left: unset;
            }
        }
    }
}

.t-collapsed-wrapper {
    position: absolute;
    top: 0;
    display: block;
    inline-size: 100%;
    block-size: 100%;
    overflow: hidden;
}

.t-value {
    .transition(~'transform, clip-path');

    position: absolute;
    bottom: 0;
    right: 100%;
    display: block;
    clip-path: inset(0);
    transform: translate3d(calc(100% * var(--tui-inline)), 0, 0);

    :host-context([dir='rtl']) & {
        right: unset;
        left: 100%;
        transform: translate3d(calc(100% * var(--tui-inline)), 0, 0) !important;
    }
}

.t-input {
    .fullsize();

    border: 0;
    margin: 0;
    padding: calc(var(--t-height) / 3) var(--t-padding) 0;
    outline: none;
    background: transparent;
    box-sizing: border-box;
    font: inherit;
    color: var(--tui-text-primary);
    direction: ltr;

    :host-context([dir='rtl']) & {
        text-align: end;
    }

    &::placeholder {
        color: var(--tui-text-tertiary);
    }

    &_prefilled::placeholder {
        color: var(--tui-text-primary);
    }

    &[chrome-autofilled], /* Chrome on IOS */
    &:-webkit-autofill {
        -webkit-text-fill-color: var(--tui-text-primary) !important;
        caret-color: var(--tui-text-primary) !important;
        transition: background-color 600000s 0s;
    }

    &&&_card {
        // @note: (&&&_) it's increasing css cascade priority
        &:not(:-webkit-autofill):not(:focus:placeholder-shown),
        &.t-input_filled {
            caret-color: var(--tui-text-primary);
            color: transparent !important;
            -webkit-text-fill-color: transparent !important;
        }

        //noinspection CssInvalidPseudoSelector
        &::-webkit-credit-card-auto-fill-button {
            // hide: -webkit-caps-lock-indicator
            content: none !important;

            // hide: -webkit-strong-password-auto-fill-button
            // because safari forcing set display as block
            position: absolute;
            left: -60rem;
            top: -60rem;
            z-index: -999;

            // hide: -webkit-contacts-auto-fill-button
            display: none !important;
            background: transparent !important;
            pointer-events: none !important;
        }
    }

    &_inert {
        pointer-events: none;
    }

    &_cvc_hidden {
        -webkit-text-security: disc;
    }
}

.t-icons {
    position: absolute;
    right: 1rem;
    display: flex;
    align-items: center;
    block-size: 100%;
    gap: 0.25rem;

    @supports (inset-inline-end: 0) {
        right: unset;
        inset-inline-end: 1rem;
    }
}

.t-icon-outlet {
    display: flex;
    margin-inline-end: 0.25rem;
}

.t-icon {
    cursor: pointer;

    &::before {
        font-size: 1rem;
    }
}

.t-label {
    .transition(all);
    .text-overflow();

    position: relative;
    margin: 0 var(--t-padding);
    line-height: var(--t-height);
    color: var(--tui-text-secondary);

    &:empty::before {
        content: attr(data-label);
    }

    input:-webkit-autofill ~ &,
    &_raised {
        font-size: var(--t-label-size);
        transform: translateY(var(--t-label));

        :host([data-mode~='invalid']) & {
            color: var(--tui-text-negative);
        }
    }

    :host([data-focus='true']) & {
        color: var(--tui-text-primary);
    }
}

.t-ghost {
    visibility: hidden;
}
