# app/home/examples/addons.md

```bash
npm i @taiga-ui/addon-charts    // Components for various charts, graphs and visualizations
npm i @taiga-ui/addon-commerce  // Money-related extension with currencies, credit card inputs and validators
npm i @taiga-ui/addon-mobile    // Components and tools specific to mobile version of the app
npm i @taiga-ui/addon-table     // Interactive table component and related utilities
npm i @taiga-ui/addon-doc       // Taiga UI based library for developing documentation portals for Angular libraries
npm i @taiga-ui/layout          // Layout components
```

# app/home/examples/angular-json-styles.md

```json
{
  "projects": {
    "my-project": {
      "architect": {
        "build": {
          "options": {
            "styles": [
              "@taiga-ui/core/styles/taiga-ui-theme.less",
              "@taiga-ui/core/styles/taiga-ui-fonts.less",
              "@taiga-ui/addon-mobile/styles/taiga-ui-mobile.less" // optional
            ]
          }
        }
      }
    }
  }
}
```

# app/home/examples/app-standalone.md

```ts
import {TuiRoot} from '@taiga-ui/core';
// ..

@Component({
  standalone: true,
  selector: 'app-root',
  imports: [
    TuiRoot,
    // ...
  ],
  templateUrl: './app.component.html',
})
export class App {}
```

# app/home/examples/app-template.md

```html
<tui-root>
  <!-- content of your app -->

  <!--
     If you need, you can add something between Taiga portal layers:
    -->
  <ng-container ngProjectAs="tuiOverContent">
    <!-- Content over app content -->
  </ng-container>
  <ng-container ngProjectAs="tuiOverDialogs">
    <!-- Content over dialogs -->
  </ng-container>
  <ng-container ngProjectAs="tuiOverAlerts">
    <!-- Content over alerts -->
  </ng-container>
  <ng-container ngProjectAs="tuiOverDropdowns">
    <!-- Content over dropdowns -->
  </ng-container>
  <ng-container ngProjectAs="tuiOverHints">
    <!-- Content over hints -->
  </ng-container>
</tui-root>
```

# app/home/examples/assets.md

```json
{
  "projects": {
    "my-project": {
      "architect": {
        "build": {
          // ...
          "assets": [
            {
              "glob": "**/*",
              "input": "node_modules/@taiga-ui/icons/src",
              "output": "assets/taiga-ui/icons"
            }
          ]
        }
      }
    }
  }
}
```

# app/home/examples/components-styles.md

```ts
@Component({
  //...,
  styleUrls: ['./my.component.scss', './my.component.less'],
})
export class Example {}
```

# app/home/examples/import-local-less.md

```less
@import '@taiga-ui/core/styles/taiga-ui-local.less';

// other styles
```

# app/home/examples/main-standalone.md

```ts
import {provideAnimations} from '@angular/platform-browser/animations';
import {provideEventPlugins} from '@taiga-ui/event-plugins';
// ...

bootstrapApplication(App, {
  providers: [
    provideAnimations(),
    provideEventPlugins(),
    //...
  ],
}).catch((err) => console.error(err));
```

# app/home/examples/main.md

```bash
npm i @taiga-ui/{cdk,core,kit,icons}
```

# app/home/examples/nx-add.md

```bash
npm i taiga-ui
nx g taiga-ui:ng-add
```

# app/home/examples/nx-assets.md

```json
{
  "targets": {
    "build": {
      "options": {
        // ...
        "assets": [
          {
            "glob": "**/*",
            "input": "node_modules/@taiga-ui/icons/src",
            "output": "assets/taiga-ui/icons"
          }
        ]
      }
    }
  }
}
```

# app/home/examples/nx-migrate.md

```bash
nx migrate @taiga-ui/cdk
nx migrate --run-migrations=migrations.json
```

# app/home/examples/ponyfill.md

```bash
npm install css-vars-ponyfill
```

# app/home/examples/project-json-styles.md

```json
{
  "targets": {
    "build": {
      "options": {
        "styles": [
          "@taiga-ui/core/styles/taiga-ui-theme.less",
          "@taiga-ui/core/styles/taiga-ui-fonts.less",
          "@taiga-ui/addon-mobile/styles/taiga-ui-mobile.less" // optional
        ]
      }
    }
  }
}
```

# components/Accordion

- **Package**: `EXPERIMENTAL`
- **Type**: components


### How to Use (Import)

```ts
import {TuiAccordion} from '@taiga-ui/experimental';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiAccordion,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<tui-accordion>
  <button tuiAccordion>Taiga UI cdk</button>
  <tui-expand>
    Development kit consisting of the low level tools and abstractions used to develop Taiga UI Angular entities
  </tui-expand>
  <button tuiAccordion>Taiga UI core</button>
  <tui-expand>Basic elements needed to develop components, directives and more using Taiga UI design system</tui-expand>
  <button tuiAccordion>Taiga UI kit</button>
  <tui-expand>The main set of components used to build Taiga UI based Angular applications</tui-expand>
</tui-accordion>
```

### Example

```html
<tui-accordion
                [closeOthers]="closeOthers"
                [size]="size"
            >
                <button tuiAccordion>Taiga UI cdk</button>
                <tui-expand>
                    Development kit consisting of the low level tools and abstractions used to develop Taiga UI Angular
                    entities
                </tui-expand>
                <button [(tuiAccordion)]="open">Taiga UI core</button>
                <tui-expand>
                    Basic elements needed to develop components, directives and more using Taiga UI design system
                </tui-expand>
            </tui-accordion>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| [closeOthers] | `boolean` | Other sections are closed when user opens one |
| [size] | `TuiSizeS | TuiSizeL` | Size |
| [(tuiAccordion)] | `boolean` | Individual item open state |

### TypeScript

```ts
import {Component} from '@angular/core';
import {changeDetection} from '@demo/emulate/change-detection';
import {TuiDemo} from '@demo/utils';
import type {TuiSizeL, TuiSizeS} from '@taiga-ui/core';
import {TuiAccordion} from '@taiga-ui/experimental';

@Component({
    standalone: true,
    imports: [TuiAccordion, TuiDemo],
    templateUrl: './index.html',
    changeDetection,
})
export default class Page {
    protected readonly examples = [
        'Basic',
        'Custom',
        'Single',
        'Eager and Lazy',
        'Nested',
        'Connected',
    ];

    protected readonly sizeVariants: ReadonlyArray<TuiSizeL | TuiSizeS> = ['s', 'm', 'l'];
    protected size = this.sizeVariants[2]!;
    protected closeOthers = true;
    protected open = false;
}
```

---

# components/Accordion

- **Package**: `KIT`
- **Type**: components

This component is deprecated
                
                    Use
                    
                        Accordion
                    
                    from
                    &#64;taiga-ui/experimental
                    package instead


### How to Use (Import)

```ts
import {TuiAccordion} from '@taiga-ui/kit';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiAccordion,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<tui-accordion class="container">
  <tui-accordion-item>
    Taiga UI cdk
    <ng-template tuiAccordionItemContent>
      Development kit consisting of the low level tools and abstractions used to develop Taiga UI Angular entities
    </ng-template>
  </tui-accordion-item>
  <tui-accordion-item>
    Taiga UI core
    <ng-template tuiAccordionItemContent>
      <div #content>Basic elements needed to develop components, directives and more using Taiga UI design system</div>
    </ng-template>
  </tui-accordion-item>
  <tui-accordion-item>
    Taiga UI kit
    <ng-template tuiAccordionItemContent>
      The main set of components used to build Taiga UI based Angular applications
    </ng-template>
  </tui-accordion-item>
</tui-accordion>
```

### Example

```html
<tui-accordion
                [closeOthers]="closeOthers"
                [rounded]="rounded"
            >
                <tui-accordion-item
                    [borders]="borders"
                    [disabled]="disabled"
                    [disableHover]="disableHover"
                    [noPadding]="noPadding"
                    [showArrow]="showArrow"
                    [size]="size"
                >
                    Taiga UI cdk
                    <ng-template tuiAccordionItemContent>
                        Development kit consisting of the low level tools and abstractions used to develop Taiga UI
                        Angular entities
                    </ng-template>
                </tui-accordion-item>
                <tui-accordion-item
                    [async]="async"
                    [borders]="borders"
                    [disabled]="disabled"
                    [disableHover]="disableHover"
                    [noPadding]="noPadding"
                    [open]="open"
                    [showArrow]="showArrow"
                    [size]="size"
                    (openChange)="onOpenChange($event)"
                >
                    Taiga UI core
                    <ng-template tuiAccordionItemContent>
                        <div #content>
                            Basic elements needed to develop components, directives and more using Taiga UI design
                            system
                        </div>
                    </ng-template>
                </tui-accordion-item>
            </tui-accordion>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| [closeOthers] | `boolean` | Other sections are closed when user opens one |
| [rounded] | `boolean` | Rounded accordion style |

### TypeScript

```ts
import type {ElementRef} from '@angular/core';
import {Component, DestroyRef, inject, ViewChild} from '@angular/core';
import {takeUntilDestroyed} from '@angular/core/rxjs-interop';
import {changeDetection} from '@demo/emulate/change-detection';
import {DemoRoute} from '@demo/routes';
import {TuiDemo} from '@demo/utils';
import {TuiDocAPI, TuiDocAPIItem} from '@taiga-ui/addon-doc';
import type {TuiSizeS} from '@taiga-ui/core';
import {TUI_EXPAND_LOADED, TuiTitle} from '@taiga-ui/core';
import {TuiAccordion} from '@taiga-ui/kit';
import {timer} from 'rxjs';

@Component({
    standalone: true,
    imports: [TuiAccordion, TuiDemo, TuiDocAPI, TuiDocAPIItem, TuiTitle],
    templateUrl: './index.html',
    changeDetection,
})
export default class Page {
    private readonly destroyRef = inject(DestroyRef);

    @ViewChild('content')
    protected content?: ElementRef;

    protected readonly routes = DemoRoute;
    protected async = false;
    protected closeOthers = true;
    protected disabled = false;
    protected noPadding = false;
    protected open = false;
    protected rounded = true;
    protected showArrow = true;
    protected disableHover = false;

    protected readonly bordersVariants = ['all', 'top-bottom'] as const;

    protected borders: 'all' | 'top-bottom' = this.bordersVariants[0];

    protected readonly sizeVariants: readonly TuiSizeS[] = ['s', 'm'];

    protected size: TuiSizeS = this.sizeVariants[1]!;

    protected onOpenChange(open: boolean): void {
        this.open = open;

        if (!this.async || !open) {
            return;
        }

        timer(3000)
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe(() =>
                this.content?.nativeElement.dispatchEvent(
                    new CustomEvent(TUI_EXPAND_LOADED, {bubbles: true}),
                ),
            );
    }
}
```

---

# components/ActionBar

- **Package**: `KIT`
- **Type**: components

It is an element on the bottom of screen to show actions by multiselect of some items. It works with custom
        content.


### How to Use (Import)

```ts
import {TuiActionBar} from '@taiga-ui/kit';
// ...

@Component({
  standalone: true,
  imports: [
    TuiActionBar,
    // ...
  ],
  // ...
})
export class App {}
```
### How to Use (Template)

```html
<tui-action-bar *tuiActionBar="open">content</tui-action-bar>
```

---

# components/Alert

- **Package**: `CORE`
- **Type**: components

Built-in implementation of notifications

        
            Position on screen can be configured by providing margins with
            TUI_ALERT_POSITION
            token. Default value is
            2rem 3rem 0 auto
            .


### Example

```html
<button
                size="m"
                tuiButton
                type="button"
                (click)="showNotification()"
            >
                Show
            </button>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| [content] | `PolymorpheusContent` | Content |
| [appearance] | `string` | Appearance |
| [label] | `string` | Heading |
| [data] | `number` |  |
| [autoClose] | `TuiHandler | number` | Auto close timeout, 0 for no auto close |
| [closeable] | `boolean` | Has close button |
| [icon] | `PolymorpheusContent` | Icon |

### TypeScript

```ts
import {Component, inject, INJECTOR} from '@angular/core';
import {changeDetection} from '@demo/emulate/change-detection';
import {DemoRoute} from '@demo/routes';
import {TuiDemo} from '@demo/utils';
import type {TuiPopoverContext} from '@taiga-ui/cdk';
import type {TuiAlertOptions} from '@taiga-ui/core';
import {TUI_NOTIFICATION_OPTIONS, TuiAlertService, TuiButton} from '@taiga-ui/core';
import type {PolymorpheusContent} from '@taiga-ui/polymorpheus';
import {PolymorpheusComponent} from '@taiga-ui/polymorpheus';
import {switchMap} from 'rxjs';

import {AlertExampleWithData} from './examples/4';

@Component({
    standalone: true,
    imports: [TuiButton, TuiDemo],
    templateUrl: './index.html',
    changeDetection,
})
export default class Page {
    private readonly alerts = inject(TuiAlertService);

    private readonly defaultIcon = inject(TUI_NOTIFICATION_OPTIONS).icon;

    protected readonly routes = DemoRoute;
    protected readonly examples = [
        'Text',
        'Template',
        'Component',
        'Component with data',
        'Component with custom label',
        'Directive',
        'Concurrency limit',
    ];

    protected readonly method = import('./examples/import/method.md?raw');

    protected readonly exampleServiceUsage = import(
        './examples/import/service-usage.md?raw'
    );

    protected readonly exampleServiceUsageComponent = import(
        './examples/import/service-usage-component.md?raw'
    );

    protected readonly exampleCustomAlert = import(
        './examples/import/custom-alert.md?raw'
    );

    protected readonly exampleLazyModule = import('./examples/import/lazy-module.md?raw');
    protected readonly exampleOptions = import('./examples/import/define-options.md?raw');

    protected data = 100;

    protected label = 'Heading';

    protected readonly appearanceVariants = [
        'info',
        'positive',
        'negative',
        'warning',
        'neutral',
    ];

    protected appearance = this.appearanceVariants[0]!;

    protected readonly iconVariants = ['Default', '@tui.heart'];

    protected icon = this.iconVariants[0]!;

    protected readonly contentVariants = ['String', 'Component'];

    protected content = this.contentVariants[0]!;

    protected readonly autoCloseVariants = [0, 3000, 5000, 1000, 500];

    protected autoClose = this.autoCloseVariants[1]!;

    protected closeable = true;

    protected readonly component = new PolymorpheusComponent(
        AlertExampleWithData,
        inject(INJECTOR),
    );

    protected get selectedContent(): PolymorpheusContent<
        TuiAlertOptions<number> & TuiPopoverContext<number>
    > {
        return this.content === 'String' ? this.content : this.component;
    }

    protected showNotification(): void {
        this.alerts
            .open(this.selectedContent, {
                label: this.label,
                data: this.data,
                appearance: this.appearance,
                autoClose: this.autoClose,
                closeable: this.closeable,
                icon: this.icon === this.iconVariants[0] ? this.defaultIcon : this.icon,
            })
            .pipe(
                switchMap((response) =>
                    this.alerts.open(response, {
                        label: 'Notification responded with:',
                    }),
                ),
            )
            .subscribe();
    }
}
```

---

# components/AppBar

- **Package**: `LAYOUT`
- **Type**: components

Component for the main app header


### How to Use (Import)

```ts
import {TuiAppBar} from '@taiga-ui/layout';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiAppBar,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<header>
  <tui-app-bar>
    <button
      tuiAppBarBack
      tuiSlot="left"
    >
      Back
    </button>
    Page title
    <button
      tuiIconButton
      icon="@tui.settings"
      title="settings"
      tuiSlot="right"
    ></button>
  </tui-app-bar>
</header>
```

---

# components/ArcChart

- **Package**: `ADDON-CHARTS`
- **Type**: components


### How to Use (Import)

```ts
import {TuiArcChart} from '@taiga-ui/addon-charts';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiArcChart,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<tui-arc-chart [value]="value"></tui-arc-chart>
```

### Example

```html
<tui-arc-chart
                class="chart"
                [max]="max"
                [maxLabel]="maxLabel"
                [minLabel]="minLabel"
                [size]="size"
                [value]="value"
                [(activeItemIndex)]="activeItemIndex"
            />
```

### API

| Property | Type | Description |
|----------|-----|----------|
| [max] | `number` | Maximum value |
| [maxLabel] | `string` | Label for maximum value |
| [minLabel] | `string` | Label for minimum value |
| [size] | `TuiSizeXL` | Size |
| [value] | `readonly number[]` | Value |
| [(activeItemIndex)] | `number` | Index of selected arc |

### TypeScript

```ts
import {Component} from '@angular/core';
import {changeDetection} from '@demo/emulate/change-detection';
import {TuiDemo} from '@demo/utils';
import {TuiArcChart} from '@taiga-ui/addon-charts';
import type {TuiSizeXL} from '@taiga-ui/core';

@Component({
    standalone: true,
    imports: [TuiArcChart, TuiDemo],
    templateUrl: './index.html',
    styleUrls: ['./index.less'],
    changeDetection,
})
export default class Page {
    protected readonly examples = ['Sizes', 'Stacked'];

    protected readonly valueVariants = [
        [42],
        [40, 30, 20, 10],
        [13769, 10172, 3018, 2592],
    ];

    protected value = this.valueVariants[0]!;

    protected readonly maxVariants = [100, 10000, 50000];

    protected max = this.maxVariants[0]!;

    protected readonly sizeVariants: readonly TuiSizeXL[] = ['m', 'l', 'xl'];

    protected size = this.sizeVariants[0]!;

    protected minLabel = '0%';

    protected maxLabel = '100%';

    protected activeItemIndex = NaN;
}
```
### LESS

```less
.chart {
    margin: 0 auto;
}
```

---

# components/Avatar

- **Package**: `KIT`
- **Type**: components


### How to Use (Import)

```ts
import {Component} from '@angular/core';
import {TuiAvatar} from '@taiga-ui/kit';
// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiAvatar,
  ],
})
export class Example {}
```
### How to Use (Template)

```html
<tui-avatar>Batman</tui-avatar>
```

### Example

```html
<tui-avatar
                [round]="round"
                [size]="size"
                [src]="src"
            />
```

### API

| Property | Type | Description |
|----------|-----|----------|
| round | `boolean` | Use round shape |
| size | `TuiSizeS | TuiSizeL` | Size |
| src | `SafeResourceUrl | string | null` | which would be styled differently from initials and fade if overflown |

### TypeScript

```ts
import {Component, inject} from '@angular/core';
import type {SafeResourceUrl} from '@angular/platform-browser';
import {DomSanitizer} from '@angular/platform-browser';
import {changeDetection} from '@demo/emulate/change-detection';
import {TuiDemo} from '@demo/utils';
import type {TuiSizeXS, TuiSizeXXL} from '@taiga-ui/core';
import {TuiAvatar} from '@taiga-ui/kit';

@Component({
    standalone: true,
    imports: [TuiAvatar, TuiDemo],
    templateUrl: './index.html',
    changeDetection,
})
export default class Page {
    private readonly sanitizer = inject(DomSanitizer);

    protected readonly examples = [
        'Content types',
        'Colors',
        'Sizes',
        'Stacking',
        'Options with DI',
        'Labeled',
        'Outline',
    ];

    protected readonly sizes: ReadonlyArray<TuiSizeXS | TuiSizeXXL> = [
        'xs',
        's',
        'm',
        'l',
        'xl',
        'xxl',
    ];

    protected size = this.sizes[3]!;

    protected readonly srcVariants: ReadonlyArray<SafeResourceUrl | string> = [
        'MW',
        'https://avatars.githubusercontent.com/u/11832552',
        'https://taiga-ui.dev/assets/images/test-not-found.png',
        '@tui.user',
        this.sanitizer.bypassSecurityTrustResourceUrl(
            'https://avatars.githubusercontent.com/u/10106368',
        ),
    ];

    protected src = this.srcVariants[0]!;

    protected round = true;
}
```

---

# components/Axes

- **Package**: `ADDON-CHARTS`
- **Type**: components

Just axes for charts


### How to Use (Import)

```ts
import {TuiAxes} from '@taiga-ui/addon-charts';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiAxes,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<tui-axes [value]="value"></tui-axes>
```

### Example

```html
<tui-axes
                class="axes"
                [axisX]="axisX"
                [axisXLabels]="axisXLabels || []"
                [axisY]="axisY"
                [axisYInset]="axisYInset"
                [axisYLabels]="axisYLabels || []"
                [axisYName]="axisYName"
                [axisYSecondaryInset]="axisYSecondaryInset"
                [axisYSecondaryLabels]="axisYSecondaryLabels"
                [axisYSecondaryName]="axisYSecondaryName"
                [horizontalLines]="horizontalLines"
                [horizontalLinesHandler]="horizontalLinesHandler"
                [verticalLines]="verticalLines"
                [verticalLinesHandler]="verticalLinesHandler"
            />
```

### API

| Property | Type | Description |
|----------|-----|----------|
| [axisX] | `TuiLineType` | Axis X |
| [axisXLabels] | `ReadonlyArray<string | null>` | — no stroke |
| [axisY] | `TuiLineType` | Axis Y |
| [axisYInset] | `boolean` | Inset of labels on axis Y |
| [axisYLabels] | `readonly string[]` | Labels for Y |
| [axisYName] | `string` | Name of Y axis |
| [axisYSecondaryInset] | `boolean` | Inset labels for Y |
| [axisYSecondaryLabels] | `readonly string[]` | Secondary Y axis labels |
| [axisYSecondaryName] | `string` | Secondary Y axis name |
| [horizontalLines] | `number` | Horizontal lines number |
| [horizontalLinesHandler] | `TuiLineHandler` | Horizontal lines type handler |
| [verticalLines] | `number` | Number of vertical lines |
| [verticalLinesHandle] | `TuiLineHandler` | Vertical lines type handler |

### TypeScript

```ts
import {Component} from '@angular/core';
import {changeDetection} from '@demo/emulate/change-detection';
import {TuiDemo} from '@demo/utils';
import type {TuiLineHandler, TuiLineType} from '@taiga-ui/addon-charts';
import {TUI_ALWAYS_DASHED, TUI_ALWAYS_SOLID, TuiAxes} from '@taiga-ui/addon-charts';

@Component({
    standalone: true,
    imports: [TuiAxes, TuiDemo],
    templateUrl: './index.html',
    styleUrls: ['./index.less'],
    changeDetection,
})
export default class Page {
    protected readonly examples = ['Cool one', 'With bars', 'With horizontal bars'];

    protected readonly lineVariants: readonly TuiLineType[] = [
        'solid',
        'dashed',
        'none',
        'hidden',
    ];

    protected readonly labelsXVariants: ReadonlyArray<ReadonlyArray<string | null>> = [
        [],
        ['', '25%', '50%', '100%', ''],
        ['One', 'Two', 'Three', ''],
        ['One', null, '', 'Two and a half', 'Three', null, ''],
    ];

    protected readonly labelsYVariants: ReadonlyArray<readonly string[]> = [
        [],
        ['', '25%', '50%', '100%'],
        ['One', 'Two', 'Three'],
        ['One', '', 'Two and a half', 'Three'],
    ];

    protected readonly handlerVariants: readonly TuiLineHandler[] = [
        TUI_ALWAYS_SOLID,
        TUI_ALWAYS_DASHED,
        (index) => (index % 2 ? 'dashed' : 'solid'),
    ];

    protected axisX = this.lineVariants[0]!;

    protected axisXLabels = this.labelsXVariants[0]!;

    protected axisY = this.lineVariants[0]!;

    protected axisYInset = false;

    protected axisYLabels = this.labelsYVariants[0]!;

    protected axisYName = '';

    protected axisYSecondaryInset = false;

    protected axisYSecondaryLabels = this.labelsYVariants[0]!;

    protected axisYSecondaryName = '';

    protected horizontalLines = 0;

    protected horizontalLinesHandler = this.handlerVariants[0]!;

    protected verticalLines = 0;

    protected verticalLinesHandler = this.handlerVariants[1]!;
}
```
### LESS

```less
.axes {
    block-size: 12.5rem;
}
```

---

# components/Badge

- **Package**: `KIT`
- **Type**: components

Component for displaying text, pictures and icons.


### How to Use (Import)

```ts
import {Component} from '@angular/core';
import {TuiBadge} from '@taiga-ui/kit';
// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiBadge,
  ],
})
export class Example {}
```
### How to Use (Template)

```html
<tui-badge appearance="primary">{{ value }}</tui-badge>
```

### Example

```html
<p>
                <tui-badge
                    *ngIf="contentType === 'with icon'"
                    iconStart="@tui.check"
                    [appearance]="appearance"
                    [size]="size"
                >
                    <div tuiFade>Taiga UI</div>
                </tui-badge>

                <tui-badge
                    *ngIf="contentType === 'text'"
                    [appearance]="appearance"
                    [size]="size"
                >
                    Taiga UI
                </tui-badge>

                <img
                    *ngIf="contentType === 'image'"
                    alt="market"
                    src="assets/images/avatar.jpg"
                    tuiBadge
                    [appearance]="appearance"
                    [size]="size"
                />
            </p>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| [size] | `TuiSizeL` | Size |
| [appearance] | `TuiStatus` | Appearance |

### TypeScript

```ts
import {Component} from '@angular/core';
import {FormsModule} from '@angular/forms';
import {changeDetection} from '@demo/emulate/change-detection';
import {TuiDemo} from '@demo/utils';
import type {TuiSizeS, TuiSizeXL} from '@taiga-ui/core';
import {TuiBadge, TuiFade, TuiRadioList} from '@taiga-ui/kit';

@Component({
    standalone: true,
    imports: [FormsModule, TuiBadge, TuiDemo, TuiFade, TuiRadioList],
    templateUrl: './index.html',
    changeDetection,
})
export default class Page {
    protected readonly appearanceVariants = [
        '',
        'accent',
        'primary',
        'custom',
        'positive',
        'negative',
        'warning',
        'info',
        'neutral',
    ];

    protected appearance = this.appearanceVariants[0]!;

    protected readonly sizeVariants: ReadonlyArray<TuiSizeS | TuiSizeXL> = [
        's',
        'm',
        'l',
        'xl',
    ];

    protected size: TuiSizeS | TuiSizeXL = this.sizeVariants[1]!;

    protected contentTypeVariants = ['text', 'with icon', 'image'];
    protected contentType = this.contentTypeVariants[0]!;
}
```

---

# components/BadgeNotification

- **Package**: `KIT`
- **Type**: components

Simple non-interactive badge. Used in headers, cells, cards, avatars to indicate notifications, such as new
            messages


### How to Use (Import)

```ts
import {Component} from '@angular/core';
import {TuiBadgeNotification} from '@taiga-ui/kit';
// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiBadgeNotification,
  ],
})
export class Example {}
```
### How to Use (Template)

```html
<tui-badge-notification>10</tui-badge-notification>
```

### Example

```html
<tui-badge-notification [size]="size">11</tui-badge-notification>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| [size] | `TuiSizeL` | Size |

### TypeScript

```ts
import {Component} from '@angular/core';
import {changeDetection} from '@demo/emulate/change-detection';
import {TuiDemo} from '@demo/utils';
import type {TuiSizeL, TuiSizeXS} from '@taiga-ui/core';
import {TuiLabel} from '@taiga-ui/core';
import {TuiBadgeNotification} from '@taiga-ui/kit';

@Component({
    standalone: true,
    imports: [TuiBadgeNotification, TuiDemo, TuiLabel],
    templateUrl: './index.html',
    changeDetection,
})
export default class Example {
    protected readonly sizeVariants: ReadonlyArray<TuiSizeL | TuiSizeXS> = [
        'l',
        'm',
        's',
        'xs',
    ];

    protected size: TuiSizeL | TuiSizeXS = this.sizeVariants[0]!;
}
```

---

# components/BadgedContent

- **Package**: `KIT`
- **Type**: components

BadgedContent is a wrapper for other components to add badges and notifications to them.


### How to Use (Import)

```ts
import {Component} from '@angular/core';
import {TuiBadgedContent} from '@taiga-ui/kit';
// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiBadgedContent,
  ],
})
export class Example {}
```
### How to Use (Template)

```html
<tui-badged-content>
  <tui-badge-notification tuiSlot="top">1</tui-badge-notification>
  <tui-avatar src="@tui.user"></tui-avatar>
  <tui-badge-notification tuiSlot="bottom">1</tui-badge-notification>
</tui-badged-content>
```

### Example

```html
<tui-badged-content [style.--tui-radius]="radius">
                <tui-badge-notification tuiSlot="top">1</tui-badge-notification>
                <tui-avatar
                    size="l"
                    [round]="radius === '50%'"
                    [src]="'https://avatars.githubusercontent.com/u/11832552' | tuiFallbackSrc: '@tui.user' | async"
                />
            </tui-badged-content>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| style.--t-radius | `string` | Border radius |

### TypeScript

```ts
import {AsyncPipe} from '@angular/common';
import {Component} from '@angular/core';
import {changeDetection} from '@demo/emulate/change-detection';
import {TuiDemo} from '@demo/utils';
import {TuiFallbackSrcPipe} from '@taiga-ui/core';
import {TuiAvatar, TuiBadgedContent, TuiBadgeNotification} from '@taiga-ui/kit';

@Component({
    standalone: true,
    imports: [
        AsyncPipe,
        TuiAvatar,
        TuiBadgedContent,
        TuiBadgeNotification,
        TuiDemo,
        TuiFallbackSrcPipe,
    ],
    templateUrl: './index.html',
    changeDetection,
})
export default class Example {
    protected radiusVariants = ['0.75rem', '50%'];
    protected radius = this.radiusVariants[0]!;

    protected readonly examples = [
        'Basic',
        'Rounded content',
        'With different components',
    ];
}
```

---

# components/Bar

- **Package**: `ADDON-CHARTS`
- **Type**: components

A bar for bar chart


### How to Use (Import)

```ts
import {TuiBar} from '@taiga-ui/addon-charts';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiBar,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<tui-bar [value]="value"></tui-bar>
```

### Example

```html
<tui-bar
                class="bar"
                [size]="size"
                [value]="value"
            />
```

### API

| Property | Type | Description |
|----------|-----|----------|
| [size] | `TuiSizeS | TuiSizeL` | Size |
| [value] | `readonly number[]` | An array of segments |

### TypeScript

```ts
import {Component} from '@angular/core';
import {changeDetection} from '@demo/emulate/change-detection';
import {TuiDemo} from '@demo/utils';
import {TuiBar} from '@taiga-ui/addon-charts';
import type {TuiSizeL, TuiSizeS} from '@taiga-ui/core';

@Component({
    standalone: true,
    imports: [TuiBar, TuiDemo],
    templateUrl: './index.html',
    styleUrls: ['./index.less'],
    changeDetection,
})
export default class Page {
    protected readonly examples = ['Basic', 'Segments'];

    protected readonly sizeVariants: ReadonlyArray<TuiSizeL | TuiSizeS> = ['s', 'm', 'l'];

    protected size = this.sizeVariants[1]!;

    protected readonly valueVariants = [
        [30, 20, 10],
        [237, 50, 10, 5, 1],
    ];

    protected value = this.valueVariants[0]!;
}
```
### LESS

```less
.bar {
    block-size: 6.25rem;
}
```

---

# components/BarChart

- **Package**: `ADDON-CHARTS`
- **Type**: components

Bar chart that can be used as a content to
            
                axes
            
            .


### How to Use (Import)

```ts
import {TuiBarChart} from '@taiga-ui/addon-charts';

//...

@Component({
  standalone: true,
  imports: [
    //  ...
    TuiBarChart,
  ],
  //...
})
export class Example {}
```
### How to Use (Template)

```html
<tui-bar-chart [value]="value"></tui-bar-chart>
```

### Example

```html
<tui-bar-chart
                class="chart"
                [collapsed]="collapsed"
                [max]="max"
                [size]="size"
                [value]="value"
                (tapColumn)="documentationPropertyTapColumn.emitEvent($event)"
            />
```

### API

| Property | Type | Description |
|----------|-----|----------|
| [collapsed] | `boolean` | Shows data set in a single bar |
| [max] | `number` | Sets chart max manually |
| [size] | `TuiSizeS | TuiSizeL | null` | for autosize) |
| [value] | `ReadonlyArray<readonly number[]>` | Array of segments |
| (tapColumn) | `number` | Bar column click/enter event |

### TypeScript

```ts
import {Component} from '@angular/core';
import {changeDetection} from '@demo/emulate/change-detection';
import {DemoRoute} from '@demo/routes';
import {TuiDemo} from '@demo/utils';
import {TuiBarChart} from '@taiga-ui/addon-charts';
import type {TuiSizeL, TuiSizeS} from '@taiga-ui/core';

@Component({
    standalone: true,
    imports: [TuiBarChart, TuiDemo],
    templateUrl: './index.html',
    styleUrls: ['./index.less'],
    changeDetection,
})
export default class Page {
    protected collapsed = false;

    protected readonly sizeVariants: ReadonlyArray<TuiSizeL | TuiSizeS> = ['s', 'm', 'l'];

    protected size: TuiSizeL | TuiSizeS | null = null;

    protected max = 0;

    protected readonly valueVariants = [
        [
            [30000, 20500, 12345],
            [12422, 16124, 22424],
        ],
        [
            [30, 65, 30, 80, 54],
            [98, 48, 33, 25, 11],
            [55, 10, 27, 36, 73],
        ],
    ];

    protected value = this.valueVariants[0]!;
    protected readonly routes = DemoRoute;
}
```
### LESS

```less
.chart {
    block-size: 12.5rem;
}
```

---

# components/BarSet

- **Package**: `ADDON-CHARTS`
- **Type**: components

A group of bars for bar chart


### How to Use (Import)

```ts
import {TuiBarSet} from '@taiga-ui/addon-charts';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiBarSet,
  ],
})
// ...
export class Example {}
```
### How to Use (Template)

```html
<tui-bar-set [value]="value"></tui-bar>
```

### Example

```html
<tui-bar-set
                class="bars"
                [collapsed]="collapsed"
                [size]="size"
                [value]="value"
            />
```

### API

| Property | Type | Description |
|----------|-----|----------|
| [collapsed] | `boolean` | Shows data set in a single bar |
| [size] | `TuiSizeS | TuiSizeL | null` | for autosize) |
| [value] | `readonly number[]` | Array of segments |

### TypeScript

```ts
import {Component} from '@angular/core';
import {changeDetection} from '@demo/emulate/change-detection';
import {TuiDemo} from '@demo/utils';
import {TuiBarSet} from '@taiga-ui/addon-charts';
import type {TuiSizeL, TuiSizeS} from '@taiga-ui/core';

@Component({
    standalone: true,
    imports: [TuiBarSet, TuiDemo],
    templateUrl: './index.html',
    styleUrls: ['./index.less'],
    changeDetection,
})
export default class Page {
    protected readonly examples = [
        'Dynamic size',
        'Fixed size',
        'With negative values',
        'Horizontal',
        'With value label',
    ];

    protected collapsed = false;

    protected readonly sizeVariants: ReadonlyArray<TuiSizeL | TuiSizeS> = ['s', 'm', 'l'];

    protected size: TuiSizeL | TuiSizeS | null = null;

    protected readonly valueVariants = [
        [30, 20, 10],
        [237, -50, 10, 5, 1],
    ];

    protected value = this.valueVariants[0]!;
}
```
### LESS

```less
.bars {
    block-size: 10rem;
    inline-size: 6.25rem;
    box-shadow: 0 1px var(--tui-border-normal);
}
```

---

# components/Block

- **Package**: `KIT`
- **Type**: components

Block
            is a special presentation of a checkbox/radiobutton which can display actual control or be a control itself


### How to Use (Import)

```ts
import {FormsModule, ReactiveFormsModule} from '@angular/forms';
import {TuiBlock, TuiCheckbox} from '@taiga-ui/kit';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    FormsModule,
    TuiBlock,
    TuiCheckbox, // or TuiRadio
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<!-- Visible checkbox -->
<label tuiBlock>
  <input
    type="checkbox"
    tuiCheckbox
    [(ngModel)]="value"
  />
  I'm a label
</label>

<!-- Implicit checkbox -->
<label tuiBlock>
  <input
    type="checkbox"
    tuiBlock
    [(ngModel)]="value"
  />
  I'm a label
</label>
```

### Example

```html
<label
                [appearance]="appearance.appearance"
                [iconEnd]="icons.iconEnd"
                [iconStart]="icons.iconStart"
                [tuiAppearanceFocus]="appearance.focus"
                [tuiAppearanceMode]="appearance.mode"
                [tuiAppearanceState]="appearance.state"
                [tuiBlock]="size"
            >
                <span tuiTitle>
                    tuiTitle
                    <span tuiSubtitle>tuiSubtitle</span>
                </span>
                <input
                    tuiSwitch
                    type="checkbox"
                    [(ngModel)]="value"
                />
            </label>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| [tuiBlock] | `TuiSizeL | TuiSizeS` | Size of the block |

### TypeScript

```ts
import {Component} from '@angular/core';
import {FormsModule} from '@angular/forms';
import {TuiDocAppearance} from '@demo/components/appearance';
import {TuiDocIcons} from '@demo/components/icons';
import {changeDetection} from '@demo/emulate/change-detection';
import {TuiDemo} from '@demo/utils';
import type {TuiSizeL, TuiSizeS} from '@taiga-ui/core';
import {TuiTitle} from '@taiga-ui/core';
import {TuiBlock, TuiSwitch} from '@taiga-ui/kit';

@Component({
    standalone: true,
    imports: [
        FormsModule,
        TuiBlock,
        TuiDemo,
        TuiDocAppearance,
        TuiDocIcons,
        TuiSwitch,
        TuiTitle,
    ],
    templateUrl: './index.html',
    changeDetection,
})
export default class Example {
    protected readonly examples = ['Sizes', 'Groups', 'Custom'];
    protected readonly sizes: ReadonlyArray<TuiSizeL | TuiSizeS> = ['s', 'm', 'l'];
    protected readonly appearances = ['outline-grayscale', 'secondary'];

    protected value = false;
    protected size = this.sizes[2]!;
}
```

---

# components/BlockDetails

- **Package**: `LAYOUT`
- **Type**: components

Layout directive for describing details. For example, transaction details


### How to Use (Import)

```ts
import {Component} from '@angular/core';
import {TuiBlockDetails} from '@taiga-ui/layout';
// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiBlockDetails,
  ],
})
export class Example {}
```
### How to Use (Template)

```html
<div tuiBlockDetails>
  <tui-avatar></tui-avatar>
  <h2 tuiTitle>
    Title
    <div tuiSubtitle>Subtitle</div>
  </h2>

  <span>{{ amount }} | tuiAmount: 'USD' | async }}</span>
  <span tuiAmountDescription>description</span>
  <span tuiComment>comment</span>
  <tui-badge appearance="neutral">Badge</tui-badge>
</div>
```

---

# components/BlockStatus

- **Package**: `LAYOUT`
- **Type**: components

Component for status screens, result screens and zero screens


### How to Use (Import)

```ts
import {TuiBlockStatus} from '@taiga-ui/layout';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiBlockStatus,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<tui-block-status [card]="card">
  <img
    tuiSlot="top"
    src="src"
  />
  <h4>Title</h4>
  Description
  <button
    tuiButton
    tuiItem
  >
    Button
  </button>
</tui-block-status>
```

### Example

```html
<tui-block-status
                [card]="card"
                [size]="size"
            >
                <img
                    alt="hidden content"
                    src="./assets/images/camping.svg"
                    tuiSlot="top"
                />
                <h4>Title</h4>
                Description
                <button
                    appearance="secondary"
                    tuiButton
                    type="button"
                >
                    Action
                </button>
            </tui-block-status>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| [card] | `boolean` | Enable border radius and padding for card view |
| [size] | `TuiSizeL` | Size (for desktop only) |

### TypeScript

```ts
import {Component} from '@angular/core';
import {changeDetection} from '@demo/emulate/change-detection';
import {TuiDemo} from '@demo/utils';
import type {TuiSizeL} from '@taiga-ui/core';
import {TuiButton} from '@taiga-ui/core';
import {TuiBlockStatus} from '@taiga-ui/layout';

@Component({
    standalone: true,
    imports: [TuiBlockStatus, TuiButton, TuiDemo],
    templateUrl: './index.html',
    changeDetection,
})
export default class Example {
    protected card = false;

    protected readonly sizes: TuiSizeL[] = ['l', 'm'];

    protected size: TuiSizeL = this.sizes[0] || 'l';

    protected readonly examples = [
        'Basic',
        'With actions',
        'Cards',
        'Customization',
        'Mobile',
        'Desktop medium',
        'Empty image block',
        'Empty description block',
    ];
}
```

---

# components/BottomSheet

- **Package**: `ADDON-MOBILE`
- **Type**: components

A non-modal draggable sheet


### How to Use (Import)

```ts
import {TuiBottomSheet} from '@taiga-ui/addon-mobile';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiBottomSheet,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<tui-bottom-sheet>Content</tui-bottom-sheet>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| [stops] | `readonly string[]` | Scroll snap stops |

---

# components/Breadcrumbs

- **Package**: `KIT`
- **Type**: components

Navigation element that shows a path from root page to the current


### How to Use (Import)

```ts
import {TuiItem} from '@taiga-ui/cdk';
import {TuiBreadcrumbs} from '@taiga-ui/kit';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiItem,
    TuiBreadcrumbs,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<tui-breadcrumbs [size]="size">
  <ng-container *ngFor="let item of items">
    <a
      *tuiItem
      tuiLink
      [routerLink]="item.routerLink"
    >
      {{ item.caption }}
    </a>
  </ng-container>
</tui-breadcrumbs>
```

### Example

```html
<tui-breadcrumbs
                [itemsLimit]="itemsLimit"
                [size]="size"
            >
                <ng-container *ngFor="let item of items">
                    <button
                        *tuiItem
                        tuiLink
                        type="button"
                    >
                        {{ item }}
                    </button>
                </ng-container>
            </tui-breadcrumbs>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| [itemsLimit] | `number` | Limit on visible items |
| [size] | `TuiSizeL` | Text size |

### TypeScript

```ts
import {Component, inject} from '@angular/core';
import {changeDetection} from '@demo/emulate/change-detection';
import {TuiDemo} from '@demo/utils';
import {TuiItem} from '@taiga-ui/cdk';
import type {TuiSizeL} from '@taiga-ui/core';
import {TuiLink} from '@taiga-ui/core';
import {TUI_BREADCRUMBS_OPTIONS, TuiBreadcrumbs} from '@taiga-ui/kit';

@Component({
    standalone: true,
    imports: [TuiBreadcrumbs, TuiDemo, TuiItem, TuiLink],
    templateUrl: './index.html',
    changeDetection,
})
export default class Example {
    private readonly options = inject(TUI_BREADCRUMBS_OPTIONS);

    protected readonly examples = ['Basic', 'Overflow'];
    protected readonly items = [
        'Item 1',
        'Item 2',
        'Item 3',
        'Item 4',
        'Item 5',
        'Item 6',
        'Item 7',
        'Item 8',
    ];

    protected readonly sizeVariants: readonly TuiSizeL[] = ['m', 'l'];
    protected size: TuiSizeL = this.options.size;
    protected itemsLimit = this.options.itemsLimit;
}
```

---

# components/Button

- **Package**: `CORE`
- **Type**: components


### How to Use (Import)

```ts
import {Component} from '@angular/core';
import {TuiButton} from '@taiga-ui/core';
// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiButton,
  ],
})
export class Example {}
```
### How to Use (Template)

```html
<button tuiButton>Press me</button>
<a tuiButton>Press me</a>
```

### Example

```html
<button
                tuiButton
                type="button"
                [appearance]="appearance.appearance"
                [iconEnd]="icons.iconEnd"
                [iconStart]="icons.iconStart"
                [loading]="loading"
                [size]="size"
                [tuiAppearanceFocus]="appearance.focus"
                [tuiAppearanceMode]="appearance.mode"
                [tuiAppearanceState]="appearance.state"
            >
                Button
            </button>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| [size] | `TuiSizeXS | TuiSizeL` | Size of the button |
| [loading] | `boolean` | ) |

### TypeScript

```ts
import {Component} from '@angular/core';
import {TuiDocAppearance} from '@demo/components/appearance';
import {TuiDocIcons} from '@demo/components/icons';
import {changeDetection} from '@demo/emulate/change-detection';
import {TuiDemo} from '@demo/utils';
import type {TuiSizeL, TuiSizeXS} from '@taiga-ui/core';
import {TuiButton} from '@taiga-ui/core';
import {TuiButtonLoading} from '@taiga-ui/kit';

@Component({
    standalone: true,
    imports: [TuiButton, TuiButtonLoading, TuiDemo, TuiDocAppearance, TuiDocIcons],
    templateUrl: './index.html',
    changeDetection,
})
export default class Page {
    protected readonly examples = [
        'Sizes',
        'Appearance',
        'Icons',
        'Loading',
        'Options with DI',
        'Vertical',
        'Two labels',
    ];

    protected readonly sizes: ReadonlyArray<TuiSizeL | TuiSizeXS> = ['xs', 's', 'm', 'l'];

    protected size = this.sizes[3]!;

    protected loading = false;
}
```

---

# components/ButtonClose

- **Package**: `KIT`
- **Type**: components


### How to Use (Import)

```ts
import {Component} from '@angular/core';
import {TuiButton} from '@taiga-ui/core';
import {TuiButtonClose} from '@taiga-ui/kit';
// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiButton,
    TuiButtonClose,
  ],
})
export class Example {}
```
### How to Use (Template)

```html
<button
  tuiIconButton
  tuiButtonClose
>
  Close
</button>
```

---

# components/ButtonGroup

- **Package**: `KIT`
- **Type**: components


### How to Use (Import)

```ts
import {Component} from '@angular/core';
import {TuiButton} from '@taiga-ui/core';
import {TuiButtonGroup} from '@taiga-ui/kit';
// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiButton,
    TuiButtonGroup,
  ],
})
export class Example {}
```
### How to Use (Template)

```html
<div
  tuiButtonGroup
  tuiSurface="elevated"
>
  <button>
    <tui-icon icon="@tui.circle-plus"></tui-icon>
    Create a payment
  </button>
</div>
```

---

# components/Calendar

- **Package**: `CORE`
- **Type**: components

A simple calendar. If you want a textfield with date, see
            
                InputDate
            
            and
            
                InputDateRange


### How to Use (Import)

```ts
import {TuiCalendar} from '@taiga-ui/core';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiCalendar,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<tui-calendar></tui-calendar>
```

### Example

```html
<tui-calendar
                [disabledItemHandler]="disabledItemHandler"
                [markerHandler]="markerHandler"
                [max]="max"
                [maxViewedMonth]="maxViewedMonth"
                [min]="min"
                [minViewedMonth]="minViewedMonth"
                [showAdjacent]="showAdjacent"
                [value]="value"
                [(hoveredItem)]="hoveredItem"
                [(month)]="month"
                (dayClick)="documentationPropertyDayClick.emitEvent($event)"
            />
```

### API

| Property | Type | Description |
|----------|-----|----------|
| [disabledItemHandler] | `TuiBooleanHandler<TuiDay>` |  |
| [showAdjacent] | `boolean` | Show adjacent months days |
| [(hoveredItem)] | `TuiDay | null` | Hovered date |
| [markerHandler] | `TuiMarkerHandler | null` | A handler that gets date and returns null or a tuple with circled marker colors |
| [max] | `TuiDay | null` | Maximal date to choose |
| [maxViewedMonth] | `TuiMonth | null` | Maximal month to access |
| [min] | `TuiDay | null` | Minimum date to choose |
| [minViewedMonth] | `TuiMonth | null` | Minimum month to access |
| [(month)] | `TuiMonth` | Current month |
| [value] | `TuiDay | TuiDayRange | null` | Selected day or range |
| (dayClick) | `TuiDay` | Date click |

### TypeScript

```ts
import {Component} from '@angular/core';
import {RouterModule} from '@angular/router';
import {changeDetection} from '@demo/emulate/change-detection';
import {DemoRoute} from '@demo/routes';
import {TuiDemo} from '@demo/utils';
import type {TuiBooleanHandler} from '@taiga-ui/cdk';
import {
    TUI_FALSE_HANDLER,
    TUI_FIRST_DAY,
    TUI_LAST_DAY,
    TuiDay,
    TuiDayRange,
    TuiMonth,
} from '@taiga-ui/cdk';
import type {TuiMarkerHandler} from '@taiga-ui/core';
import {TuiCalendar} from '@taiga-ui/core';

const TWO_DOTS: [string, string] = [
    'var(--tui-background-accent-1)',
    'var(--tui-status-info)',
];
const ONE_DOT: [string] = ['var(--tui-status-positive)'];

@Component({
    standalone: true,
    imports: [RouterModule, TuiCalendar, TuiDemo],
    templateUrl: './index.html',
    changeDetection,
})
export default class Example {
    protected readonly examples = [
        'Basic',
        'Range',
        'With markers',
        'Localization',
        'Color customization',
        'Select multiple dates',
        'Open in year view',
    ];

    protected showAdjacent = true;

    protected readonly minVariants = [
        TUI_FIRST_DAY,
        new TuiDay(2017, 2, 5),
        new TuiDay(1900, 0, 1),
    ];

    protected min = this.minVariants[0]!;

    protected readonly maxVariants = [
        TUI_LAST_DAY,
        new TuiDay(2020, 3, 30),
        new TuiDay(2300, 0, 1),
    ];

    protected max = this.maxVariants[0]!;

    protected readonly minViewedMonthVariants = [
        new TuiMonth(0, 0),
        new TuiMonth(2017, 2),
        new TuiMonth(1900, 0),
    ];

    protected minViewedMonth = this.minViewedMonthVariants[0]!;

    protected readonly maxViewedMonthVariants = [
        TUI_LAST_DAY,
        new TuiMonth(2020, 3),
        new TuiMonth(2300, 0),
    ];

    protected maxViewedMonth = this.maxViewedMonthVariants[0]!;

    protected readonly disabledItemHandlerVariants: ReadonlyArray<
        TuiBooleanHandler<TuiDay>
    > = [TUI_FALSE_HANDLER, ({day}) => day % 3 === 0];

    protected disabledItemHandler = this.disabledItemHandlerVariants[0]!;

    protected readonly markerHandlerVariants: readonly TuiMarkerHandler[] = [
        (day: TuiDay) => (day.day % 2 === 0 ? TWO_DOTS : ONE_DOT),
    ];

    protected markerHandler: TuiMarkerHandler | null = null;

    protected readonly valueVariants: ReadonlyArray<TuiDay | TuiDayRange> = [
        TuiDay.currentLocal(),
        new TuiDayRange(TuiDay.currentLocal(), TuiDay.currentLocal().append({day: 3})),
        new TuiDay(2020, 3, 21),
    ];

    protected value: TuiDay | TuiDayRange | null = null;

    protected month = TuiMonth.currentLocal();

    protected hoveredItem: TuiDay | null = null;
    protected readonly routes = DemoRoute;
}
```

---

# components/CalendarMonth

- **Package**: `KIT`
- **Type**: components

Month picker component. If you want a textfield, see
            
                InputMonth


### How to Use (Import)

```ts
import {TuiCalendarMonth} from '@taiga-ui/kit';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiCalendarMonth,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<tui-calendar-month></tui-calendar-month>
```

### Example

```html
<tui-calendar-month
                [disabledItemHandler]="disabledItemHandler"
                [max]="max"
                [maxLength]="maxLength"
                [min]="min"
                [minLength]="minLength"
                [value]="value"
                [year]="year"
                (monthClick)="documentationPropertyMonthClick.emitEvent($event)"
            />
```

### API

| Property | Type | Description |
|----------|-----|----------|
| [disabledItemHandler] | `TuiBooleanHandler<TuiMonth>` |  |
| [max] | `TuiMonth | null` | Maximal month |
| [min] | `TuiMonth | null` | Minimal month |
| [maxLength] | `number` | Maximum length |
| [minLength] | `number` | Minimum length |
| [value] | `TuiMonth | TuiMonthRange | null` | A single month or a range of months |
| [(year)] | `TuiYear` | Current year |
| (monthClick) | `TuiMonth` | Selected month |

### TypeScript

```ts
import {Component} from '@angular/core';
import {RouterModule} from '@angular/router';
import {changeDetection} from '@demo/emulate/change-detection';
import {DemoRoute} from '@demo/routes';
import {TuiDemo} from '@demo/utils';
import type {TuiBooleanHandler} from '@taiga-ui/cdk';
import {
    TUI_FALSE_HANDLER,
    TUI_FIRST_DAY,
    TUI_LAST_DAY,
    TuiDay,
    TuiMonth,
    TuiMonthRange,
    TuiYear,
} from '@taiga-ui/cdk';
import {TuiLink} from '@taiga-ui/core';
import {TuiCalendarMonth} from '@taiga-ui/kit';
import {TuiInputMonthRangeModule} from '@taiga-ui/legacy';

@Component({
    standalone: true,
    imports: [RouterModule, TuiCalendarMonth, TuiDemo, TuiInputMonthRangeModule, TuiLink],
    templateUrl: './index.html',
    changeDetection,
})
export default class Example {
    protected readonly examples = ['Basic', 'Range'];

    protected readonly minVariants = [
        TUI_FIRST_DAY,
        new TuiMonth(2019, 2),
        new TuiMonth(2007, 0),
    ];

    protected readonly maxVariants = [
        TUI_LAST_DAY,
        new TuiMonth(2020, 2),
        new TuiMonth(2023, 0),
        new TuiMonth(2019, 4),
    ];

    protected min = this.minVariants[0]!;
    protected max = this.maxVariants[0]!;
    protected maxLength = 0;
    protected minLength = 0;

    protected readonly disabledItemHandlerVariants: ReadonlyArray<
        TuiBooleanHandler<TuiMonth>
    > = [TUI_FALSE_HANDLER, ({month}) => month % 3 === 0];

    protected disabledItemHandler = this.disabledItemHandlerVariants[0]!;

    protected readonly valueVariants: ReadonlyArray<TuiMonth | TuiMonthRange> = [
        TuiDay.currentLocal(),
        new TuiMonthRange(
            TuiDay.currentLocal(),
            TuiDay.currentLocal().append({month: 3}),
        ),
        new TuiMonth(2007, 2),
    ];

    protected value: TuiMonth | TuiMonthRange | null = null;

    protected readonly yearVariants: readonly TuiYear[] = [
        TuiDay.currentLocal(),
        new TuiYear(2007),
    ];

    protected year = this.yearVariants[0]!;
    protected readonly routes = DemoRoute;
}
```

---

# components/CalendarRange

- **Package**: `KIT`
- **Type**: components

Component for choosing date range in calendar


### How to Use (Import)

```ts
import {TuiCalendarRange} from '@taiga-ui/kit';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiCalendarRange,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<tui-calendar-range />
```

### Example

```html
<tui-calendar-range
                [defaultViewedMonth]="defaultViewedMonth"
                [disabledItemHandler]="disabledItemHandler"
                [items]="items"
                [markerHandler]="markerHandler"
                [max]="max"
                [maxLength]="maxLength"
                [min]="min"
                [minLength]="minLength"
                (valueChange)="documentationPropertyRangeChange.emitEvent($event)"
            />
```

### API

| Property | Type | Description |
|----------|-----|----------|
| [defaultViewedMonth] | `TuiMonth` | Default month to show |
| [disabledItemHandler] | `TuiBooleanHandler<TuiDay>` |  |
| [items] | `TuiDayRangePeriod[]` | Fixed intervals (shows 2 calendars with empty array) |
| [markerHandler] | `TuiMarkerHandler | null` | A handler that gets date and returns null or a tuple with circled marker colors |
| [min] | `TuiDay | null` | Min date |
| [max] | `TuiDay | null` | Max date |
| [minLength] | `TuiDayLike | null` | Minimal length of range |
| [maxLength] | `TuiDayLike | null` | Maximal length of range |
| (rangeChange) | `TuiDayRange` | Selected date range |

### TypeScript

```ts
import {Component} from '@angular/core';
import {changeDetection} from '@demo/emulate/change-detection';
import {DemoRoute} from '@demo/routes';
import {TuiDemo} from '@demo/utils';
import type {TuiBooleanHandler, TuiDayLike} from '@taiga-ui/cdk';
import {
    TUI_FALSE_HANDLER,
    TUI_FIRST_DAY,
    TUI_LAST_DAY,
    TuiDay,
    TuiMonth,
} from '@taiga-ui/cdk';
import type {TuiMarkerHandler} from '@taiga-ui/core';
import {TuiLink} from '@taiga-ui/core';
import type {TuiDayRangePeriod} from '@taiga-ui/kit';
import {TuiCalendarRange, tuiCreateDefaultDayRangePeriods} from '@taiga-ui/kit';

const TWO_DOTS: [string, string] = [
    'var(--tui-background-accent-1)',
    'var(--tui-status-info)',
];
const ONE_DOT: [string] = ['var(--tui-status-positive)'];

@Component({
    standalone: true,
    imports: [TuiCalendarRange, TuiDemo, TuiLink],
    templateUrl: './index.html',
    changeDetection,
})
export default class Example {
    protected readonly examples = [
        'Basic',
        'With value',
        'With ranges',
        'Localization',
        'With another range switcher',
    ];

    protected readonly minVariants = [
        TUI_FIRST_DAY,
        new TuiDay(2017, 2, 5),
        new TuiDay(1900, 0, 1),
    ];

    protected readonly maxVariants = [
        TUI_LAST_DAY,
        new TuiDay(2018, 9, 30),
        new TuiDay(2020, 2, 5),
        new TuiDay(2300, 0, 1),
        TuiDay.currentLocal(),
    ];

    protected readonly disabledItemHandlerVariants: ReadonlyArray<
        TuiBooleanHandler<TuiDay>
    > = [TUI_FALSE_HANDLER, ({day}) => day % 3 === 0];

    protected readonly defaultViewedMonthVariants: readonly TuiMonth[] = [
        TuiMonth.currentLocal(),
        TuiMonth.currentLocal().append({month: 1}),
        new TuiMonth(2007, 5),
    ];

    protected readonly itemsVariants: ReadonlyArray<readonly TuiDayRangePeriod[]> = [
        [],
        tuiCreateDefaultDayRangePeriods(),
    ];

    protected readonly minLengthVariants: readonly TuiDayLike[] = [{day: 3}, {day: 15}];

    protected readonly maxLengthVariants: readonly TuiDayLike[] = [
        {day: 5},
        {month: 1},
        {year: 1},
    ];

    protected readonly markerHandlerVariants: readonly TuiMarkerHandler[] = [
        (day: TuiDay) => (day.day % 2 === 0 ? TWO_DOTS : ONE_DOT),
    ];

    protected markerHandler: TuiMarkerHandler | null = null;
    protected min: TuiDay = this.minVariants[0]!;
    protected max: TuiDay = this.maxVariants[0]!;
    protected cleaner = false;
    protected disabledItemHandler = this.disabledItemHandlerVariants[0]!;
    protected items = this.itemsVariants[0]!;
    protected defaultViewedMonth = this.defaultViewedMonthVariants[0]!;
    protected minLength: TuiDayLike | null = null;
    protected maxLength: TuiDayLike | null = null;
    protected readonly routes = DemoRoute;
}
```

---

# components/CardCollapsed

- **Package**: `LAYOUT`
- **Type**: components


### How to Use (Import)

```ts
import {TuiButton, TuiTitle} from '@taiga-ui/core';
import {TuiExpand, TuiChevron} from '@taiga-ui/kit';
import {TuiCard, TuiHeader} from '@taiga-ui/layout';
// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiCard,
    TuiHeader,
    TuiTitle,
    TuiButton,
    TuiChevron,
    TuiExpand,
  ],
})
export class Example {}
```
### How to Use (Template)

```html
<section
  tuiCardLarge
  [tuiCardCollapsed]="collapsed"
>
  <header tuiHeader>
    <hgroup tuiTitle>
      <h2>Title</h2>
      <p tuiSubtitle>Subtitle</p>
    </hgroup>
    <aside tuiAccessories>
      <button
        tuiIconButton
        [tuiChevron]="!collapsed"
        (click)="collapsed = !collapsed"
      >
        Expand
      </button>
    </aside>
  </header>
  <tui-expand [expanded]="!collapsed">...</tui-expand>
</section>
```

---

# components/CardLarge

- **Package**: `LAYOUT`
- **Type**: components


### How to Use (Import)

```ts
import {Component} from '@angular/core';
import {TuiAppearance} from '@taiga-ui/core';
import {TuiCardLarge} from '@taiga-ui/layout';
// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiAppearance,
    TuiCardLarge,
  ],
})
export class Example {}
```
### How to Use (Template)

```html
<div
  tuiCardLarge
  tuiAppearance="floating"
>
  <div tuiHeader>
    <h2 tuiTitle>Header</h2>
  </div>
</div>
```

---

# components/CardMedium

- **Package**: `LAYOUT`
- **Type**: components

A layout component used to create various cards for the interface. Define visual styles of the cards
            yourself or combine with
            
                Surface
            
            for visual presets.


### How to Use (Import)

```ts
import {Component} from '@angular/core';
import {TuiCardMedium} from '@taiga-ui/layout';
// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiCardMedium,
  ],
})
export class Example {}
```
### How to Use (Template)

```html
<div tuiCardMedium>
  <tui-avatar
    class="star"
    src="@tui.star"
  ></tui-avatar>

  <h2 tuiTitle>
    Title
    <span tuiSubtitle>Subtitle</span>
  </h2>
</div>
```

---

# components/Carousel

- **Package**: `KIT`
- **Type**: components

Carousel allows you to rotate through arbitrary items. Multiple items can be shown simultaneously.


### How to Use (Import)

```ts
import {TuiCarousel} from '@taiga-ui/kit';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiCarousel,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<tui-carousel>
  <div *tuiItem>Slide 1</div>
  <div *tuiItem>Slide 2</div>
  <div *tuiItem>Slide 3</div>
</tui-carousel>
```

### Example

```html
<tui-carousel
                class="carousel"
                [draggable]="draggable"
                [duration]="duration"
                [itemsCount]="itemsCount"
                [style.--tui-carousel-padding]="itemPadding"
                [(index)]="index"
                (touchstart.passive.stop)="(0)"
            >
                <ng-container *tuiRepeatTimes="let item of 9">
                    <div
                        *tuiItem
                        class="plate"
                    >
                        {{ item }}
                        <button
                            size="s"
                            tuiButton
                            type="button"
                            class="button"
                        >
                            I'm focusable
                        </button>
                    </div>
                </ng-container>
            </tui-carousel>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| [draggable] | `boolean` | Whether or not slider can be dragged by clicking and holding |
| [duration] | `number` | Duration in milliseconds for each slide for automatic rotation (use 0 to disable automatic rotation) |
| [itemsCount] | `number` | Number of slides shown at the same time |
| [(index)] | `number` | Current index |

### TypeScript

```ts
import {Component} from '@angular/core';
import {changeDetection} from '@demo/emulate/change-detection';
import {TuiDemo} from '@demo/utils';
import {TuiRepeatTimes} from '@taiga-ui/cdk';
import {TuiButton} from '@taiga-ui/core';
import {TuiCarousel} from '@taiga-ui/kit';

@Component({
    standalone: true,
    imports: [TuiButton, TuiCarousel, TuiDemo, TuiRepeatTimes],
    templateUrl: './index.html',
    styleUrls: ['./index.less'],
    changeDetection,
})
export default class Example {
    protected readonly examples = [
        'Single',
        'Multiple',
        'Custom',
        'Carousel inside dialog',
        'Vertical alignment',
    ];

    protected readonly durationVariants = [0, 3000, 10000];
    protected readonly itemPaddingVariants = [null, '0 10px', '0'];
    protected draggable = false;
    protected duration = this.durationVariants[0]!;
    protected itemPadding: string | null = this.itemPaddingVariants[0]!;
    protected index = 0;
    protected itemsCount = 1;
}
```
### LESS

```less
@import '@taiga-ui/core/styles/taiga-ui-local';

.carousel {
    margin: 0 2.5rem;
    border: 1px solid var(--tui-background-accent-1);
}

.plate {
    display: flex;
    font: var(--tui-font-heading-3);
    flex-direction: column;
    align-items: flex-start;
    inline-size: 100%;
    block-size: 7.5rem;
    padding: 1.75rem;
    box-sizing: border-box;
    background: var(--tui-background-neutral-1);
}

.button {
    margin-top: 0.5rem;
}
```

---

# components/Cell

- **Package**: `LAYOUT`
- **Type**: components


### How to Use (Import)

```ts
import {Component} from '@angular/core';
import {TuiCell} from '@taiga-ui/layout';
// ...

@Component({
  imports: [
    // ...
    TuiCell,
  ],
})
export class Example {}
```
### How to Use (Template)

```html
<div tuiCell>
  <tui-avatar src="..."></tui-avatar>
  <div tuiTitle>
    Title
    <div tuiSubtitle>Subtitle</div>
  </div>
  <button tuiButton>Action</button>
</div>
```

### Example

```html
<div
                [tuiCell]="size"
                [tuiCellHeight]="height"
            >
                <tui-avatar
                    *ngIf="height !== 'compact'"
                    appearance="primary"
                    src="@tui.star"
                />
                <div tuiTitle>
                    Title
                    <div
                        *ngIf="height !== 'compact'"
                        tuiSubtitle
                    >
                        Description
                    </div>
                </div>
                <div tuiTitle>
                    Secondary title
                    <div
                        *ngIf="height !== 'compact'"
                        tuiSubtitle
                    >
                        Another description
                    </div>
                </div>
            </div>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| [tuiCell] | `'l' | 'm' | 's'` | Layout size |
| [tuiCellHeight] | `'normal' | 'compact' | 'spacious'` | Height mode |

### TypeScript

```ts
import {Component} from '@angular/core';
import {changeDetection} from '@demo/emulate/change-detection';
import {TuiDemo} from '@demo/utils';
import {tuiDocExampleOptionsProvider} from '@taiga-ui/addon-doc';
import {TuiTitle} from '@taiga-ui/core';
import {TuiAvatar} from '@taiga-ui/kit';
import type {TuiCellOptions} from '@taiga-ui/layout';
import {TuiCell} from '@taiga-ui/layout';

@Component({
    standalone: true,
    imports: [TuiAvatar, TuiCell, TuiDemo, TuiTitle],
    templateUrl: './index.html',
    styleUrls: ['./index.less'],
    changeDetection,
    providers: [tuiDocExampleOptionsProvider({fullsize: true})],
})
export default class Example {
    protected sizes = ['l', 'm', 's'] as const;
    protected size: TuiCellOptions['size'] = this.sizes[0];

    protected heights = ['normal', 'compact', 'spacious'] as const;
    protected height: TuiCellOptions['height'] = this.heights[0];

    protected readonly examples = [
        'Basic',
        'Label',
        'Left side',
        'Right side',
        'Long content',
        'Actions',
        'Combinations',
        'Connected',
        'Disabled state',
    ];
}
```
### LESS

```less
:host {
    tui-doc-demo::ng-deep .t-content {
        background: var(--tui-background-neutral-1);
    }

    [tuiCell] {
        background: var(--tui-background-elevation-1);
    }
}
```

---

# components/Checkbox

- **Package**: `KIT`
- **Type**: components

A checkbox component that is able to imitate native control on mobile platforms.

        
            Use
            --tui-background-accent-2
            CSS variable to customize color of native control emulation


### How to Use (Import)

```ts
import {Component} from '@angular/core';
import {TuiCheckbox} from '@taiga-ui/kit';
// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiCheckbox,
  ],
})
export class Example {}
```
### How to Use (Template)

```html
<input
  tuiCheckbox
  type="checkbox"
  [(ngModel)]="value"
/>
```

---

# components/Chip

- **Package**: `KIT`
- **Type**: components

Chip component is used to display array data and can also be interactive depending on the tag used.


### How to Use (Import)

```ts
import {Component} from '@angular/core';
import {TuiChip} from '@taiga-ui/kit';
// ...

@Component({
  imports: [
    // ...
    TuiChip,
  ],
})
export class Example {}
```
### How to Use (Template)

```html
<tui-chip appearance="primary">{{ value }}</tui-chip>
```

### Example

```html
<tui-chip
                [appearance]="appearance.appearance"
                [iconEnd]="icons.iconEnd"
                [iconStart]="icons.iconStart"
                [size]="size"
            >
                Chip
            </tui-chip>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| [size] | `TuiSizeXS | TuiSizeL` | Size of the chip |

### TypeScript

```ts
import {Component} from '@angular/core';
import {TuiDocAppearance} from '@demo/components/appearance';
import {TuiDocIcons} from '@demo/components/icons';
import {changeDetection} from '@demo/emulate/change-detection';
import {TuiDemo} from '@demo/utils';
import type {TuiSizeXXS} from '@taiga-ui/core';
import {TuiChip} from '@taiga-ui/kit';

@Component({
    standalone: true,
    selector: 'example-chip',
    imports: [TuiChip, TuiDemo, TuiDocAppearance, TuiDocIcons],
    templateUrl: './index.html',
    changeDetection,
})
export default class Example {
    protected readonly examples = [
        'Basic',
        'Sizes and content',
        'Interactive',
        'Use cases',
        'Auto color',
        'Fade in complex designs',
    ];

    protected readonly sizes: readonly TuiSizeXXS[] = ['xxs', 'xs', 's', 'm'];

    protected size = this.sizes[2]!;
}
```

---

# components/ComboBox

- **Package**: `KIT`
- **Type**: components

ComboBox
        is a form control for
        selecting a single value
        from a set of options. It is similar to
        
            Select
        
        but with a major difference –
        possibility to enter value manually
        .


### How to Use (Import)

```ts
import {FormsModule} from '@angular/forms';
import {TuiTextfield} from '@taiga-ui/core';
import {TuiChevron, TuiComboBox} from '@taiga-ui/kit';

@Component({
  imports: [
    // ...
    FormsModule,
    TuiTextfield,
    TuiChevron,
    TuiComboBox,
  ],
})
export class Example {
  items = ['Option 1', 'Option 2', 'Option 3'];
  value: string | null = null;
}
```
### How to Use (Template)

```html
<tui-textfield tuiChevron>
  <input
    tuiComboBox
    [(ngModel)]="value"
  />

  <tui-data-list-wrapper
    *tuiTextfieldDropdown
    [items]="items"
  />
</tui-textfield>
```

### Example

```html
<ng-template>
                <tui-textfield
                    tuiChevron
                    [content]="control.value && textfieldContent"
                    [disabledItemHandler]="itemsHandlers.disabledItemHandler()"
                    [identityMatcher]="itemsHandlers.identityMatcher()"
                    [stringify]="itemsHandlers.stringify()"
                    [tuiDropdownAlign]="dropdown.align"
                    [tuiDropdownAppearance]="dropdown.appearance"
                    [tuiDropdownDirection]="dropdown.direction"
                    [tuiDropdownLimitWidth]="dropdown.limitWidth"
                    [tuiDropdownMaxHeight]="dropdown.maxHeight"
                    [tuiDropdownMinHeight]="dropdown.minHeight"
                    [tuiDropdownOffset]="dropdown.offset"
                    [tuiTextfieldCleaner]="textfieldDoc.cleaner"
                    [tuiTextfieldSize]="textfieldDoc.size"
                    [(open)]="dropdown.open"
                >
                    <input
                        placeholder="Search country"
                        tuiComboBox
                        [formControl]="control"
                        [invalid]="controlDoc.invalid"
                        [matcher]="matcher"
                        [readOnly]="controlDoc.readonly"
                        [strict]="strict"
                        [tuiDisabled]="controlDoc.disabled"
                    />

                    <tui-data-list-wrapper
                        *tuiTextfieldDropdown
                        new
                        [items]="countries$ | async | tuiFilterByInput"
                    />
                </tui-textfield>
            </ng-template>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| [strict] | `boolean` |  |
| [matcher] | `TuiStringMatcher | null` | function that compares search text and datalist's items to define a match between them. Lowercase string
                comparison function by default. |
| [content] | `PolymorpheusContent` | A template for custom view of textfield value. |

### TypeScript

```ts
import {Component, computed, inject} from '@angular/core';
import {FormControl, ReactiveFormsModule} from '@angular/forms';
import {TuiDocControl} from '@demo/components/control';
import {TuiDocDropdown} from '@demo/components/dropdown';
import {TuiDocItemsHandlers} from '@demo/components/items-handlers';
import {TuiDocTextfield} from '@demo/components/textfield';
import {changeDetection} from '@demo/emulate/change-detection';
import {DemoRoute} from '@demo/routes';
import {TuiDemo} from '@demo/utils';
import type {TuiRawLoaderContent} from '@taiga-ui/addon-doc';
import type {TuiContext, TuiStringMatcher} from '@taiga-ui/cdk';
import {TUI_IS_MOBILE, TUI_STRICT_MATCHER} from '@taiga-ui/cdk';
import {TuiDropdown, TuiTextfield} from '@taiga-ui/core';
import {
    TUI_COUNTRIES,
    TuiChevron,
    TuiComboBox,
    TuiDataListWrapper,
    TuiFilterByInputPipe,
} from '@taiga-ui/kit';
import type {PolymorpheusContent} from '@taiga-ui/polymorpheus';
import type {Observable} from 'rxjs';
import {map} from 'rxjs';

interface Country {
    id: string;
    name: string;
}

@Component({
    standalone: true,
    imports: [
        ReactiveFormsModule,
        TuiChevron,
        TuiComboBox,
        TuiDataListWrapper,
        TuiDemo,
        TuiDocControl,
        TuiDocDropdown,
        TuiDocItemsHandlers,
        TuiDocTextfield,
        TuiDropdown,
        TuiFilterByInputPipe,
        TuiTextfield,
    ],
    templateUrl: './index.html',
    changeDetection,
})
export default class PageComponent {
    protected readonly routes = DemoRoute;
    protected readonly isMobile = inject(TUI_IS_MOBILE);

    protected readonly control = new FormControl<Country | null>(null);

    protected textfieldContent: PolymorpheusContent = '';

    protected readonly countries$: Observable<Country[]> = inject(TUI_COUNTRIES).pipe(
        map((x) => Object.entries(x).map(([id, name]) => ({id, name}))),
    );

    protected readonly matcherVariants: ReadonlyArray<TuiStringMatcher<Country>> = [
        TUI_STRICT_MATCHER as TuiStringMatcher<Country>,
        (item: Country, search: string) => item.id === search,
    ];

    protected matcher = this.matcherVariants[0]!;

    protected readonly textfieldContentVariants = computed(() => [
        '',
        'TOP SECRET',
        ({$implicit: x}: TuiContext<any>) =>
            x?.name.includes('i') ? `->${x.name}<-` : x?.name,
    ]);

    protected strict = true;

    protected readonly databaseExample: TuiRawLoaderContent = import(
        './examples/5/database.ts?raw'
    );

    protected readonly selectOptionExample: TuiRawLoaderContent = import(
        './examples/12/option.ts?raw'
    );

    protected readonly handler = (item: Country): boolean =>
        item.id.charCodeAt(1) % 3 === 0;
}
```

---

# components/ComboBoxLegacy

- **Package**: `LEGACY`
- **Type**: components

This version of the component is deprecated and will be removed in the next major version. Use
            
                new version of ComboBox
            
            instead!
        

        
            ComboBox
            is a textfield with a dropdown with items. You can choose one of available options or input a value
            manually.


### How to Use (Import)

```ts
import {FormsModule, ReactiveFormsModule} from '@angular/forms';
import {TuiDataList} from '@taiga-ui/core';
import {TuiDataListWrapper} from '@taiga-ui/kit';
import {TuiComboBoxModule} from '@taiga-ui/legacy';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    FormsModule,
    ReactiveFormsModule,
    TuiComboBoxModule,
    TuiDataList,
    TuiDataListWrapper,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<form [formGroup]="testForm">
  <tui-combo-box formControlName="testValue">
    <tui-data-list-wrapper
      *tuiDataList
      [items]="items"
    ></tui-data-list-wrapper>
  </tui-combo-box>
</form>
```

### Example

```html
<ng-template>
                <tui-combo-box
                    [focusable]="focusable"
                    [formControl]="control"
                    [identityMatcher]="identityMatcher"
                    [pseudoActive]="pseudoPressed"
                    [pseudoFocus]="pseudoFocused"
                    [pseudoHover]="pseudoHovered"
                    [pseudoInvalid]="pseudoInvalid"
                    [readOnly]="readOnly"
                    [strict]="strict"
                    [strictMatcher]="strictMatcher"
                    [stringify]="stringify"
                    [tuiDropdownAlign]="dropdownAlign"
                    [tuiDropdownDirection]="dropdownDirection"
                    [tuiDropdownLimitWidth]="dropdownLimitWidth"
                    [tuiDropdownMaxHeight]="dropdownMaxHeight"
                    [tuiDropdownMinHeight]="dropdownMinHeight"
                    [tuiDropdownOffset]="dropdownOffset"
                    [tuiDropdownOpen]="!!(dropdownOpen | async)"
                    [tuiHintAppearance]="hintAppearance"
                    [tuiHintContent]="hintContent"
                    [tuiHintDirection]="hintDirection"
                    [tuiTextfieldCleaner]="cleaner"
                    [tuiTextfieldFiller]="filler"
                    [tuiTextfieldIconLeft]="iconStart"
                    [tuiTextfieldLabelOutside]="labelOutside"
                    [tuiTextfieldSize]="size"
                    [valueContent]="valueContent"
                    [(search)]="search"
                    (tuiDropdownOpenChange)="dropdownOpen.next($event)"
                >
                    Choose an account
                    <tui-data-list-wrapper
                        *tuiDataList
                        [items]="filter(search)"
                    />
                </tui-combo-box>
            </ng-template>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| disabled | `boolean` | ) |
| [(search)] | `string | null` | when item from list selected) |
| [identityMatcher] | `TuiIdentityMatcher` |  |
| [strict] | `boolean` |  |
| [strictMatcher] | `TuiStringMatcher | null` |  |
| [stringify] | `TuiStringHandler` |  |
| [valueContent] | `PolymorpheusContent` | A template for custom view of selected value |

### TypeScript

```ts
import {Component, ViewChild} from '@angular/core';
import {FormControl, ReactiveFormsModule, Validators} from '@angular/forms';
import {changeDetection} from '@demo/emulate/change-detection';
import {DemoRoute} from '@demo/routes';
import {TuiDemo} from '@demo/utils';
import {tuiDocExcludeProperties} from '@taiga-ui/addon-doc';
import type {TuiIdentityMatcher, TuiStringHandler, TuiStringMatcher} from '@taiga-ui/cdk';
import {
    TUI_DEFAULT_MATCHER,
    TUI_STRICT_MATCHER,
    tuiProvide,
    tuiPure,
} from '@taiga-ui/cdk';
import type {TuiValueContentContext} from '@taiga-ui/core';
import {TuiDropdown, TuiHint, TuiIcon} from '@taiga-ui/core';
import {TuiDataListWrapper} from '@taiga-ui/kit';
import {TuiComboBoxModule, TuiTextfieldControllerModule} from '@taiga-ui/legacy';
import type {PolymorpheusContent} from '@taiga-ui/polymorpheus';

import {ABSTRACT_PROPS_ACCESSOR} from '../abstract/abstract-props-accessor';
import {AbstractExampleTuiControl} from '../abstract/control';
import {InheritedDocumentation} from '../abstract/inherited-documentation';

class Account {
    constructor(
        public readonly name: string,
        public readonly balance: number,
    ) {}

    public toString(): string {
        return `${this.name} (${this.balance})`;
    }
}

@Component({
    standalone: true,
    imports: [
        InheritedDocumentation,
        ReactiveFormsModule,
        TuiComboBoxModule,
        TuiDataListWrapper,
        TuiDemo,
        TuiDropdown,
        TuiHint,
        TuiIcon,
        TuiTextfieldControllerModule,
    ],
    templateUrl: './index.html',
    styleUrls: ['./index.less'],
    changeDetection,
    providers: [
        tuiProvide(ABSTRACT_PROPS_ACCESSOR, Example),
        tuiDocExcludeProperties(['tuiTextfieldPrefix', 'tuiTextfieldPostfix']),
    ],
})
export default class Example extends AbstractExampleTuiControl {
    @ViewChild('valueTemplateContent')
    private readonly valueTemplateRef: PolymorpheusContent<
        TuiValueContentContext<Account>
    >;

    protected readonly routes = DemoRoute;

    protected readonly exampleForm = import('./examples/import/form.md?raw');

    protected readonly exampleModule = import('./examples/import/import.md?raw');

    protected readonly exampleHtml = import('./examples/import/template.md?raw');

    protected readonly example2 = {
        HTML: import('./examples/2/index.html?raw'),
        TypeScript: import('./examples/2/index.ts?raw'),
        LESS: import('./examples/2/index.less?raw'),
        'user.ts': import('./examples/2/user.ts?raw'),
        'request.service.ts': import('./examples/2/request.service.ts?raw'),
        'database-mock-data.ts': import('./examples/2/database-mock-data.ts?raw'),
    };

    protected readonly example5 = {
        HTML: import('./examples/5/index.html?raw'),
        TypeScript: import('./examples/5/index.ts?raw'),
        LESS: import('./examples/5/index.less?raw'),
        'index-change.directive.ts': import('./examples/5/index-change.directive.ts?raw'),
    };

    protected readonly items = [
        new Account('Rubles', 500),
        new Account('Dollars', 237),
        new Account('Netherlands Antillean Guilder and Falkland Islands Pound', 700),
    ];

    protected strict = true;

    protected search: string | null = '';

    protected valueTemplateVariants = ['', 'Template'];

    protected selectedValueTemplate = '';

    protected readonly stringifyVariants: Array<TuiStringHandler<Account | string>> = [
        String,
        (item) => String(/\d+/.exec(String(item))),
    ];

    protected stringify = this.stringifyVariants[0]!;

    protected readonly strictMatcherVariants: ReadonlyArray<TuiStringMatcher<Account>> = [
        TUI_STRICT_MATCHER as TuiStringMatcher<Account>,
        (item: Account, search: string, stringify: TuiStringHandler<Account>) =>
            Number.parseInt(stringify(item).match(/\d+/g)![0], 10) ===
            Number.parseInt(search, 10),
    ];

    protected strictMatcher = this.strictMatcherVariants[0]!;

    protected readonly identityMatcherVariants: ReadonlyArray<
        TuiIdentityMatcher<Account>
    > = [
        (item1, item2) => item1 === item2,
        (item1, item2) => item1.balance === item2.balance,
    ];

    protected identityMatcher = this.identityMatcherVariants[0]!;

    public readonly control = new FormControl<Account | null>(null, Validators.required);

    public readonly iconVariants = ['', '@tui.pie-chart', '@tui.credit-card'];

    public override iconStart = this.iconVariants[0]!;

    protected get valueContent(): PolymorpheusContent<TuiValueContentContext<Account>> {
        return this.valueTemplateRef && this.selectedValueTemplate
            ? this.valueTemplateRef
            : '';
    }

    @tuiPure
    protected filter(query: string | null): readonly Account[] {
        return this.items.filter((item) => TUI_DEFAULT_MATCHER(item, query || ''));
    }

    protected setValue(): void {
        this.control.setValue(new Account('Dollars', 237));
    }
}
```
### LESS

```less
.item-template {
    display: flex;
    align-items: center;
}

.item-template-icon {
    margin-right: 0.375rem;
    border-width: 0.25rem;
}
```

---

# components/Compass

- **Package**: `KIT`
- **Type**: components


### How to Use (Import)

```ts
import {Component} from '@angular/core';
import {TuiCompass} from '@taiga-ui/kit';
// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiCompass,
  ],
})
export class Example {}
```
### How to Use (Template)

```html
<tui-compass [degrees]="degrees"></tui-compass>
```

### Example

```html
<tui-compass
                [degrees]="degrees"
                [style.color]="color"
            />
```

### API

| Property | Type | Description |
|----------|-----|----------|
| degrees | `number` | Pointer direction in degrees |

### TypeScript

```ts
import {Component} from '@angular/core';
import {changeDetection} from '@demo/emulate/change-detection';
import {TuiDemo} from '@demo/utils';
import {TuiCompass} from '@taiga-ui/kit';

@Component({
    standalone: true,
    imports: [TuiCompass, TuiDemo],
    templateUrl: './index.html',
    changeDetection,
})
export default class Page {
    protected colorVariants = [
        '#428bf9',
        'rgb(234, 56, 24)',
        'var(--tui-status-positive)',
        '',
    ];

    protected color = this.colorVariants[0]!;

    protected degrees = 90;
}
```

---

# components/Confirm

- **Package**: `KIT`
- **Type**: components

Confirm is a ready to use
            
                Dialog
            
            to ask user to confirm an action
        

        
            See
            
                this example
            
            to learn how to use confirm to prevent data loss on forms inside other modals


### Example

```html
<button
                tuiButton
                type="button"
                (click)="onClick()"
            >
                Show
            </button>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| content | `PolymorpheusContent` | Content of the confirm |
| appearance | `string` | Appearance of the confirming button |
| no | `string` | Text on false button |
| yes | `string` | Text on true button |

### TypeScript

```ts
import {Component, inject} from '@angular/core';
import {changeDetection} from '@demo/emulate/change-detection';
import {DemoRoute} from '@demo/routes';
import {TuiDemo} from '@demo/utils';
import {TuiAlertService, TuiButton, TuiDialogService} from '@taiga-ui/core';
import type {TuiConfirmData} from '@taiga-ui/kit';
import {TUI_CONFIRM} from '@taiga-ui/kit';
import {switchMap} from 'rxjs';

@Component({
    standalone: true,
    imports: [TuiButton, TuiDemo],
    templateUrl: './index.html',
    changeDetection,
})
export default class Example implements TuiConfirmData {
    private readonly dialogs = inject(TuiDialogService);
    private readonly alerts = inject(TuiAlertService);

    protected readonly routes = DemoRoute;
    protected readonly examples = ['Basic'];
    protected readonly exampleService = import('./examples/import/service.md?raw');

    public readonly appearances = ['primary', 'accent', 'secondary'];
    public appearance = this.appearances[0]!;
    public no = 'No';
    public yes = 'Yes';

    public readonly content =
        'This is <code>PolymorpheusContent</code>, so it can be anything you like!';

    protected onClick(): void {
        this.dialogs
            .open<boolean>(TUI_CONFIRM, {
                label: 'Are you sure?',
                size: 's',
                data: this,
            })
            .pipe(switchMap((response) => this.alerts.open(String(response))))
            .subscribe();
    }
}
```

---

# components/DataList

- **Package**: `CORE`
- **Type**: components

DataList
            allows to make lists or menus


### How to Use (Import)

```ts
import {TuiDataList} from '@taiga-ui/core';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiDataList,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<tui-data-list role="menu">
  <tui-opt-group
    *ngFor="let group of groups"
    [label]="group.label"
  >
    <a
      *ngFor="let item of group.items"
      tuiOption
      role="menuitem"
      [routerLink]="item.routerLink"
    >
      {{item.label}}
    </a>
  </tui-opt-group>
</tui-data-list>
```

### Example

```html
<tui-data-list
                [emptyContent]="emptyContent"
                [size]="size"
            >
                <button
                    *ngFor="let item of items$ | async"
                    tuiOption
                    type="button"
                    [value]="[item]"
                >
                    {{ item }}
                </button>
            </tui-data-list>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| emptyContent | `PolymorpheusContent` | Content to display when there are no options inside |
| size | `TuiSizeS | TuiSizeL` | Size of items |

### TypeScript

```ts
import {Component, inject} from '@angular/core';
import {changeDetection} from '@demo/emulate/change-detection';
import {TuiDemo} from '@demo/utils';
import {TUI_IS_E2E} from '@taiga-ui/cdk';
import type {TuiSizeL, TuiSizeS} from '@taiga-ui/core';
import {TuiDataList} from '@taiga-ui/core';
import {delay, of} from 'rxjs';

@Component({
    standalone: true,
    imports: [TuiDataList, TuiDemo],
    templateUrl: './index.html',
    changeDetection,
})
export default class Page {
    private readonly items = ['Foo', 'Bar', 'Baz'];
    protected readonly items$ = inject(TUI_IS_E2E)
        ? of(this.items)
        : of(this.items).pipe(delay(1e3));

    protected readonly emptyContentVariants = ['Loading...', ''];
    protected emptyContent = this.emptyContentVariants[0];

    protected readonly sizeVariants: ReadonlyArray<TuiSizeL | TuiSizeS> = ['s', 'm', 'l'];
    protected size = this.sizeVariants[0]!;

    protected readonly example4 = {
        TypeScript: import('./examples/4/index.ts?raw'),
        HTML: import('./examples/4/index.html?raw'),
        'custom-list/index.ts': import('./examples/4/custom-list/index.ts?raw'),
        'custom-list/index.html': import('./examples/4/custom-list/index.html?raw'),
    };
}
```

---

# components/DataListWrapper

- **Package**: `KIT`
- **Type**: components

DataListWrapper
            is an abstraction over
            DataList
            to simplify usage in common cases where precise control is not necessary.


### How to Use (Import)

```ts
import {TuiDataListWrapper} from '@taiga-ui/kit';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiDataListWrapper,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<tui-input [formControl]="control">
  Account

  <tui-data-list-wrapper
    *tuiDataList
    [items]="items"
  ></tui-data-list-wrapper>
</tui-input>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| items | `readonly T[] | ReadonlyArray<readonly T[]> | null` | | null" > Items to select |
| itemContent | `PolymorpheusContent<TuiValueContentContext<T>>` | >" > Content of an item |
| emptyContent | `PolymorpheusContent` | Content to display when there are no options inside |
| disabledItemHandler | `TuiBooleanHandler<T>` | " > A handler that gets an item and returns true if it is disabled. Must be a pure function |
| size | `TuiSizeL | TuiSizeXS` | Size of items |
| labels | `readonly string[]` | Group label |

---

# components/Dialog

- **Package**: `CORE`
- **Type**: components

Built-in implementation of Taiga UI modals

        
            If you want custom dialogs see
            
                this link
            
            on creating your own implementation
        

        
            Use
            
                TUI_DIALOGS_CLOSE
            
            token if you need to close dialog with from a stream. For example, this way you can close dialogs by logout


### Example

```html
<button
                size="m"
                tuiButton
                type="button"
                (click)="showDialog(template)"
            >
                Show
            </button>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| closeable | `boolean` | Show a cross to close dialog. Pass '"> if you want prevent closing, for example, with a confirmation prompt. Be careful, passing '"> will always display cross button even if it emits false value! |
| dismissible | `boolean` | Dialog can be canceled with Escape key or with a click outside. Pass '"> if you want prevent closing, for example, with a confirmation prompt. |
| data | `number` | Input data for dialog, type: '"> |
| header | `PolymorpheusContent` | Content above a heading |
| label | `string` | Heading of dialog |
| required | `boolean` | Cross click, overlay click or Escape click emits an error into Observable (you can catch it with "catch" operator or onError handler) |
| size | `TuiDialogSize` | Size |
| appearance | `string` | Appearance of dialog |

### TypeScript

```ts
import type {TemplateRef} from '@angular/core';
import {Component, inject} from '@angular/core';
import {changeDetection} from '@demo/emulate/change-detection';
import {DemoRoute} from '@demo/routes';
import {TuiDemo} from '@demo/utils';
import type {TuiDialogContext, TuiDialogSize} from '@taiga-ui/core';
import {TuiAlertService, TuiButton, TuiDialogService} from '@taiga-ui/core';
import {TuiAccordion} from '@taiga-ui/kit';
import {switchMap} from 'rxjs';

@Component({
    standalone: true,
    imports: [TuiAccordion, TuiButton, TuiDemo],
    templateUrl: './index.html',
    styleUrls: ['./index.less'],
    changeDetection,
})
export default class Page {
    private readonly alerts = inject(TuiAlertService);
    private readonly dialogs = inject(TuiDialogService);

    protected readonly routes = DemoRoute;
    protected readonly method = import('./method.md?raw');

    protected readonly dialogsCloseToken = import(
        './examples/import/dialogs-close-token.md?raw'
    );

    protected readonly example2 = {
        TypeScript: import('./examples/2/index.ts?raw'),
        HTML: import('./examples/2/index.html?raw'),
        'dialog-example/dialog-example.component.ts': import(
            './examples/2/dialog-example/dialog-example.component.ts?raw'
        ),
        'dialog-example/dialog-example.style.less': import(
            './examples/2/dialog-example/dialog-example.style.less?raw'
        ),
        'dialog-example/dialog-example.template.html': import(
            './examples/2/dialog-example/dialog-example.template.html?raw'
        ),
    };

    protected readonly example7 = {
        TypeScript: import('./examples/7/index.ts?raw'),
        HTML: import('./examples/7/index.html?raw'),
        'search-example/search-dialog-example.component.ts': import(
            './examples/7/search-example/search-dialog-example.component.ts?raw'
        ),
        'search-example/search-dialog-example.template.html': import(
            './examples/7/search-example/search-dialog-example.template.html?raw'
        ),
        'search-example/search-dialog-example.component.less': import(
            './examples/7/search-example/search-dialog-example.component.less?raw'
        ),
    };

    protected readonly example9 = {
        TypeScript: import('./examples/9/index.ts?raw'),
        HTML: import('./examples/9/index.html?raw'),
        LESS: import('./examples/9/index.less?raw'),
        'helpers/mock-cards.ts': import('./examples/9/helpers/mock-cards.ts?raw'),
        'helpers/models.ts': import('./examples/9/helpers/models.ts?raw'),
        'helpers/pay.service.ts': import('./examples/9/helpers/pay.service.ts?raw'),
        'helpers/validator.ts': import('./examples/9/helpers/validator.ts?raw'),
        'pay-modal/pay-modal.component.ts': import(
            './examples/9/pay-modal/pay-modal.component.ts?raw'
        ),
        'pay-modal/pay-modal.component.less': import(
            './examples/9/pay-modal/pay-modal.component.less?raw'
        ),
        'pay-modal/pay-modal.component.html': import(
            './examples/9/pay-modal/pay-modal.component.html?raw'
        ),
    };

    protected readonly exampleServiceUsage = import(
        './examples/import/service-usage.md?raw'
    );

    protected readonly exampleCustomDialog = import(
        './examples/import/custom-dialog.md?raw'
    );

    protected readonly exampleLazyDialog = import('./examples/import/lazy-dialog.md?raw');

    protected data = 100;

    protected closeable = true;

    protected dismissible = true;

    protected required = false;

    protected readonly sizeVariants: readonly TuiDialogSize[] = [
        's',
        'm',
        'l',
        'fullscreen',
        'page',
        'auto',
    ];

    protected size: TuiDialogSize = this.sizeVariants[1]!;

    protected label = '';

    protected appearance = '';

    protected showDialog(content: TemplateRef<TuiDialogContext<number, number>>): void {
        const {data, label, required, closeable, dismissible, size, appearance} = this;

        this.dialogs
            .open(content, {
                data,
                label,
                required,
                closeable,
                dismissible,
                size,
                appearance,
            })
            .pipe(switchMap((response) => this.alerts.open(String(response))))
            .subscribe();
    }
}
```
### LESS

```less
.big {
    font-size: 3.125rem;
}
```

---

# components/Drawer

- **Package**: `KIT`
- **Type**: components


### How to Use (Import)

```ts
import {TuiPopup} from '@taiga-ui/core';
import {TuiDrawer} from '@taiga-ui/kit';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiPopup,
    TuiDrawer,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<tui-drawer *tuiPopup="open()">
  <header>
    <h2 tuiHeader>
      <div tuiTitle>Header</div>
      <div tuiAccessories>
        <button
          tuiButton
          (click)="open.set(false)"
        >
          Close
        </button>
      </div>
    </h2>
    Content
  </header>
</tui-drawer>
```

---

# components/ElasticContainer

- **Package**: `KIT`
- **Type**: components

A wrapper component that changes its height with transition, depending on the content


### How to Use (Import)

```ts
import {TuiElasticContainer} from '@taiga-ui/kit';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiElasticContainer,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<tui-elastic-container>
  <h2>Title</h2>
  <p>Your content here</p>
  <button>Add more</button>
</tui-elastic-container>
```

---

# components/Error

- **Package**: `CORE`
- **Type**: components

Error
            allows to show an error. If you work with a form, see
            
                tuiFieldError
            
            . The idea of
            tui-error
            is to show arbitrary messages styled as errors, with height or fade transition.


### How to Use (Import)

```ts
import {TuiError} from '@taiga-ui/core';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiError,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<tui-error [error]="error"></tui-error>
```

### Example

```html
<tui-error [error]="error" />
```

### API

| Property | Type | Description |
|----------|-----|----------|
| error | `TuiValidationError | string | null` | Active state for routerLinkActive , for example |

### TypeScript

```ts
import type {TemplateRef} from '@angular/core';
import {Component, ViewChild} from '@angular/core';
import {changeDetection} from '@demo/emulate/change-detection';
import {TuiDemo} from '@demo/utils';
import {TuiValidationError} from '@taiga-ui/cdk';
import {TuiError} from '@taiga-ui/core';

@Component({
    standalone: true,
    imports: [TuiDemo, TuiError],
    templateUrl: './index.html',
    changeDetection,
})
export default class Page {
    @ViewChild('errorContent')
    protected errorContent?: TemplateRef<Record<string, unknown>>;

    protected readonly errorVariants: readonly string[] = [
        'Error as string',
        'Error as HTML content',
    ];

    protected selectedError = this.errorVariants[0]!;

    protected get error(): TuiValidationError | string | null {
        if (this.selectedError === null) {
            return null;
        }

        if (this.selectedError === this.errorVariants[0]) {
            return this.selectedError;
        }

        return new TuiValidationError(this.errorContent || '');
    }
}
```

---

# components/Expand

- **Package**: `EXPERIMENTAL`
- **Type**: components


### How to Use (Import)

```ts
import {TuiExpand} from '@taiga-ui/experimental';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiExpand,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<tui-expand [expanded]="expanded">Eager content</tui-expand>
```

---

# components/Filter

- **Package**: `KIT`
- **Type**: components

Components shows separated items that can be used to filter content on the page. There are also an option
            with badges.


### How to Use (Import)

```ts
import {TuiFilter} from '@taiga-ui/kit';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiFilter,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<form [formGroup]="form">
  <tui-filter
    formControlName="filters"
    [badgeHandler]="badgeHandler"
    [disabledItemHandler]="disabledItemHandler"
    [items]="items"
    [size]="size"
    (toggledItem)="onToggledItemChange($event)"
  ></tui-filter>
</form>
```

### Example

```html
<ng-template>
                <tui-filter
                    [badgeHandler]="badgeHandler"
                    [disabledItemHandler]="disabledItemHandler"
                    [formControl]="control"
                    [items]="items"
                    [size]="size"
                    (toggledItem)="itemToggle.emitEvent($event)"
                />
            </ng-template>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| [badgeHandler] | `TuiHandler<T>` | to get a number to show by default |
| [content] | `PolymorpheusContent` | Template for custom content in filter |
| [disabledItemHandler] | `TuiBooleanHandler` |  |
| [identityMatcher] | `TuiIdentityMatcher` |  |
| [items] | `T[]` | for view |
| [size] | `TuiSizeS | TuiSizeL` | Size |
| (toggledItem) | `T` | Toggled event of item |

### TypeScript

```ts
import {Component} from '@angular/core';
import {FormControl, ReactiveFormsModule} from '@angular/forms';
import {changeDetection} from '@demo/emulate/change-detection';
import {TuiDemo} from '@demo/utils';
import type {TuiBooleanHandler, TuiHandler} from '@taiga-ui/cdk';
import {TUI_FALSE_HANDLER} from '@taiga-ui/cdk';
import type {TuiSizeL, TuiSizeS} from '@taiga-ui/core';
import {TuiFilter} from '@taiga-ui/kit';

class ItemWithBadge {
    constructor(
        public readonly text: string,
        public readonly badgeValue?: number,
    ) {}

    public toString(): string {
        return this.text;
    }

    public valueOf(): number | null {
        return this.badgeValue || null;
    }
}

@Component({
    standalone: true,
    imports: [ReactiveFormsModule, TuiDemo, TuiFilter],
    templateUrl: './index.html',
    changeDetection,
})
export default class Page {
    protected initialItems = ['Alex Inkin', 'Roman Sedov'];

    protected itemsVariants: Array<ReadonlyArray<ItemWithBadge | string>> = [
        ['Alex Inkin', 'Roman Sedov'],
        [
            new ItemWithBadge('Focused Zone', 10),
            new ItemWithBadge('Dropdown', 100),
            new ItemWithBadge('Menu Items', 30),
            new ItemWithBadge('Accordion'),
        ],
    ];

    protected badgeHandlerVariants: ReadonlyArray<TuiHandler<unknown, number>> = [
        (item) => Number(item),
        (item) => String(item).length,
    ];

    protected badgeHandler = this.badgeHandlerVariants[0]!;

    protected disabledItemHandlerVariants: ReadonlyArray<
        TuiBooleanHandler<ItemWithBadge | string>
    > = [
        TUI_FALSE_HANDLER,
        (item) => item === 'Roman Sedov',
        (item) => (Number(item.valueOf()) || 0) >= 30,
    ];

    protected disabledItemHandler = this.disabledItemHandlerVariants[0]!;

    protected items = this.itemsVariants[0]!;

    protected control = new FormControl(this.initialItems);

    protected readonly sizeVariants: ReadonlyArray<TuiSizeL | TuiSizeS> = ['s', 'm', 'l'];

    protected size = this.sizeVariants[2]!;
}
```

---

# components/FloatingContainer

- **Package**: `KIT`
- **Type**: components

FloatingContainer
            is a special container for creating different animated sticky footers


### How to Use (Import)

```ts
// ...
import {tuiFloatingContainer, TuiButton} from '@taiga-ui/kit';

@Component({
  standalone: true,
  imports: [
    // ...
    tuiFloatingContainer,
    TuiButton,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
... Some content

<footer
  tuiFloatingContainer
>
  <button
    tuiButton
    type="button"
  >
    Main action
  </button>
  <button
    appearance="flat"
    tuiButton
    type="button"
  >
     Secondary action
  </button>
</label>
```

### Example

```html
<p>
                <label tuiLabel>
                    <input
                        tuiSwitch
                        type="checkbox"
                        [(ngModel)]="floating"
                    />
                    Floating visibility
                </label>
            </p>
            <p>
                <label tuiLabel>
                    <input
                        tuiSwitch
                        type="checkbox"
                        [(ngModel)]="secondAction"
                    />
                    Second action visibility
                </label>
            </p>

            <div class="content">
                <div
                    *ngFor="let i of 30 | tuiRepeatTimes"
                    tuiCell
                >
                    <tui-avatar
                        appearance="primary"
                        src="@tui.star"
                    />
                    <div tuiTitle>
                        Title
                        <div tuiSubtitle>Description</div>
                    </div>
                </div>

                <footer
                    *ngIf="floating"
                    @tuiSlideInTop
                    [tuiFloatingContainer]="color"
                >
                    <button
                        tuiButton
                        type="button"
                    >
                        Main action
                    </button>
                    <button
                        *ngIf="secondAction"
                        appearance="flat"
                        tuiButton
                        type="button"
                        @tuiHeightCollapse
                    >
                        Secondary action
                    </button>
                </footer>
            </div>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| [tuiFloatingContainer] | `string` | Background |

### TypeScript

```ts
import {NgFor, NgIf} from '@angular/common';
import {Component} from '@angular/core';
import {FormsModule} from '@angular/forms';
import {changeDetection} from '@demo/emulate/change-detection';
import {TuiDemo} from '@demo/utils';
import {TuiRepeatTimesPipe} from '@taiga-ui/cdk';
import {
    TuiButton,
    tuiHeightCollapse,
    TuiLabel,
    tuiSlideInTop,
    TuiTitle,
} from '@taiga-ui/core';
import {TuiAvatar, TuiFloatingContainer, TuiSwitch} from '@taiga-ui/kit';
import {TuiCell} from '@taiga-ui/layout';

@Component({
    standalone: true,
    imports: [
        FormsModule,
        NgFor,
        NgIf,
        TuiAvatar,
        TuiButton,
        TuiCell,
        TuiDemo,
        TuiFloatingContainer,
        TuiLabel,
        TuiRepeatTimesPipe,
        TuiSwitch,
        TuiTitle,
    ],
    templateUrl: './index.html',
    styleUrls: ['./index.less'],
    changeDetection,
    animations: [tuiSlideInTop, tuiHeightCollapse],
})
export default class Example {
    protected floating = true;

    protected secondAction = false;

    protected readonly examples = [
        'Two actions',
        'Inside SheetDialog',
        'Action and label/button',
        'Custom content',
        'Custom background color',
        'Primary button change',
    ];

    protected readonly colors = [
        '',
        'transparent',
        'var(--tui-background-elevation-1)',
        'var(--tui-background-base-alt)',
        'red',
        '#8a8db5',
        'rgba(255, 221, 45, 0.8)',
    ];

    protected color = this.colors[0]!;
}
```
### LESS

```less
.content {
    position: relative;
    display: block;
    inline-size: 18rem;
    block-size: 22rem;
    overflow: auto;
    box-shadow: 0 0.25rem 1.25rem rgba(0, 0, 0, 0.1);
    background: var(--tui-background-elevation-1);
}

footer {
    margin-left: 1rem;
    margin-right: 1rem;
}
```

---

# components/Form

- **Package**: `LAYOUT`
- **Type**: components


### How to Use (Import)

```ts
import {TuiAppearance} from '@taiga-ui/core';
import {TuiCardLarge, TuiForm} from '@taiga-ui/layout';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiCardLarge,
    TuiAppearance,
    TuiForm,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<form
  tuiAppearance="floating"
  tuiCardLarge
  tuiForm="l"
>
  <!-- Form content -->
</form>
```

---

# components/Group

- **Package**: `CORE`
- **Type**: components

A directive for grouping other components. For example,
            
                textfields
            
            and
            
                buttons
            
            .


### How to Use (Import)

```ts
import {TuiGroup} from '@taiga-ui/core';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiGroup,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<div
  class="group"
  tuiGroup
>
  <div>
    <tui-input
      formControlName="testValue"
      tuiHintContent="Write a number"
      [style.border-radius]="'inherit'"
    >
      House
      <input
        tuiTextfieldLegacy
        placeholder="House"
      />
    </tui-input>
    <tui-error
      formControlName="testValue"
      [error]="[] | tuiFieldError | async"
    ></tui-error>
  </div>
  <div>
    <tui-input
      formControlName="testValue2"
      tuiHintContent="Write house building"
      [style.border-radius]="'inherit'"
    >
      House building
      <input
        tuiTextfieldLegacy
        placeholder="House building"
      />
    </tui-input>
    <tui-error
      formControlName="testValue2"
      [error]="[] | tuiFieldError | async"
    ></tui-error>
  </div>
  <div>
    <tui-input
      formControlName="testValue3"
      tuiHintContent="Write an apartment number only"
      [style.border-radius]="'inherit'"
    >
      Apartment
      <input
        tuiTextfieldLegacy
        placeholder="Apartment number"
      />
    </tui-input>
    <tui-error
      formControlName="testValue3"
      [error]="[] | tuiFieldError | async"
    ></tui-error>
  </div>
</div>
```

### Example

```html
<div
                tuiGroup
                class="group"
                [collapsed]="collapsed"
                [orientation]="orientation"
                [rounded]="rounded"
                [size]="size"
            >
                <button
                    appearance="outline"
                    size="l"
                    tuiButton
                    type="button"
                >
                    Button 1
                </button>
                <button
                    appearance="outline"
                    size="l"
                    tuiButton
                    type="button"
                >
                    Button 2
                </button>
                <button
                    appearance="outline"
                    size="l"
                    tuiButton
                    type="button"
                >
                    Button 3
                </button>
            </div>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| [collapsed] | `boolean` | by default) |
| [rounded] | `boolean` | The first and the last items are rounded |
| [orientation] | `TuiOrientation` | Horizontal or vertical direction of group |
| [size] | `TuiSizeL` | Size of rounding |

### TypeScript

```ts
import {Component} from '@angular/core';
import {changeDetection} from '@demo/emulate/change-detection';
import {DemoRoute} from '@demo/routes';
import {TuiDemo} from '@demo/utils';
import type {TuiOrientation, TuiSizeL} from '@taiga-ui/core';
import {TuiButton, TuiGroup} from '@taiga-ui/core';

@Component({
    standalone: true,
    imports: [TuiButton, TuiDemo, TuiGroup],
    templateUrl: './index.html',
    styleUrls: ['./index.less'],
    changeDetection,
})
export default class Page {
    protected rounded = true;
    protected collapsed = false;

    protected readonly orientationVariants: readonly TuiOrientation[] = [
        'horizontal',
        'vertical',
    ];

    protected orientation: TuiOrientation = this.orientationVariants[0]!;

    protected readonly sizeVariants: readonly TuiSizeL[] = ['m', 'l'];

    protected size: TuiSizeL = this.sizeVariants[1]!;
    protected readonly routes = DemoRoute;
}
```
### LESS

```less
.group {
    max-inline-size: 30.25rem;
}
```

---

# components/Header

- **Package**: `LAYOUT`
- **Type**: components


### How to Use (Import)

```ts
import {Component} from '@angular/core';
import {TuiHeader} from '@taiga-ui/layout';
import {TuiTitle} from '@taiga-ui/core';
// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiHeader,
    TuiTitle,
  ],
})
export class Example {}
```
### How to Use (Template)

```html
<header tuiHeader>
  <hgroup tuiTitle>
    <h1>Title</h1>
    <p tuiSubtitle>Subtitle</p>
  </hgroup>
  <aside tuiAccessories>Accessories</aside>
</header>
```

---

# components/Icon

- **Package**: `CORE`
- **Type**: components

A component to use icons and color them with CSS. By default,
            tui-icon
            expects the
            
                Lucide icons.
            
            To associate a name with icon you should use that pattern
            &#64;tui.[name]


### How to Use (Import)

```ts
import {Component} from '@angular/core';
import {TuiIcon} from '@taiga-ui/core';
// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiIcon,
  ],
})
export class Example {}
```
### How to Use (Template)

```html
<tui-icon icon="@tui.check"></tui-icon>
```

### Example

```html
<tui-icon
                [background]="backgroundIcon"
                [icon]="icon"
                [style.background]="backgroundColor"
                [style.color]="color"
                [style.font-size.px]="size"
            />
```

### API

| Property | Type | Description |
|----------|-----|----------|
| [icon] | `string` | . |
| [background] | `string` | You can limit the area of your icon by shape which refers to removing part of icon area defined by other
                icon. |

### TypeScript

```ts
import {Component, inject} from '@angular/core';
import {changeDetection} from '@demo/emulate/change-detection';
import {DemoRoute} from '@demo/routes';
import {TuiDemo} from '@demo/utils';
import {TuiIcon} from '@taiga-ui/core';
import {
    TUI_PREVIEW_ICONS,
    TuiAccordion,
    tuiInputNumberOptionsProvider,
} from '@taiga-ui/kit';

@Component({
    standalone: true,
    imports: [TuiAccordion, TuiDemo, TuiIcon],
    templateUrl: './index.html',
    changeDetection,
    providers: [tuiInputNumberOptionsProvider({min: 0})],
})
export default class Page {
    protected readonly lucide = import('./examples/import/lucide.md?raw');
    protected readonly material = import('./examples/import/material.md?raw');
    protected readonly fontAwesome = import('./examples/import/font-awesome.md?raw');
    protected readonly used = Object.values(inject(TUI_PREVIEW_ICONS)); // compatibility with proprietary icons
    protected readonly routes = DemoRoute;

    protected readonly iconVariants = [
        '@tui.info',
        '@tui.heart',
        ...this.used,
        'https://raw.githubusercontent.com/MarsiBarsi/readme-icons/main/github.svg',
        "\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'><polygon points='1 6 1 22 8 18 16 22 23 18 23 2 16 6 8 2 1 6'/><line x1='8' y1='2' x2='8' y2='18'/><line x1='16' y1='6' x2='16' y2='22'/></svg>\"",
        '',
    ];

    protected readonly backgroundVariants = [
        '',
        '@tui.info-filled',
        '@tui.heart-filled',
        ...new Set(
            this.used.map((icon) => (icon.includes('filled') ? icon : `${icon}-filled`)),
        ),
    ];

    protected readonly colorVariants = ['', 'var(--tui-text-primary)', 'red', '#3aa981'];

    protected readonly examples = [
        'Basic',
        'External',
        'Two colors',
        'Bundled',
        'Resolver',
    ];

    protected readonly descriptions = [
        '',
        '',
        '',
        'You can provide SVG source code in a dictionary to be bundled with the app',
        'IMPORTANT: Icon names are not allowed to have "/" symbol',
    ];

    protected icon = '@tui.heart';
    protected backgroundIcon = '@tui.heart-filled';
    protected backgroundColor = 'var(--tui-background-accent-2-hover)';
    protected color = '';

    protected size = 48;
}
```

---

# components/Input

- **Package**: `LEGACY`
- **Type**: components

Input&nbsp;&mdash; is a single-line textfield. It's not recommended to use it with numbers, because the
            value type of this component is a string
        

        Inputs for other types of data:

        
            
                
                    
                        Textarea
                    
                    — for multiline text
                
                
                    
                        InputDate
                    
                    — for dates
                
                
                    
                        InputDateRange
                    
                    — for a range of dates
                
                
                    
                        InputNumber
                    
                    — for number (with measurement postfix)
                
                
                    
                        InputPhone
                    
                    — for phone numbers
                
                
                    
                        InputTag
                    
                    — for input tags
                
                
                    
                        InputRange
                    
                    ,
                    
                        InputSlider
                    
                    — for accurate number values
                
                
                    
                        Slider
                    
                    ,
                    
                        Range
                    
                    — for not accurate number values


### How to Use (Import)

```ts
import {ReactiveFormsModule} from '@angular/forms';
import {TuiInputModule} from '@taiga-ui/legacy';

@Component({
  standalone: true,
  imports: [
    // ...
    ReactiveFormsModule,
    TuiInputModule,
  ],
  // ...
})
export class Example {
  testForm = new FormGroup({
    testValue: new FormControl('mail@mail.ru'),
  });
}
```
### How to Use (Template)

```html
<form [formGroup]="testForm">
  <tui-input formControlName="testValue">
    Type a text
    <input tuiTextfieldLegacy />
  </tui-input>
</form>
```

### Example

```html
<ng-template>
                <tui-input
                    [focusable]="focusable"
                    [formControl]="control"
                    [pseudoFocus]="pseudoFocused"
                    [pseudoHover]="pseudoHovered"
                    [pseudoInvalid]="pseudoInvalid"
                    [readOnly]="readOnly"
                    [style.text-align]="textAlign"
                    [tuiDropdownAlign]="dropdownAlign"
                    [tuiDropdownDirection]="dropdownDirection"
                    [tuiDropdownLimitWidth]="dropdownLimitWidth"
                    [tuiDropdownMaxHeight]="dropdownMaxHeight"
                    [tuiDropdownMinHeight]="dropdownMinHeight"
                    [tuiDropdownOffset]="dropdownOffset"
                    [tuiDropdownOpen]="!!(dropdownOpen | async)"
                    [tuiHintAppearance]="hintAppearance"
                    [tuiHintContent]="hintContent"
                    [tuiHintDirection]="hintDirection"
                    [tuiTextfieldCleaner]="cleaner"
                    [tuiTextfieldCustomContent]="customContent"
                    [tuiTextfieldFiller]="filler"
                    [tuiTextfieldIcon]="icon"
                    [tuiTextfieldIconLeft]="iconStart"
                    [tuiTextfieldLabelOutside]="labelOutside"
                    [tuiTextfieldPostfix]="postfix"
                    [tuiTextfieldPrefix]="prefix"
                    [tuiTextfieldSize]="size"
                    (tuiDropdownOpenChange)="dropdownOpen.next($event)"
                >
                    Label
                    <strong>strong text</strong>
                    <input
                        tuiTextfieldLegacy
                        [placeholder]="placeholder"
                    />
                </tui-input>
            </ng-template>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| disabled | `boolean` | Disabled state (use formControl.disable() ) |
| tuiTextfieldIcon | `PolymorpheusContent` | Icon content. If content is a string, it is used as stringified svg or a name of an icon |
| placeholder | `string` | Placeholder (use external '"> to set it) |

### TypeScript

```ts
import type {TemplateRef} from '@angular/core';
import {Component, ViewChild} from '@angular/core';
import {FormControl, ReactiveFormsModule, Validators} from '@angular/forms';
import {changeDetection} from '@demo/emulate/change-detection';
import {DemoRoute} from '@demo/routes';
import {TuiDemo} from '@demo/utils';
import {TuiAmountPipe} from '@taiga-ui/addon-commerce';
import {tuiProvide} from '@taiga-ui/cdk';
import {TuiDropdown, TuiHint, TuiTextfield} from '@taiga-ui/core';
import {TuiInputModule, TuiTextfieldControllerModule} from '@taiga-ui/legacy';
import type {PolymorpheusContent} from '@taiga-ui/polymorpheus';

import {ABSTRACT_PROPS_ACCESSOR} from '../abstract/abstract-props-accessor';
import {AbstractExampleTuiControl} from '../abstract/control';
import {InheritedDocumentation} from '../abstract/inherited-documentation';

const LONG_TEXT_TEMPLATE = '<span>LongTextContent</span>';

@Component({
    standalone: true,
    imports: [
        InheritedDocumentation,
        ReactiveFormsModule,
        TuiAmountPipe,
        TuiDemo,
        TuiDropdown,
        TuiHint,
        TuiInputModule,
        TuiTextfield,
        TuiTextfieldControllerModule,
    ],
    templateUrl: './index.html',
    styleUrls: ['./index.less'],
    changeDetection,
    providers: [tuiProvide(ABSTRACT_PROPS_ACCESSOR, PageComponent)],
})
export default class PageComponent extends AbstractExampleTuiControl {
    @ViewChild('justLongText', {static: true})
    private readonly longTextRef!: TemplateRef<HTMLElement>;

    protected readonly routes = DemoRoute;
    protected placeholder = 'Field placeholder';

    public readonly iconVariants = ['', '@tui.search', '@tui.calendar'];

    public icon = this.iconVariants[0]!;

    public override iconStart = this.iconVariants[0]!;

    public readonly control = new FormControl('111', Validators.required);

    public override readonly customContentVariants = [
        '',
        '@tui.search',
        '@tui.calendar',
        '@tui.visa-mono',
        '@tui.mastercard-mono',
        LONG_TEXT_TEMPLATE,
    ];

    public override get customContent(): PolymorpheusContent {
        return this.customContentSelected === LONG_TEXT_TEMPLATE
            ? this.longTextRef
            : this.customContentSelected;
    }

    public override set customContent(newValue) {
        this.customContentSelected = newValue;
    }
}
```
### LESS

```less
.account {
    display: flex;
    flex-direction: column;
    block-size: 3.5rem;
    padding: 0.5rem 0;
    box-sizing: border-box;
}

.name {
    opacity: 0.7;
}
```

---

# components/InputCard

- **Package**: `ADDON-COMMERCE`
- **Type**: components

InputCard
            can be used with
            InputExpire
            and
            InputCVC
            to input a card. Use
            tuiCreateLuhnValidator(message)
            to create a
            Validator
            that uses Luhn algorithm


### How to Use (Import)

```ts
import {TuiInputCard, TuiInputCVC, TuiInputExpire} from '@taiga-ui/addon-commerce';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiInputCard,
    TuiInputCVC,
    TuiInputExpire,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<form [formGroup]="form">
  <tui-textfield>
    <label tuiLabel>Card number</label>
    <input
      formControlName="card"
      tuiInputCard
    />
  </tui-textfield>
  <tui-textfield>
    <label tuiLabel>Expire date</label>
    <input
      formControlName="expire"
      tuiInputExpire
    />
  </tui-textfield>
  <tui-textfield>
    <label tuiLabel>CVC/CVV</label>
    <input
      formControlName="cvc"
      tuiInputCVC
    />
  </tui-textfield>
</form>
```

### Example

```html
<tui-textfield
                [iconEnd]="icons.iconEnd"
                [iconStart]="icons.iconStart"
                [tuiTextfieldCleaner]="textfield.cleaner"
                [tuiTextfieldSize]="textfield.size"
            >
                <label
                    *ngIf="textfield.size !== 's'"
                    tuiLabel
                >
                    Card number
                </label>

                <input
                    tuiInputCard
                    [disabled]="control.disabled"
                    [icon]="icon"
                    [invalid]="control.invalid"
                    [placeholder]="textfield.size === 's' ? 'Card number' : ''"
                    [readOnly]="control.readonly"
                    [(ngModel)]="card"
                    (binChange)="binChange.emitEvent($event)"
                />
            </tui-textfield>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| [(ngModel)] | `string` | Card number (also works with a reactive control) |
| [icon] | `string | null` | Card icon |
| (binChange) | `string | null` | BIN value (card first 6 symbols) |

### TypeScript

```ts
import {Component} from '@angular/core';
import {FormsModule, ReactiveFormsModule} from '@angular/forms';
import {TuiDocControl} from '@demo/components/control';
import {TuiDocIcons} from '@demo/components/icons';
import {TuiDocTextfield} from '@demo/components/textfield';
import {changeDetection} from '@demo/emulate/change-detection';
import {TuiDemo} from '@demo/utils';
import {TuiInputCard} from '@taiga-ui/addon-commerce';
import {TuiTextfield} from '@taiga-ui/core';

@Component({
    standalone: true,
    imports: [
        FormsModule,
        ReactiveFormsModule,
        TuiDemo,
        TuiDocControl,
        TuiDocIcons,
        TuiDocTextfield,
        TuiInputCard,
        TuiTextfield,
    ],
    templateUrl: './index.html',
    changeDetection,
})
export default class Page {
    protected card = '';
    protected iconSelected: string | null = null;

    protected readonly cards: Record<string, string> = {
        common: 'https://ng-web-apis.github.io/dist/assets/images/common.svg',
        universal: 'https://ng-web-apis.github.io/dist/assets/images/universal.svg',
        mutation:
            'https://ng-web-apis.github.io/dist/assets/images/mutation-observer.svg',
    };

    protected readonly iconVariants: readonly string[] = Object.keys(this.cards);

    protected get icon(): string | null {
        return (this.iconSelected && this.cards[this.iconSelected]) || null;
    }
}
```

---

# components/InputCardGroup

- **Package**: `ADDON-COMMERCE`
- **Type**: components

InputCardGroup
            is used to input a card as a separated control


### How to Use (Import)

```ts
import {TuiInputCardGroup} from '@taiga-ui/addon-commerce';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiInputCardGroup,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<tui-input-card-group formControlName="card"></tui-input-card-group>
```

### Example

```html
<ng-template>
                <tui-input-card-group
                    [codeLength]="codeLength"
                    [formControl]="formControl"
                    [icon]="icon"
                    [id]="id"
                    [inputs]="inputs"
                    [invalid]="control.invalid"
                    [placeholder]="placeholder"
                    [readOnly]="control.readonly"
                    [tuiDisabled]="control.disabled"
                />
            </ng-template>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| [cardValidator] | `TuiBooleanHandler<string>` | Custom card validator for moving focus to the next field |
| [codeLength] | `3 | 4` | Code length |
| [icon] | `PolymorpheusContent` | Custom card icon |
| [id] | `string` | accordingly). Auto-generated when not provided. |
| [inputs] | `TuiCardInputs` | Toggle availability of inputs |
| [placeholder] | `string` | Placeholder |
| (binChange) | `string | null` | BIN value (card first 6 symbols) |

### TypeScript

```ts
import {Component, inject} from '@angular/core';
import {FormControl, ReactiveFormsModule} from '@angular/forms';
import {TuiDocControl} from '@demo/components/control';
import {changeDetection} from '@demo/emulate/change-detection';
import {TuiDemo} from '@demo/utils';
import type {TuiCard, TuiCardInputs} from '@taiga-ui/addon-commerce';
import {
    TUI_INPUT_CARD_GROUP_OPTIONS,
    TuiInputCardGroup,
    TuiThumbnailCard,
} from '@taiga-ui/addon-commerce';
import {tuiIsString} from '@taiga-ui/cdk';
import type {PolymorpheusContent} from '@taiga-ui/polymorpheus';

@Component({
    standalone: true,
    imports: [
        ReactiveFormsModule,
        TuiDemo,
        TuiDocControl,
        TuiInputCardGroup,
        TuiThumbnailCard,
    ],
    templateUrl: './index.html',
    styleUrls: ['./index.less'],
    changeDetection,
})
export default class PageComponent {
    private readonly options = inject(TUI_INPUT_CARD_GROUP_OPTIONS);

    protected readonly examples = [
        'With validation',
        'With saved cards',
        'With custom card template',
        'Custom form state',
        'Custom labels',
    ];

    protected readonly cards: Record<string, PolymorpheusContent | string> = {
        common: 'https://ng-web-apis.github.io/dist/assets/images/common.svg',
        universal: 'https://ng-web-apis.github.io/dist/assets/images/universal.svg',
        mutation:
            'https://ng-web-apis.github.io/dist/assets/images/mutation-observer.svg',
    };

    protected iconVariants: readonly string[] = Object.keys(this.cards);
    protected iconSelected: PolymorpheusContent = null;

    protected id = '';
    protected placeholder = this.options.exampleText;

    protected readonly codeLengthVariants = [3, 4] as const;
    protected codeLength: 3 | 4 = this.codeLengthVariants[0];

    protected readonly inputsVariants: readonly TuiCardInputs[] = [
        {cvc: true, expire: true},
        {cvc: false, expire: true},
        {cvc: false, expire: false},
        {cvc: true, expire: false},
    ];

    protected inputs = this.options.inputs;

    protected formControl = new FormControl<TuiCard | null>(null);

    protected get icon(): PolymorpheusContent {
        return tuiIsString(this.iconSelected)
            ? this.cards[this.iconSelected]
            : this.iconSelected;
    }

    protected getContentVariants(
        template: PolymorpheusContent,
    ): readonly PolymorpheusContent[] {
        return [...this.iconVariants, template];
    }
}
```
### LESS

```less
@import '@taiga-ui/core/styles/taiga-ui-local';

.form {
    display: flex;
    flex-wrap: wrap;
}

.control {
    flex: 1;
    margin-bottom: 0.25rem;

    &:not(:last-child) {
        margin-right: 1.25rem;
    }
}

.error {
    min-inline-size: 100%;
}

.title {
    font: var(--tui-font-heading-5);
}

.card {
    background: #87ceeb;
}
```

---

# components/InputColor

- **Package**: `LEGACY`
- **Type**: components


### How to Use (Import)

```ts
import {TuiColorPickerModule} from '@taiga-ui/legacy';

// ...

@NgModule({
  standalone: true,
  imports: [
    // ...
    TuiColorPickerModule,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<tui-color-picker [(color)]="color"></tui-color-picker>
```

### Example

```html
<tui-color-picker />
```

### API

| Property | Type | Description |
|----------|-----|----------|
| [(color)] | `[number, number, number, number]` | RGBA color tuple |

### TypeScript

```ts
import {ChangeDetectionStrategy, Component} from '@angular/core';
import {TuiDemo} from '@demo/utils';
import {TuiColorPickerModule} from '@taiga-ui/legacy';

@Component({
    standalone: true,
    imports: [TuiColorPickerModule, TuiDemo],
    templateUrl: './index.html',
    changeDetection: ChangeDetectionStrategy.OnPush,
})
export default class Page {}
```

---

# components/InputDate

- **Package**: `KIT`
- **Type**: components

InputDate
        =
        Textfield
        +
        Calendar
        + ❤️


### How to Use (Import)

```ts
import {FormsModule} from '@angular/forms';
import {TuiTextfield} from '@taiga-ui/core';
import {TuiInputDate} from '@taiga-ui/kit';

@Component({
  standalone: true,
  imports: [
    // ...
    FormsModule,
    TuiTextfield,
    TuiInputDate,
  ],
})
export class Example {
  protected value: TuiDay | null = null;
}
```
### How to Use (Template)

```html
<tui-textfield>
  <input
    tuiInputDate
    [(ngModel)]="value"
  />
  <tui-calendar *tuiTextfieldDropdown />
</tui-textfield>
```

### Example

```html
<ng-template>
                <tui-textfield
                    [disabledItemHandler]="itemsHandlers.disabledItemHandler()"
                    [iconStart]="icons.iconStart"
                    [tuiDropdownAlign]="dropdown.align"
                    [tuiTextfieldCleaner]="textfieldDoc.cleaner"
                    [tuiTextfieldSize]="textfieldDoc.size"
                    [(open)]="dropdown.open"
                >
                    <label
                        *ngIf="textfieldDoc.size !== 's'"
                        tuiLabel
                    >
                        Choose date
                    </label>

                    <input
                        tuiInputDate
                        [formControl]="control"
                        [invalid]="controlDoc.invalid"
                        [max]="max"
                        [min]="min"
                        [placeholder]="textfieldDoc.size === 's' ? 'Choose date' : ''"
                        [readOnly]="controlDoc.readonly"
                        [tuiDisabled]="controlDoc.disabled"
                    />

                    <tui-calendar *tuiTextfieldDropdown />
                </tui-textfield>
            </ng-template>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| [min] | `TuiDay` | Min date |
| [max] | `TuiDay` | Max date |

### TypeScript

```ts
import {Component} from '@angular/core';
import {FormControl, ReactiveFormsModule} from '@angular/forms';
import {TuiDocControl} from '@demo/components/control';
import {TuiDocDropdown} from '@demo/components/dropdown';
import {TuiDocIcons} from '@demo/components/icons';
import {TuiDocItemsHandlers} from '@demo/components/items-handlers';
import {TuiDocTextfield} from '@demo/components/textfield';
import {changeDetection} from '@demo/emulate/change-detection';
import {TuiDemo} from '@demo/utils';
import {TUI_FIRST_DAY, TUI_LAST_DAY, TuiDay} from '@taiga-ui/cdk';
import {TuiDropdown, TuiTextfield} from '@taiga-ui/core';
import {TuiInputDate} from '@taiga-ui/kit';

@Component({
    standalone: true,
    imports: [
        ReactiveFormsModule,
        TuiDemo,
        TuiDocControl,
        TuiDocDropdown,
        TuiDocIcons,
        TuiDocItemsHandlers,
        TuiDocTextfield,
        TuiDropdown,
        TuiInputDate,
        TuiTextfield,
    ],
    templateUrl: './index.html',
    changeDetection,
})
export default class Example {
    protected readonly control = new FormControl();

    protected readonly dates = [
        TUI_FIRST_DAY,
        TuiDay.currentLocal(),
        TuiDay.currentLocal().append({year: 1, month: 1}),
        TuiDay.currentLocal().append({year: -1, month: -1}),
        TUI_LAST_DAY,
    ] as const;

    protected min = this.dates[0];
    protected max = this.dates[4];

    protected readonly handler = (item: TuiDay): boolean => item.dayOfWeek() > 4;
}
```

---

# components/InputDateLegacy

- **Package**: `LEGACY`
- **Type**: components

InputDate
            – input with a calendar.
        

        
            Date formatting can be customized with
            
                TUI_DATE_FORMAT
            
            token.
        

        
            
                See example
            
            with the usage of these tokens.
        

        DI-tokens for input-configurations:
        
            
                TUI_DATE_VALUE_TRANSFORMER
            
            
                custom format of control output (
                
                    TuiDay
                
                is default).
                
                    
                        See example
                    
                    with built-in
                    
                        Date
                    
                    object as control's output.


### How to Use (Import)

```ts
import {ReactiveFormsModule} from '@angular/forms';
import {TuiInputDateModule} from '@taiga-ui/legacy';

@Component({
  standalone: true,
  imports: [
    // ...
    ReactiveFormsModule,
    TuiInputDateModule,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<form [formGroup]="testForm">
  <tui-input-date formControlName="testValue">
    Choose a date
    <input tuiTextfieldLegacy />
  </tui-input-date>
</form>
```

### Example

```html
<ng-template>
                <tui-input-date
                    [disabledItemHandler]="disabledItemHandler"
                    [focusable]="focusable"
                    [formControl]="control"
                    [items]="items"
                    [markerHandler]="markerHandler"
                    [max]="max"
                    [min]="min"
                    [pseudoFocus]="pseudoFocused"
                    [pseudoHover]="pseudoHovered"
                    [pseudoInvalid]="pseudoInvalid"
                    [readOnly]="readOnly"
                    [style.text-align]="textAlign"
                    [tuiDropdownOpen]="!!(dropdownOpen | async)"
                    [tuiHintAppearance]="hintAppearance"
                    [tuiHintContent]="hintContent"
                    [tuiHintDirection]="hintDirection"
                    [tuiTextfieldCleaner]="cleaner"
                    [tuiTextfieldIconLeft]="iconStart"
                    [tuiTextfieldLabelOutside]="labelOutside"
                    [tuiTextfieldSize]="size"
                    (tuiDropdownOpenChange)="dropdownOpen.next($event)"
                >
                    Choose a date
                </tui-input-date>
            </ng-template>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| disabled | `boolean` | Disabled state (use formControl.disable() ) |
| disabledItemHandler | `TuiBooleanHandler<TuiDay>` | " [documentationPropertyValues]="disabledItemHandlerVariants" [(documentationPropertyValue)]="disabledItemHandler" > A handler that gets a date and returns true if it is disabled. Must be a pure function |
| items | `TuiNamedDay[]` | A list of preset dates for dropdown |
| markerHandler | `TuiMarkerHandler | null` | A handler that gets date and returns null or a tuple with circled marker colors |
| min | `TuiDay | null` | Minimum date |
| max | `TuiDay | null` | Maximum date |

### TypeScript

```ts
import {Component} from '@angular/core';
import {FormControl, ReactiveFormsModule, Validators} from '@angular/forms';
import {changeDetection} from '@demo/emulate/change-detection';
import {DemoRoute} from '@demo/routes';
import {TuiDemo} from '@demo/utils';
import {tuiProvideMobileCalendar} from '@taiga-ui/addon-mobile';
import type {TuiBooleanHandler} from '@taiga-ui/cdk';
import {
    TUI_FALSE_HANDLER,
    TUI_FIRST_DAY,
    TUI_LAST_DAY,
    TuiDay,
    tuiProvide,
} from '@taiga-ui/cdk';
import type {TuiMarkerHandler} from '@taiga-ui/core';
import {TuiDropdown, TuiHint, TuiLink} from '@taiga-ui/core';
import {
    TuiInputDateModule,
    TuiNamedDay,
    TuiTextfieldControllerModule,
} from '@taiga-ui/legacy';

import {ABSTRACT_PROPS_ACCESSOR} from '../abstract/abstract-props-accessor';
import {AbstractExampleTuiControl} from '../abstract/control';
import {InheritedDocumentation} from '../abstract/inherited-documentation';

const TWO_DOTS: [string, string] = [
    'var(--tui-background-accent-1)',
    'var(--tui-status-info)',
];
const ONE_DOT: [string] = ['var(--tui-status-positive)'];

@Component({
    standalone: true,
    imports: [
        InheritedDocumentation,
        ReactiveFormsModule,
        TuiDemo,
        TuiDropdown,
        TuiHint,
        TuiInputDateModule,
        TuiLink,
        TuiTextfieldControllerModule,
    ],
    templateUrl: './index.html',
    changeDetection,
    providers: [tuiProvide(ABSTRACT_PROPS_ACCESSOR, Example), tuiProvideMobileCalendar()],
})
export default class Example extends AbstractExampleTuiControl {
    protected readonly routes = DemoRoute;
    protected readonly example5 = {
        TypeScript: import('./examples/5/index.ts?raw'),
        HTML: import('./examples/5/index.html?raw'),
        'native-date-transformer.directive.ts': import(
            './examples/5/native-date-transformer.directive.ts?raw'
        ),
    };

    protected minVariants = [
        TUI_FIRST_DAY,
        new TuiDay(2017, 2, 5),
        new TuiDay(1900, 0, 1),
        new TuiDay(new Date().getFullYear() + 3, 1, 1),
    ];

    protected min = this.minVariants[0]!;

    protected maxVariants = [
        TUI_LAST_DAY,
        new TuiDay(2017, 11, 11),
        new TuiDay(2020, 2, 5),
        new TuiDay(2300, 0, 1),
    ];

    protected max = this.maxVariants[0]!;

    protected readonly disabledItemHandlerVariants: ReadonlyArray<
        TuiBooleanHandler<TuiDay>
    > = [TUI_FALSE_HANDLER, ({day}) => day % 3 === 0];

    protected disabledItemHandler = this.disabledItemHandlerVariants[0]!;

    protected readonly itemsVariants = [
        [],
        [new TuiNamedDay(TuiDay.currentLocal(), 'Until today')],
    ];

    protected readonly markerHandlerVariants: readonly TuiMarkerHandler[] = [
        (day: TuiDay) => (day.day % 2 === 0 ? TWO_DOTS : ONE_DOT),
    ];

    protected markerHandler: TuiMarkerHandler | null = null;

    protected items = this.itemsVariants[0]!;

    public override cleaner = false;

    public control = new FormControl<TuiDay | null>(null, Validators.required);
}
```

---

# components/InputDateMulti

- **Package**: `LEGACY`
- **Type**: components


### How to Use (Import)

```ts
import {ReactiveFormsModule} from '@angular/forms';
import {TuiInputDateMultiModule} from '@taiga-ui/legacy';

@Component({
  standalone: true,
  imports: [
    // ...
    ReactiveFormsModule,
    TuiInputDateMultiModule,
  ],
  // ...
})
export class Example {
  testForm = new FormGroup({
    testValue: new FormControl([]),
  });
}
```
### How to Use (Template)

```html
<form [formGroup]="testForm">
  <tui-input-date
    multiple
    formControlName="testValue"
  >
    Choose a date
  </tui-input-date>
</form>
```

### Example

```html
<ng-template>
                <tui-input-date
                    multiple
                    [disabledItemHandler]="disabledItemHandler"
                    [focusable]="focusable"
                    [formControl]="control"
                    [markerHandler]="markerHandler"
                    [max]="max"
                    [min]="min"
                    [pseudoFocus]="pseudoFocused"
                    [pseudoHover]="pseudoHovered"
                    [pseudoInvalid]="pseudoInvalid"
                    [readOnly]="readOnly"
                    [rows]="rows"
                    [tuiDropdownOpen]="!!(dropdownOpen | async)"
                    [tuiHintAppearance]="hintAppearance"
                    [tuiHintContent]="hintContent"
                    [tuiHintDirection]="hintDirection"
                    [tuiTextfieldCleaner]="cleaner"
                    [tuiTextfieldIconLeft]="iconStart"
                    [tuiTextfieldLabelOutside]="labelOutside"
                    [tuiTextfieldSize]="size"
                    (tuiDropdownOpenChange)="dropdownOpen.next($event)"
                >
                    Choose a date
                </tui-input-date>
            </ng-template>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| disabled | `boolean` | Disabled state (use formControl.disable() ) |
| disabledItemHandler | `TuiBooleanHandler<TuiDay>` | " [documentationPropertyValues]="disabledItemHandlerVariants" [(documentationPropertyValue)]="disabledItemHandler" > A handler that gets a date and returns true if it is disabled. Must be a pure function |
| markerHandler | `TuiMarkerHandler | null` | A handler that gets date and returns null or a tuple with circled marker colors |
| min | `TuiDay | null` | Minimum date |
| max | `TuiDay | null` | Maximum date |
| rows | `number` | A number of visible rows |

### TypeScript

```ts
import {Component} from '@angular/core';
import {FormControl, ReactiveFormsModule, Validators} from '@angular/forms';
import {changeDetection} from '@demo/emulate/change-detection';
import {TuiDemo} from '@demo/utils';
import {TuiMobileCalendar, tuiProvideMobileCalendar} from '@taiga-ui/addon-mobile';
import type {TuiBooleanHandler} from '@taiga-ui/cdk';
import {
    TUI_FALSE_HANDLER,
    TUI_FIRST_DAY,
    TUI_LAST_DAY,
    TuiDay,
    tuiProvide,
} from '@taiga-ui/cdk';
import type {TuiMarkerHandler} from '@taiga-ui/core';
import {TuiDropdown, TuiHint} from '@taiga-ui/core';
import {TuiInputDateMultiModule, TuiTextfieldControllerModule} from '@taiga-ui/legacy';

import {ABSTRACT_PROPS_ACCESSOR} from '../abstract/abstract-props-accessor';
import {AbstractExampleTuiControl} from '../abstract/control';
import {InheritedDocumentation} from '../abstract/inherited-documentation';

@Component({
    standalone: true,
    imports: [
        InheritedDocumentation,
        ReactiveFormsModule,
        TuiDemo,
        TuiDropdown,
        TuiHint,
        TuiInputDateMultiModule,
        TuiMobileCalendar,
        TuiTextfieldControllerModule,
    ],

    templateUrl: './index.html',
    changeDetection,
    providers: [
        tuiProvide(ABSTRACT_PROPS_ACCESSOR, PageComponent),
        tuiProvideMobileCalendar(),
    ],
})
export default class PageComponent extends AbstractExampleTuiControl {
    protected minVariants = [
        TUI_FIRST_DAY,
        new TuiDay(2017, 2, 5),
        new TuiDay(1900, 0, 1),
        new TuiDay(new Date().getFullYear() + 3, 1, 1),
    ];

    protected min = this.minVariants[0]!;

    protected maxVariants = [
        TUI_LAST_DAY,
        new TuiDay(2017, 11, 11),
        new TuiDay(2020, 2, 5),
        new TuiDay(2300, 0, 1),
    ];

    protected max = this.maxVariants[0]!;

    protected rowsVariants = [Infinity, 10, 3, 2];

    protected rows = this.rowsVariants[0]!;

    protected readonly disabledItemHandlerVariants: ReadonlyArray<
        TuiBooleanHandler<TuiDay>
    > = [TUI_FALSE_HANDLER, ({day}) => day % 3 === 0];

    protected disabledItemHandler = this.disabledItemHandlerVariants[0]!;

    protected readonly markerHandlerVariants: readonly TuiMarkerHandler[] = [
        (day: TuiDay) =>
            day.day % 2 === 0
                ? ['var(--tui-background-accent-1)', 'var(--tui-status-info)']
                : ['var(--tui-status-positive)'],
    ];

    protected markerHandler: TuiMarkerHandler | null = null;

    public control = new FormControl<TuiDay[]>([], Validators.required);
}
```

---

# components/InputDateRange

- **Package**: `KIT`
- **Type**: components

InputDateRange
        =
        Textfield
        +
        CalendarRange
        + ❤️


### How to Use (Import)

```ts
import {FormsModule} from '@angular/forms';
import {TuiTextfield} from '@taiga-ui/core';
import {TuiInputDateRange} from '@taiga-ui/kit';

@Component({
  standalone: true,
  imports: [
    // ...
    FormsModule,
    TuiTextfield,
    TuiInputDateRange,
  ],
})
export class Example {
  protected value: TuiDayRange | null = null;
}
```
### How to Use (Template)

```html
<tui-textfield>
  <input
    tuiInputDateRange
    [(ngModel)]="value"
  />
  <tui-calendar-range *tuiTextfieldDropdown />
</tui-textfield>
```

### Example

```html
<ng-template>
                <tui-textfield
                    [disabledItemHandler]="itemsHandlers.disabledItemHandler()"
                    [iconStart]="icons.iconStart"
                    [tuiDropdownAlign]="dropdown.align"
                    [tuiTextfieldCleaner]="textfieldDoc.cleaner"
                    [tuiTextfieldSize]="textfieldDoc.size"
                    [(open)]="dropdown.open"
                >
                    <label
                        *ngIf="textfieldDoc.size !== 's'"
                        tuiLabel
                    >
                        Choose range
                    </label>

                    <input
                        tuiInputDateRange
                        [formControl]="control"
                        [invalid]="controlDoc.invalid"
                        [max]="max"
                        [maxLength]="maxLength"
                        [min]="min"
                        [minLength]="minLength"
                        [placeholder]="textfieldDoc.size === 's' ? 'Choose range' : ''"
                        [readOnly]="controlDoc.readonly"
                        [tuiDisabled]="controlDoc.disabled"
                    />

                    <tui-calendar-range *tuiTextfieldDropdown />
                </tui-textfield>
            </ng-template>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| [min] | `TuiDay` | Min date |
| [max] | `TuiDay` | Max date |
| [minLength] | `TuiDayLike | null` | Min length of the range |
| [maxLength] | `TuiDayLike | null` | Max length of the range |

### TypeScript

```ts
import {Component} from '@angular/core';
import {FormControl, ReactiveFormsModule} from '@angular/forms';
import {TuiDocControl} from '@demo/components/control';
import {TuiDocDropdown} from '@demo/components/dropdown';
import {TuiDocIcons} from '@demo/components/icons';
import {TuiDocItemsHandlers} from '@demo/components/items-handlers';
import {TuiDocTextfield} from '@demo/components/textfield';
import {changeDetection} from '@demo/emulate/change-detection';
import {TuiDemo} from '@demo/utils';
import type {TuiDayLike} from '@taiga-ui/cdk';
import {TUI_FIRST_DAY, TUI_LAST_DAY, TuiDay} from '@taiga-ui/cdk';
import {TuiDropdown, TuiTextfield} from '@taiga-ui/core';
import {TuiInputDateRange} from '@taiga-ui/kit';

@Component({
    standalone: true,
    imports: [
        ReactiveFormsModule,
        TuiDemo,
        TuiDocControl,
        TuiDocDropdown,
        TuiDocIcons,
        TuiDocItemsHandlers,
        TuiDocTextfield,
        TuiDropdown,
        TuiInputDateRange,
        TuiTextfield,
    ],
    templateUrl: './index.html',
    changeDetection,
})
export default class Example {
    protected readonly control = new FormControl();

    protected readonly dates = [
        TUI_FIRST_DAY,
        TuiDay.currentLocal(),
        TuiDay.currentLocal().append({year: 1, month: 1}),
        TuiDay.currentLocal().append({year: -1, month: -1}),
        TUI_LAST_DAY,
    ] as const;

    protected min = this.dates[0];
    protected max = this.dates[4];

    protected readonly limits = [{day: 3}, {day: 5}] as const;

    protected minLength: TuiDayLike | null = null;
    protected maxLength: TuiDayLike | null = null;

    protected readonly handler = (item: TuiDay): boolean => item.dayOfWeek() > 4;
}
```

---

# components/InputDateRangeLegacy

- **Package**: `LEGACY`
- **Type**: components

InputDate
            is a field to input a range of dates.
        

        
            Date formatting can be customized with
            
                TUI_DATE_FORMAT
            
            token.
        
        
            
                See an example
            
            with the usage of these tokens.
        

        DI-tokens for input-configurations:
        
            
                TUI_DATE_RANGE_VALUE_TRANSFORMER
            
            
                custom format of control output (
                
                    TuiDayRange
                
                is default).
                
                    
                        See an example
                    
                    of how to provide transformers for
                    InputDate
                    and
                    InputDateRange
                    to work with native
                    
                        Date
                    
                    objects.


### How to Use (Import)

```ts
import {FormsModule, ReactiveFormsModule} from '@angular/forms';
import {TuiInputDateRangeModule} from '@taiga-ui/legacy';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    FormsModule,
    ReactiveFormsModule,
    TuiInputDateRangeModule,
  ],
  // ...
})
export class Example {
  testForm = new FormGroup({
    testValue: new FormControl(),
  });
}
```
### How to Use (Template)

```html
<form [formGroup]="testForm">
  <tui-input-date-range formControlName="testValue">Choose dates</tui-input-date-range>
</form>
```

### Example

```html
<ng-template>
                <tui-input-date-range
                    class="b-demo-control"
                    [defaultViewedMonth]="defaultViewedMonth"
                    [disabledItemHandler]="disabledItemHandler"
                    [focusable]="focusable"
                    [formControl]="control"
                    [items]="items"
                    [markerHandler]="markerHandler"
                    [max]="max"
                    [maxLength]="maxLength"
                    [min]="min"
                    [minLength]="minLength"
                    [pseudoFocus]="pseudoFocused"
                    [pseudoHover]="pseudoHovered"
                    [pseudoInvalid]="pseudoInvalid"
                    [readOnly]="readOnly"
                    [style.text-align]="textAlign"
                    [tuiHintAppearance]="hintAppearance"
                    [tuiHintContent]="hintContent"
                    [tuiHintDirection]="hintDirection"
                    [tuiTextfieldCleaner]="cleaner"
                    [tuiTextfieldIconLeft]="iconStart"
                    [tuiTextfieldLabelOutside]="labelOutside"
                    [tuiTextfieldSize]="size"
                >
                    Choose dates
                </tui-input-date-range>
            </ng-template>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| disabled | `boolean` | Disabled state (use formControl.disable() ) |
| defaultViewedMonth | `TuiMonth` | Default month to show |
| disabledItemHandler | `TuiBooleanHandler<TuiDay>` | " [documentationPropertyValues]="disabledItemHandlerVariants" [(documentationPropertyValue)]="disabledItemHandler" > A handler that gets a date and returns true if it is disabled. Must be a pure function |
| items | `TuiDayRangePeriod[]` | Fixed intervals (shows 2 calendars with empty array) |
| markerHandler | `TuiMarkerHandler | null` | A handler that gets date and returns null or a tuple with circled marker colors |
| min | `TuiDay | null` | Min date |
| max | `TuiDay | null` | Max date |
| minLength | `TuiDayLike | null` | Minimal length of range |
| maxLength | `TuiDayLike | null` | Maximal length of range |

### TypeScript

```ts
import {Component} from '@angular/core';
import {FormControl, ReactiveFormsModule, Validators} from '@angular/forms';
import {changeDetection} from '@demo/emulate/change-detection';
import {DemoRoute} from '@demo/routes';
import {TuiDemo} from '@demo/utils';
import {TuiMobileCalendar, tuiProvideMobileCalendar} from '@taiga-ui/addon-mobile';
import type {TuiBooleanHandler, TuiDayLike, TuiDayRange} from '@taiga-ui/cdk';
import {
    TUI_FALSE_HANDLER,
    TUI_FIRST_DAY,
    TUI_LAST_DAY,
    TuiDay,
    TuiMonth,
    tuiProvide,
} from '@taiga-ui/cdk';
import type {TuiMarkerHandler} from '@taiga-ui/core';
import {TuiHint} from '@taiga-ui/core';
import type {TuiDayRangePeriod} from '@taiga-ui/kit';
import {tuiCreateDefaultDayRangePeriods} from '@taiga-ui/kit';
import {TuiInputDateRangeModule, TuiTextfieldControllerModule} from '@taiga-ui/legacy';

import {ABSTRACT_PROPS_ACCESSOR} from '../abstract/abstract-props-accessor';
import {AbstractExampleTuiControl} from '../abstract/control';
import {InheritedDocumentation} from '../abstract/inherited-documentation';

const TWO_DOTS: [string, string] = [
    'var(--tui-background-accent-1)',
    'var(--tui-status-info)',
];
const ONE_DOT: [string] = ['var(--tui-status-positive)'];

@Component({
    standalone: true,
    imports: [
        InheritedDocumentation,
        ReactiveFormsModule,
        TuiDemo,
        TuiHint,
        TuiInputDateRangeModule,
        TuiMobileCalendar,
        TuiTextfieldControllerModule,
    ],
    templateUrl: './index.html',
    changeDetection,
    providers: [
        tuiProvide(ABSTRACT_PROPS_ACCESSOR, PageComponent),
        tuiProvideMobileCalendar(),
    ],
})
export default class PageComponent extends AbstractExampleTuiControl {
    protected readonly routes = DemoRoute;
    protected readonly dayVariants = [
        TUI_FIRST_DAY,
        new TuiDay(2021, 2, 5),
        new TuiDay(1900, 0, 1),
        new TuiDay(2300, 0, 1),
        new TuiDay(2017, 11, 11),
        new TuiDay(new Date().getFullYear() + 3, 1, 1),
        TUI_LAST_DAY,
        TuiDay.currentLocal(),
    ];

    protected min: TuiDay = this.dayVariants[0]!;

    protected readonly minLengthVariants: readonly TuiDayLike[] = [{day: 3}, {day: 15}];

    protected minLength: TuiDayLike | null = null;

    protected max = this.dayVariants[this.dayVariants.length - 2]!;

    protected readonly markerHandlerVariants: readonly TuiMarkerHandler[] = [
        (day: TuiDay) => (day.day % 2 === 0 ? TWO_DOTS : ONE_DOT),
    ];

    protected markerHandler: TuiMarkerHandler | null = null;

    protected readonly disabledItemHandlerVariants: ReadonlyArray<
        TuiBooleanHandler<TuiDay>
    > = [TUI_FALSE_HANDLER, ({day}) => day % 3 === 0];

    protected disabledItemHandler = this.disabledItemHandlerVariants[0]!;

    protected readonly itemsVariants: ReadonlyArray<readonly TuiDayRangePeriod[]> = [
        [],
        tuiCreateDefaultDayRangePeriods(),
    ];

    protected items = this.itemsVariants[0]!;

    protected readonly defaultViewedMonthVariants: readonly TuiMonth[] = [
        TuiMonth.currentLocal(),
        TuiMonth.currentLocal().append({month: 1}),
        new TuiMonth(2007, 5),
    ];

    protected defaultViewedMonth = this.defaultViewedMonthVariants[0]!;

    public override cleaner = false;
    public control = new FormControl<TuiDayRange | null>(null, Validators.required);

    public override readonly maxLengthVariants: readonly TuiDayLike[] = [
        {day: 5},
        {month: 1},
        {year: 1},
    ];

    public override maxLength: TuiDayLike | null = null;
}
```

---

# components/InputDateTime

- **Package**: `LEGACY`
- **Type**: components

InputDateTime
            allows to input date and time
        

        
            Date formatting can be customized with
            
                TUI_DATE_FORMAT
            
            token.
        
        
            
                See example
            
            with the usage of these tokens.
        

        DI-tokens for input-configurations:
        
            
                TUI_DATE_TIME_VALUE_TRANSFORMER
            
            
                custom format of control output (
                [TuiDay, TuiTime | null] | null
                is default).
                
                    
                        See example
                    
                    with string as control's output.


### How to Use (Import)

```ts
import {FormsModule, ReactiveFormsModule} from '@angular/forms';
import {TuiInputDateTimeModule} from '@taiga-ui/legacy';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    FormsModule,
    ReactiveFormsModule,
    TuiInputDateTimeModule,
  ],
  // ...
})
export class Example {
  testForm = new FormGroup({
    testValue: new FormControl(),
  });
}
```
### How to Use (Template)

```html
<form [formGroup]="testForm">
  <tui-input-date-time formControlName="testValue">Choose date and time</tui-input-date-time>
</form>
```

### Example

```html
<ng-template>
                <tui-input-date-time
                    [defaultActiveYearMonth]="defaultActiveYearMonth"
                    [disabledItemHandler]="disabledItemHandler"
                    [focusable]="focusable"
                    [formControl]="control"
                    [max]="max"
                    [min]="min"
                    [pseudoFocus]="pseudoFocused"
                    [pseudoHover]="pseudoHovered"
                    [pseudoInvalid]="pseudoInvalid"
                    [readOnly]="readOnly"
                    [style.text-align]="textAlign"
                    [timeMode]="mode"
                    [tuiDropdownOpen]="!!(dropdownOpen | async)"
                    [tuiHintAppearance]="hintAppearance"
                    [tuiHintContent]="hintContent"
                    [tuiHintDirection]="hintDirection"
                    [tuiTextfieldCleaner]="cleaner"
                    [tuiTextfieldIconLeft]="iconStart"
                    [tuiTextfieldLabelOutside]="labelOutside"
                    [tuiTextfieldSize]="size"
                    (tuiDropdownOpenChange)="dropdownOpen.next($event)"
                >
                    Choose date and time
                </tui-input-date-time>
            </ng-template>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| disabled | `boolean` | Disabled state (use formControl.disable() ) |
| disabledItemHandler | `TuiBooleanHandler<TuiDay>` | " [documentationPropertyValues]="disabledItemHandlerVariants" [(documentationPropertyValue)]="disabledItemHandler" > A handler that gets a date and returns true if it is disabled. Must be a pure function |
| min | `TuiDay | [TuiDay, TuiTime] | null` | Min date |
| max | `TuiDay | [TuiDay, TuiTime] | null` | Max date |
| defaultActiveYearMonth | `TuiMonth` | The default active month that is shown when you opens calendar for the first time |
| timeMode | `TuiTimeMode` | Time modes for SS and MS support |

### TypeScript

```ts
import {Component} from '@angular/core';
import {FormControl, ReactiveFormsModule, Validators} from '@angular/forms';
import {changeDetection} from '@demo/emulate/change-detection';
import {DemoRoute} from '@demo/routes';
import {TuiDemo} from '@demo/utils';
import type {TuiBooleanHandler, TuiTimeMode} from '@taiga-ui/cdk';
import {
    TUI_FALSE_HANDLER,
    TUI_FIRST_DAY,
    TUI_LAST_DAY,
    TuiDay,
    TuiMonth,
    tuiProvide,
    TuiTime,
} from '@taiga-ui/cdk';
import {TuiDropdown, TuiHint} from '@taiga-ui/core';
import {
    TuiInputDateTimeModule,
    TuiNamedDay,
    TuiTextfieldControllerModule,
} from '@taiga-ui/legacy';

import {ABSTRACT_PROPS_ACCESSOR} from '../abstract/abstract-props-accessor';
import {AbstractExampleTuiControl} from '../abstract/control';
import {InheritedDocumentation} from '../abstract/inherited-documentation';

@Component({
    standalone: true,
    imports: [
        InheritedDocumentation,
        ReactiveFormsModule,
        TuiDemo,
        TuiDropdown,
        TuiHint,
        TuiInputDateTimeModule,
        TuiTextfieldControllerModule,
    ],
    templateUrl: './index.html',
    changeDetection,
    providers: [tuiProvide(ABSTRACT_PROPS_ACCESSOR, PageComponent)],
})
export default class PageComponent extends AbstractExampleTuiControl {
    private readonly today = TuiDay.currentLocal();

    protected readonly routes = DemoRoute;
    protected readonly minVariants: ReadonlyArray<TuiDay | [TuiDay, TuiTime]> = [
        TUI_FIRST_DAY,
        new TuiDay(2017, 2, 5),
        new TuiDay(1900, 0, 1),
        new TuiDay(new Date().getFullYear() + 3, 1, 1),
        [this.today.append({day: -1}), new TuiTime(12, 20)],
    ];

    protected min: TuiDay | [TuiDay, TuiTime] = this.minVariants[0]!;

    protected readonly maxVariants: ReadonlyArray<TuiDay | [TuiDay, TuiTime]> = [
        TUI_LAST_DAY,
        new TuiDay(2017, 11, 11),
        new TuiDay(2020, 2, 5),
        new TuiDay(2300, 0, 1),
        [this.today.append({day: +1}), new TuiTime(16, 20)],
    ];

    protected max: TuiDay | [TuiDay, TuiTime] = this.maxVariants[0]!;

    protected defaultActiveYearMonthVariants = [
        TuiMonth.currentLocal(),
        new TuiMonth(2020, 2),
        new TuiMonth(2017, 2),
    ];

    protected defaultActiveYearMonth = this.defaultActiveYearMonthVariants[0]!;

    protected readonly disabledItemHandlerVariants: ReadonlyArray<
        TuiBooleanHandler<TuiDay>
    > = [TUI_FALSE_HANDLER, ({day}) => day % 3 === 0];

    protected disabledItemHandler = this.disabledItemHandlerVariants[0]!;

    protected readonly itemsVariants = [
        [],
        [new TuiNamedDay(TUI_LAST_DAY.append({year: -1}), 'Until today')],
    ];

    protected items = this.itemsVariants[0]!;

    protected readonly modeVariants = [
        'HH:MM',
        'HH:MM AA',
        'HH:MM:SS',
        'HH:MM:SS AA',
        'HH:MM:SS.MSS',
        'HH:MM:SS.MSS AA',
    ] as const satisfies readonly TuiTimeMode[];

    protected mode: TuiTimeMode = this.modeVariants[0];

    public override cleaner = false;

    public readonly control = new FormControl<[TuiDay, TuiTime | null] | null>(
        null,
        Validators.required,
    );
}
```

---

# components/InputFiles

- **Package**: `KIT`
- **Type**: components

An input for upload one or several files. It uses native input file abilities.


### How to Use (Import)

```ts
import {TuiFiles} from '@taiga-ui/kit';

// ...

@Component({
  standalone: true,
  imports: [TuiFiles],
  //...
})
export class Example {}
```
### How to Use (Template)

```html
<label tuiInputFiles>
  <input
    tuiInputFiles
    accept="image/*"
    [multiple]="true"
    [formControl]="control"
    (reject)="onReject($event)"
  />
</label>

<tui-files>
  <tui-file
    tuiItem
    [file]="file"
  ></tui-file>
</tui-files>
```

### Example

```html
<label tuiInputFiles>
                <input
                    #validator="tuiInputFilesValidator"
                    tuiInputFiles
                    [accept]="accept"
                    [formControl]="control"
                    [maxFileSize]="maxFileSize"
                    [multiple]="multiple"
                    (reject)="updateRejected($event); documentationPropertyReject.emitEvent($event)"
                />
            </label>
            <tui-files
                class="tui-space_top-2"
                [max]="maxFilesCount"
                [(expanded)]="expanded"
            >
                <ng-container *ngFor="let file of files$ | async">
                    <tui-file
                        *tuiItem
                        [file]="file"
                        [showDelete]="showDelete"
                        [showSize]="showSize"
                        [size]="size"
                        (remove)="removeFile(file); documentationPropertyRemoved.emitEvent($event)"
                    />
                </ng-container>

                <ng-container *ngFor="let file of rejected">
                    <tui-file
                        *tuiItem
                        state="error"
                        [file]="(file | tuiFileRejected: validator | async) || file"
                        [showDelete]="showDelete"
                        [showSize]="showSize"
                        [size]="size"
                        (remove)="removeFile(file); documentationPropertyRemoved.emitEvent($event)"
                    />
                </ng-container>
            </tui-files>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| disabled | `boolean` | Disabled state (use formControl.disable() ) |
| accept | `string` | Allowed formats |
| maxFileSize | `number` | Max file size in bytes (30 MB by default — 30 * 1000 * 1000) |
| multiple | `boolean` | Allows to upload several files |
| reject | `TuiFileLike` | Emits file that was rejected. |

### TypeScript

```ts
import {Component} from '@angular/core';
import {FormControl, ReactiveFormsModule} from '@angular/forms';
import {changeDetection} from '@demo/emulate/change-detection';
import {TuiDemo} from '@demo/utils';
import {tuiProvide} from '@taiga-ui/cdk';
import type {TuiSizeL} from '@taiga-ui/core';
import {TuiFiles, tuiFilesAccepted} from '@taiga-ui/kit';
import {map} from 'rxjs';

import {ABSTRACT_PROPS_ACCESSOR} from '../abstract/abstract-props-accessor';
import {AbstractExampleTuiControl} from '../abstract/control';

@Component({
    standalone: true,
    imports: [ReactiveFormsModule, TuiDemo, TuiFiles],
    templateUrl: './index.html',
    changeDetection,
    providers: [tuiProvide(ABSTRACT_PROPS_ACCESSOR, PageComponent)],
})
export default class PageComponent extends AbstractExampleTuiControl {
    protected multiple = true;
    protected showSize = true;
    protected showDelete: boolean | 'always' = true;
    protected expanded = false;
    protected maxFilesCount = 3;
    protected accept = '';
    protected acceptVariants = ['image/*', 'application/pdf', 'image/*,application/pdf'];

    protected readonly showDeleteVariants: Array<boolean | 'always'> = [
        true,
        false,
        'always',
    ];

    protected readonly maxFileSizeVariants = [
        100,
        512000,
        30 * 1000 * 1000,
        2.2 * 1000 * 1000,
    ];

    protected rejected: readonly File[] = [];
    protected maxFileSize = this.maxFileSizeVariants[2]!;

    public override readonly sizeVariants: readonly TuiSizeL[] = ['m', 'l'];
    public override size = this.sizeVariants[0]!;
    public readonly control = new FormControl<File[] | null>(null);
    public readonly files$ = this.control.valueChanges.pipe(
        map(() => tuiFilesAccepted(this.control)),
    );

    protected removeFile(file: File): void {
        this.rejected = this.rejected.filter((current) => current !== file);
        this.control.setValue(
            this.control.value?.filter((current) => current !== file) || null,
        );
    }

    protected updateRejected(rejected: readonly File[]): void {
        this.rejected = rejected;
    }

    protected multipleChange(multiple: boolean): void {
        this.rejected = [];
        this.control.setValue(null);
        this.multiple = multiple;
    }
}
```

---

# components/InputInline

- **Package**: `KIT`
- **Type**: components

Inline input field


### How to Use (Import)

```ts
import {ReactiveFormsModule} from '@angular/forms';
import {TuiInputInline} from '@taiga-ui/kit';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    ReactiveFormsModule,
    TuiInputInline,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<tui-input-inline>
  Placeholder
  <input [formControl]="control" />
</tui-input-inline>
```

---

# components/InputMonth

- **Package**: `KIT`
- **Type**: components

InputMonth
        =
        Textfield
        +
        CalendarMonth
        + ❤️


### How to Use (Import)

```ts
import {FormsModule} from '@angular/forms';
import {TuiTextfield} from '@taiga-ui/core';
import {TuiInputMonth} from '@taiga-ui/kit';

@Component({
  standalone: true,
  imports: [
    // ...
    FormsModule,
    TuiTextfield,
    TuiInputMonth,
  ],
})
export class Example {
  value: TuiMonth | null = null;
}
```
### How to Use (Template)

```html
<tui-textfield>
  <input
    tuiInputMonth
    [(ngModel)]="value"
  />

  <tui-calendar-month
    *tuiTextfieldDropdown
    [min]="min"
    [max]="max"
    [disabledItemHandler]="disabledItemHandler"
    [(year)]="activeYear"
  />
</tui-textfield>
```

### Example

```html
<ng-template>
                <tui-textfield
                    [tuiTextfieldCleaner]="textfieldDoc.cleaner"
                    [tuiTextfieldSize]="textfieldDoc.size"
                >
                    <input
                        placeholder="Month"
                        tuiInputMonth
                        [formControl]="control"
                        [invalid]="controlDoc.invalid"
                        [readOnly]="controlDoc.readonly"
                        [tuiDisabled]="controlDoc.disabled"
                    />

                    <tui-calendar-month
                        *tuiTextfieldDropdown
                        [disabledItemHandler]="disabledItemHandler"
                        [max]="max"
                        [min]="min"
                        [(year)]="year"
                    />
                </tui-textfield>
            </ng-template>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| [min] | `TuiMonth | null` | The lowest value in the range of permitted dates |
| [max] | `TuiMonth | null` | The greatest value in the range of permitted dates |
| [disabledItemHandler] | `TuiBooleanHandler<TuiMonth>` |  |
| [(year)] | `TuiYear` | Current year |

### TypeScript

```ts
import {Component, ViewEncapsulation} from '@angular/core';
import {FormControl, ReactiveFormsModule} from '@angular/forms';
import {TuiDocControl} from '@demo/components/control';
import {TuiDocTextfield} from '@demo/components/textfield';
import {changeDetection} from '@demo/emulate/change-detection';
import {DemoRoute} from '@demo/routes';
import {TuiDemo} from '@demo/utils';
import type {TuiBooleanHandler} from '@taiga-ui/cdk';
import {TUI_FALSE_HANDLER, TuiDay, TuiMonth, TuiYear} from '@taiga-ui/cdk';
import {TuiTextfield, TuiTitle} from '@taiga-ui/core';
import {TuiInputMonth} from '@taiga-ui/kit';

const TAIGA_BIRTHDAY = new TuiDay(2020, 8, 20);
const TAIGA_V3 = new TuiDay(2022, 7, 30);
const TAIGA_V4 = new TuiDay(2024, 7, 9);

@Component({
    standalone: true,
    imports: [
        ReactiveFormsModule,
        TuiDemo,
        TuiDocControl,
        TuiDocTextfield,
        TuiInputMonth,
        TuiTextfield,
        TuiTitle,
    ],
    templateUrl: './index.html',
    styleUrls: ['./index.less'],
    encapsulation: ViewEncapsulation.None,
    changeDetection,
})
export default class PageComponent {
    protected readonly routes = DemoRoute;
    protected readonly control = new FormControl(null);
    protected readonly monthVariants = [
        TuiDay.currentLocal().append({year: -100, month: -1}),
        TuiDay.currentLocal().append({year: -10, month: -1}),
        new TuiMonth(2007, 0),
        TAIGA_BIRTHDAY,
        TAIGA_V3,
        TAIGA_V4,
        TuiDay.currentLocal().append({year: +10, month: +1}),
        TuiDay.currentLocal().append({year: +100, month: +1}),
    ] as const satisfies readonly TuiMonth[];

    protected readonly yearVariants = [
        new TuiYear(TuiDay.currentLocal().year),
        new TuiYear(2077),
        new TuiYear(2007),
    ] as const satisfies readonly TuiYear[];

    protected readonly disabledItemHandlerVariants = [
        TUI_FALSE_HANDLER,
        ({month}) => month % 3 === 0,
    ] as const satisfies ReadonlyArray<TuiBooleanHandler<TuiMonth>>;

    protected min: TuiMonth | null = null;
    protected max: TuiMonth | null = null;
    protected year: TuiYear = this.yearVariants[0];
    protected disabledItemHandler: TuiBooleanHandler<TuiMonth> =
        this.disabledItemHandlerVariants[0];
}
```
### LESS

```less
tui-doc-example tui-textfield:has([tuiInputMonth]) {
    min-inline-size: 18.5rem;
}

tui-doc-example tui-textfield:has([tuiInputMonthRange]) {
    inline-size: min(24rem, 100%);
}
```

---

# components/InputMonthLegacy

- **Package**: `LEGACY`
- **Type**: components

This version of the component is deprecated and will be removed in the next major version. Use
            
                new version of InputMonth
            
            instead!
        

        Component to input a single month


### How to Use (Import)

```ts
import {TuiInputMonthModule} from '@taiga-ui/legacy';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiInputMonthModule,
  ],
  // ...
})
export class Example {
  readonly testForm = new FormGroup({
    testValue: new FormControl(null),
  });
}
```
### How to Use (Template)

```html
<form [formGroup]="testForm">
  <tui-input-month formControlName="testValue">Choose a month</tui-input-month>
</form>
```

### Example

```html
<ng-template>
                <tui-input-month
                    [disabledItemHandler]="disabledItemHandler"
                    [focusable]="focusable"
                    [formControl]="control"
                    [max]="max"
                    [min]="min"
                    [pseudoActive]="pseudoPressed"
                    [pseudoFocus]="pseudoFocused"
                    [pseudoHover]="pseudoHovered"
                    [pseudoInvalid]="pseudoInvalid"
                    [readOnly]="readOnly"
                    [style.text-align]="textAlign"
                    [tuiTextfieldCleaner]="cleaner"
                    [tuiTextfieldIconLeft]="iconStart"
                    [tuiTextfieldLabelOutside]="labelOutside"
                    [tuiTextfieldSize]="size"
                >
                    Month
                </tui-input-month>
            </ng-template>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| disabled | `boolean` | Disabled state (use formControl.disable() ) |
| disabledItemHandler | `TuiBooleanHandler<TuiMonth>` | " [documentationPropertyValues]="disabledItemHandlerVariants" [(documentationPropertyValue)]="disabledItemHandler" > A handler that gets a date and returns true if it is disabled. Must be a pure function |
| min | `TuiMonth | null` | Minimum date |
| max | `TuiMonth | null` | Maximum date |

### TypeScript

```ts
import {Component} from '@angular/core';
import {FormControl, ReactiveFormsModule, Validators} from '@angular/forms';
import {changeDetection} from '@demo/emulate/change-detection';
import {DemoRoute} from '@demo/routes';
import {TuiDemo} from '@demo/utils';
import type {TuiBooleanHandler} from '@taiga-ui/cdk';
import {
    TUI_FALSE_HANDLER,
    TUI_FIRST_DAY,
    TUI_LAST_DAY,
    TuiDay,
    TuiMonth,
    tuiProvide,
} from '@taiga-ui/cdk';
import {TuiInputMonthModule, TuiTextfieldControllerModule} from '@taiga-ui/legacy';

import {ABSTRACT_PROPS_ACCESSOR} from '../abstract/abstract-props-accessor';
import {AbstractExampleTuiControl} from '../abstract/control';
import {InheritedDocumentation} from '../abstract/inherited-documentation';

@Component({
    standalone: true,
    imports: [
        InheritedDocumentation,
        ReactiveFormsModule,
        TuiDemo,
        TuiInputMonthModule,
        TuiTextfieldControllerModule,
    ],
    templateUrl: './index.html',
    changeDetection,
    providers: [tuiProvide(ABSTRACT_PROPS_ACCESSOR, PageComponent)],
})
export default class PageComponent extends AbstractExampleTuiControl {
    protected readonly routes = DemoRoute;
    protected readonly minVariants = [
        TUI_FIRST_DAY,
        new TuiMonth(2019, 2),
        new TuiMonth(2007, 0),
        new TuiDay(new Date().getFullYear() + 3, 1, 1),
    ];

    protected readonly maxVariants = [
        TUI_LAST_DAY,
        new TuiMonth(2017, 2),
        new TuiMonth(2020, 2),
        new TuiMonth(2023, 0),
    ];

    protected min = this.minVariants[0]!;
    protected max = this.maxVariants[0]!;

    protected readonly disabledItemHandlerVariants: ReadonlyArray<
        TuiBooleanHandler<TuiMonth>
    > = [TUI_FALSE_HANDLER, ({month}) => month % 3 === 0];

    protected disabledItemHandler = this.disabledItemHandlerVariants[0]!;

    public override cleaner = false;

    public control = new FormControl<TuiMonth | null>(null, Validators.required);
}
```

---

# components/InputMonthRange

- **Package**: `LEGACY`
- **Type**: components

This version of the component is deprecated and will be removed in the next major version. Use
            
                new version of InputMonth
            
            instead!
        

        Component to input a range of months


### How to Use (Import)

```ts
import {FormsModule, ReactiveFormsModule} from '@angular/forms';
import {TuiInputMonthRangeModule} from '@taiga-ui/legacy';

@Component({
  standalone: true,
  imports: [
    // ...
    FormsModule,
    ReactiveFormsModule,
    TuiInputMonthRangeModule,
  ],
  // ...
})
export class Example {
  readonly testForm = new FormGroup({
    testValue: new FormControl(null),
  });
}
```
### How to Use (Template)

```html
<form [formGroup]="testForm">
  <tui-input-month-range formControlName="testValue">Choose a range of months</tui-input-month-range>
</form>
```

### Example

```html
<ng-template>
                <tui-input-month-range
                    [disabledItemHandler]="disabledItemHandler"
                    [focusable]="focusable"
                    [formControl]="control"
                    [max]="max"
                    [maxLength]="maxLength"
                    [min]="min"
                    [minLength]="minLength"
                    [pseudoActive]="pseudoPressed"
                    [pseudoFocus]="pseudoFocused"
                    [pseudoHover]="pseudoHovered"
                    [pseudoInvalid]="pseudoInvalid"
                    [readOnly]="readOnly"
                    [style.text-align]="textAlign"
                    [tuiHintAppearance]="hintAppearance"
                    [tuiHintContent]="hintContent"
                    [tuiHintDirection]="hintDirection"
                    [tuiTextfieldCleaner]="cleaner"
                    [tuiTextfieldIconLeft]="iconStart"
                    [tuiTextfieldLabelOutside]="labelOutside"
                    [tuiTextfieldSize]="size"
                >
                    Months
                </tui-input-month-range>
            </ng-template>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| disabled | `boolean` | Disabled state (use formControl.disable() ) |
| disabledItemHandler | `TuiBooleanHandler<TuiMonth>` | " [documentationPropertyValues]="disabledItemHandlerVariants" [(documentationPropertyValue)]="disabledItemHandler" > A handler that gets a date and returns true if it is disabled. Must be a pure function |
| min | `TuiMonth | null` | Minimum date |
| max | `TuiMonth | null` | Maximum date |
| maxLength | `number` | Maximum length |
| minLength | `number` | Minimum length |

### TypeScript

```ts
import {Component} from '@angular/core';
import {FormControl, ReactiveFormsModule, Validators} from '@angular/forms';
import {changeDetection} from '@demo/emulate/change-detection';
import {DemoRoute} from '@demo/routes';
import {TuiDemo} from '@demo/utils';
import type {TuiBooleanHandler, TuiMonthRange} from '@taiga-ui/cdk';
import {
    TUI_FALSE_HANDLER,
    TUI_FIRST_DAY,
    TUI_LAST_DAY,
    TuiDay,
    TuiMonth,
    tuiProvide,
} from '@taiga-ui/cdk';
import {TuiHint} from '@taiga-ui/core';
import {TuiInputMonthRangeModule, TuiTextfieldControllerModule} from '@taiga-ui/legacy';

import {ABSTRACT_PROPS_ACCESSOR} from '../abstract/abstract-props-accessor';
import {AbstractExampleTuiControl} from '../abstract/control';
import {InheritedDocumentation} from '../abstract/inherited-documentation';

@Component({
    standalone: true,
    imports: [
        InheritedDocumentation,
        ReactiveFormsModule,
        TuiDemo,
        TuiHint,
        TuiInputMonthRangeModule,
        TuiTextfieldControllerModule,
    ],
    templateUrl: './index.html',
    changeDetection,
    providers: [tuiProvide(ABSTRACT_PROPS_ACCESSOR, PageComponent)],
})
export default class PageComponent extends AbstractExampleTuiControl {
    protected readonly routes = DemoRoute;
    protected readonly minVariants = [
        TUI_FIRST_DAY,
        new TuiMonth(2019, 2),
        new TuiMonth(2007, 0),
        new TuiDay(new Date().getFullYear() + 3, 1, 1),
    ];

    protected readonly maxVariants = [
        TUI_LAST_DAY,
        new TuiMonth(2017, 2),
        new TuiMonth(2020, 2),
        new TuiMonth(2023, 0),
    ];

    protected min = this.minVariants[0]!;
    protected max = this.maxVariants[0]!;
    protected minLength = 0;

    protected readonly disabledItemHandlerVariants: ReadonlyArray<
        TuiBooleanHandler<TuiMonth>
    > = [TUI_FALSE_HANDLER, ({month}) => month % 3 === 0];

    protected disabledItemHandler = this.disabledItemHandlerVariants[0]!;

    public override cleaner = false;
    public override maxLength = 0;

    public control = new FormControl<TuiMonthRange | null>(null, Validators.required);
}
```

---

# components/InputNumber

- **Package**: `KIT`
- **Type**: components

InputNumber
        is a form field to provide numerical input.


### How to Use (Import)

```ts
import {ReactiveFormsModule} from '@angular/forms';
import {TuiNumberFormat} from '@taiga-ui/core';
import {TuiInputNumber, tuiInputNumberOptionsProvider} from '@taiga-ui/kit';

@Component({
  standalone: true,
  imports: [ReactiveFormsModule, TuiInputNumber, TuiNumberFormat],
  providers: [
    /**
     * (Optional)
     * Customize default behavior for all InputNumber-s
     * inside specific Dependency Injection scope
     */
    tuiInputNumberOptionsProvider({
      min: 0,
      max: 100,
      postfix: '%',
    }),
  ],
})
export class Example {
  protected readonly control = new FormControl(42);
}
```
### How to Use (Template)

```html
<tui-textfield>
  <input
    tuiInputNumber
    [formControl]="control"
    [tuiNumberFormat]="{precision: 2}"
  />
</tui-textfield>
```

### Example

```html
<ng-template>
                <tui-textfield
                    [tuiTextfieldCleaner]="textfieldDoc.cleaner"
                    [tuiTextfieldSize]="textfieldDoc.size"
                >
                    <label
                        *ngIf="textfieldDoc.size !== 's'"
                        tuiLabel
                    >
                        Enter a number
                    </label>

                    <input
                        tuiInputNumber
                        [formControl]="control"
                        [invalid]="controlDoc.invalid"
                        [max]="max"
                        [min]="min"
                        [placeholder]="textfieldDoc.size === 's' ? 'Enter a number' : ''"
                        [postfix]="postfix"
                        [prefix]="prefix"
                        [readOnly]="controlDoc.readonly"
                        [step]="step"
                        [tuiDisabled]="controlDoc.disabled"
                        [tuiNumberFormat]="{
                            thousandSeparator: numberFormatDoc.thousandSeparator(),
                            decimalSeparator: numberFormatDoc.decimalSeparator(),
                            precision: numberFormatDoc.precision(),
                            decimalMode: numberFormatDoc.decimalMode(),
                            rounding: numberFormatDoc.rounding(),
                        }"
                    />
                </tui-textfield>
            </ng-template>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| [min] | `number | null` | The lowest value in the range of permitted values |
| [max] | `number | null` | The greatest value in the range of permitted values |
| [step] | `number` | Step to increase/decrease value with keyboard and buttons on the side |
| [prefix] | `string` | number |
| [postfix] | `string` | number |

### TypeScript

```ts
import {Component, ViewEncapsulation} from '@angular/core';
import {FormControl, ReactiveFormsModule, Validators} from '@angular/forms';
import {TuiDocControl} from '@demo/components/control';
import {TuiDocNumberFormat} from '@demo/components/number-format';
import {TuiDocTextfield} from '@demo/components/textfield';
import {changeDetection} from '@demo/emulate/change-detection';
import {DemoRoute} from '@demo/routes';
import {TuiDemo} from '@demo/utils';
import {TuiHint, TuiNumberFormat, TuiTextfield} from '@taiga-ui/core';
import {TuiInputNumber} from '@taiga-ui/kit';

@Component({
    standalone: true,
    imports: [
        ReactiveFormsModule,
        TuiDemo,
        TuiDocControl,
        TuiDocNumberFormat,
        TuiDocTextfield,
        TuiHint,
        TuiInputNumber,
        TuiNumberFormat,
        TuiTextfield,
    ],
    templateUrl: './index.html',
    styleUrls: ['./index.less'],
    encapsulation: ViewEncapsulation.None,
    changeDetection,
})
export default class PageComponent {
    protected readonly routes = DemoRoute;
    protected readonly control = new FormControl(null, Validators.required);
    protected readonly maxVariants: readonly number[] = [Infinity, 10, 500];
    protected readonly minVariants: readonly number[] = [-Infinity, -500, 5, 25];

    protected min = this.minVariants[0]!;
    protected max = this.maxVariants[0]!;
    protected step = 0;
    protected prefix = '';
    protected postfix = '';
}
```
### LESS

```less
tui-doc-example tui-textfield:has([tuiInputNumber]) {
    max-inline-size: 22rem;
}
```

---

# components/InputNumberLegacy

- **Package**: `LEGACY`
- **Type**: components

This version of the component is deprecated and will be removed in the next major version. Use
            
                new version of InputNumber
            
            instead!
        

        A component to input numbers. Control value is also of number type.

        
            There are also other components to input numbers:
            
                
                    
                        Slider
                    
                
                
                    
                        InputSlider
                    
                    (it uses
                    InputNumber
                    inside)
                
                
                    
                        InputRange
                    
                    (it uses
                    InputNumber
                    inside)
                
            
        

        
            Number formatting can be customized with
            
                TUI_NUMBER_FORMAT
            
            token.


### How to Use (Import)

```ts
import {FormsModule, ReactiveFormsModule} from '@angular/forms';
import {TuiInputNumberModule} from '@taiga-ui/legacy';

@Component({
  standalone: true,
  imports: [FormsModule, ReactiveFormsModule, TuiInputNumberModule],
  // ...
})
export class Example {
  testForm = new FormGroup({
    testValue: new FormControl(5000),
  });
}
```
### How to Use (Template)

```html
<form [formGroup]="testForm">
  <tui-input-number formControlName="testValue">Type a sum</tui-input-number>
</form>
```

### Example

```html
<ng-template>
                <tui-input-number
                    [focusable]="focusable"
                    [formControl]="control"
                    [max]="max"
                    [min]="min"
                    [pseudoActive]="pseudoPressed"
                    [pseudoFocus]="pseudoFocused"
                    [pseudoHover]="pseudoHovered"
                    [pseudoInvalid]="pseudoInvalid"
                    [readOnly]="readOnly"
                    [step]="step"
                    [style.text-align]="textAlign"
                    [tuiHintAppearance]="hintAppearance"
                    [tuiHintContent]="hintContent"
                    [tuiHintDirection]="hintDirection"
                    [tuiNumberFormat]="{
                        precision: numberFormatDoc.precision(),
                        decimalMode: numberFormatDoc.decimalMode(),
                        rounding: numberFormatDoc.rounding(),
                        thousandSeparator: numberFormatDoc.thousandSeparator(),
                        decimalSeparator: numberFormatDoc.decimalSeparator(),
                    }"
                    [tuiTextfieldCleaner]="cleaner"
                    [tuiTextfieldCustomContent]="customContent"
                    [tuiTextfieldFiller]="filler"
                    [tuiTextfieldIconLeft]="iconStart"
                    [tuiTextfieldLabelOutside]="labelOutside"
                    [tuiTextfieldPostfix]="postfix"
                    [tuiTextfieldPrefix]="prefix"
                    [tuiTextfieldSize]="size"
                >
                    Type a sum
                </tui-input-number>
            </ng-template>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| disabled | `boolean` | Disabled state (use formControl.disable() ) |
| min | `number | null` | Min value |
| max | `number | null` | Max value |
| step | `number` | Step to increase/decrease value with keyboard and buttons on the side |

### TypeScript

```ts
import {Component} from '@angular/core';
import {FormControl, ReactiveFormsModule, Validators} from '@angular/forms';
import {TuiDocNumberFormat} from '@demo/components/number-format';
import {changeDetection} from '@demo/emulate/change-detection';
import {DemoRoute} from '@demo/routes';
import {TuiDemo} from '@demo/utils';
import {tuiProvide} from '@taiga-ui/cdk';
import {TuiHint, TuiNumberFormat} from '@taiga-ui/core';
import {TuiInputNumberModule, TuiTextfieldControllerModule} from '@taiga-ui/legacy';

import {ABSTRACT_PROPS_ACCESSOR} from '../abstract/abstract-props-accessor';
import {AbstractExampleTuiControl} from '../abstract/control';
import {InheritedDocumentation} from '../abstract/inherited-documentation';

@Component({
    standalone: true,
    imports: [
        InheritedDocumentation,
        ReactiveFormsModule,
        TuiDemo,
        TuiDocNumberFormat,
        TuiHint,
        TuiInputNumberModule,
        TuiNumberFormat,
        TuiTextfieldControllerModule,
    ],
    templateUrl: './index.html',
    changeDetection,
    providers: [tuiProvide(ABSTRACT_PROPS_ACCESSOR, PageComponent)],
})
export default class PageComponent extends AbstractExampleTuiControl {
    protected readonly routes = DemoRoute;
    protected docPages = DemoRoute;

    protected readonly minVariants: readonly number[] = [-Infinity, -500, 5, 25];

    protected min = this.minVariants[0]!;

    protected readonly maxVariants: readonly number[] = [Infinity, 10, 500];

    protected max = this.maxVariants[0]!;

    protected step = 0;

    public override cleaner = false;
    public readonly control = new FormControl(6432, Validators.required);
}
```

---

# components/InputPhone

- **Package**: `LEGACY`
- **Type**: components

InputPhone
            allows to input a phone number


### How to Use (Import)

```ts
import {ReactiveFormsModule} from '@angular/forms';
import {TuiInputPhoneModule} from '@taiga-ui/legacy';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    ReactiveFormsModule,
    TuiInputPhoneModule,
  ],
  // ...
})
export class Example {
  testForm = new FormGroup({
    testValue: new FormControl('+78005553535'),
  });
}
```
### How to Use (Template)

```html
<form [formGroup]="testForm">
  <tui-input-phone formControlName="testValue">Type phone number</tui-input-phone>
</form>
```

### Example

```html
<ng-template>
                <tui-input-phone
                    [countryCode]="countryCode"
                    [focusable]="focusable"
                    [formControl]="control"
                    [phoneMaskAfterCountryCode]="phoneMaskAfterCountryCode"
                    [pseudoFocus]="pseudoFocused"
                    [pseudoHover]="pseudoHovered"
                    [pseudoInvalid]="pseudoInvalid"
                    [readOnly]="readOnly"
                    [style.text-align]="textAlign"
                    [tuiDropdownAlign]="dropdownAlign"
                    [tuiDropdownDirection]="dropdownDirection"
                    [tuiDropdownLimitWidth]="dropdownLimitWidth"
                    [tuiDropdownMaxHeight]="dropdownMaxHeight"
                    [tuiDropdownMinHeight]="dropdownMinHeight"
                    [tuiDropdownOffset]="dropdownOffset"
                    [tuiDropdownOpen]="!!(dropdownOpen | async)"
                    [tuiHintAppearance]="hintAppearance"
                    [tuiHintContent]="hintContent"
                    [tuiHintDirection]="hintDirection"
                    [tuiTextfieldCleaner]="cleaner"
                    [tuiTextfieldCustomContent]="customContent"
                    [tuiTextfieldFiller]="filler"
                    [tuiTextfieldIconLeft]="iconStart"
                    [tuiTextfieldLabelOutside]="labelOutside"
                    [tuiTextfieldPostfix]="postfix"
                    [tuiTextfieldPrefix]="prefix"
                    [tuiTextfieldSize]="size"
                    (tuiDropdownOpenChange)="dropdownOpen.next($event)"
                >
                    Type a phone number
                </tui-input-phone>
            </ng-template>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| disabled | `boolean` | Disabled state (use formControl.disable() ) |
| countryCode | `string` | Country code |
| phoneMaskAfterCountryCode | `string` | Text mask after country code. You can use # , - and spaces as a template symbol |
| search | `string` | Textfield value to subscribe on input or setting it from the outside |

### TypeScript

```ts
import {Component} from '@angular/core';
import {FormControl, ReactiveFormsModule, Validators} from '@angular/forms';
import {changeDetection} from '@demo/emulate/change-detection';
import {TuiDemo} from '@demo/utils';
import {tuiProvide} from '@taiga-ui/cdk';
import {TuiDropdown, TuiHint} from '@taiga-ui/core';
import {TuiInputPhoneModule, TuiTextfieldControllerModule} from '@taiga-ui/legacy';

import {ABSTRACT_PROPS_ACCESSOR} from '../abstract/abstract-props-accessor';
import {AbstractExampleTuiControl} from '../abstract/control';
import {InheritedDocumentation} from '../abstract/inherited-documentation';

@Component({
    standalone: true,
    imports: [
        InheritedDocumentation,
        ReactiveFormsModule,
        TuiDemo,
        TuiDropdown,
        TuiHint,
        TuiInputPhoneModule,
        TuiTextfieldControllerModule,
    ],
    templateUrl: './index.html',
    styleUrls: ['./index.less'],
    changeDetection,
    providers: [tuiProvide(ABSTRACT_PROPS_ACCESSOR, PageComponent)],
})
export default class PageComponent extends AbstractExampleTuiControl {
    protected countryCodes = ['+7', '+850', '+1', '+52'];

    protected countryCode = this.countryCodes[0]!;

    protected phoneMasksAfterCountryCode = [
        '(###) ###-##-##',
        '(####)+____:-#############',
        '### ###-####',
    ];

    protected phoneMaskAfterCountryCode = this.phoneMasksAfterCountryCode[0]!;

    public override cleaner = false;

    public control = new FormControl('', [Validators.required, Validators.minLength(12)]);
}
```
### LESS

```less
@import '@taiga-ui/core/styles/taiga-ui-local';

.item {
    display: flex;
    align-items: center;
    justify-content: space-between;
    inline-size: 100%;
    margin: -0.625rem 0;
}

.avatar {
    margin-left: 0.75rem;
}

.name,
.phone {
    margin: 0;
}

.phone {
    font: var(--tui-font-text-s);
    color: var(--tui-text-tertiary);
}
```

---

# components/InputPhoneInternational

- **Package**: `EXPERIMENTAL`
- **Type**: components

Allows to input phone number in international format

        
            InputPhoneInternational
            is based on
            
                &#64;maskito/phone
            
            and
            
                libphonenumber-js
            
            libraries.
        

        
            
                libphonenumber
            
            is an ultimate phone number formatting and parsing library developed by
            Google
            .

            
                This library
                
                    collects
                
                the latest phone number rules from ITU documents, user bug reports, telecom company home pages and
                government telecommunication authorities. It is always up-to-date (for more than 10 years), and releases
                are published almost every month. It means that
                InputPhoneInternational
                has the robust source of truth!


### How to Use (Import)

```ts
import {ReactiveFormsModule} from '@angular/forms';
import type {TuiCountryIsoCode} from '@taiga-ui/i18n';
import {TuiTextfield} from '@taiga-ui/core';
import {TuiInputPhoneInternational} from '@taiga-ui/experimental';

@Component({
  standalone: true,
  imports: [ReactiveFormsModule, TuiInputPhoneInternational],
  // ...
})
export class Example {
  readonly testForm = new FormGroup({
    testValue: new FormControl('+78005553535'),
  });

  readonly countries: ReadonlyArray<TuiCountryIsoCode> = ['RU', 'KZ', 'UA', 'BY'];
}
```
### How to Use (Template)

```html
<form [formGroup]="testForm">
  <tui-textfield>
    <input
      tuiInputPhoneInternational
      formControlName="testValue"
      [countries]="countries"
    />
  </tui-textfield>
</form>
```

### Example

```html
<ng-template>
                <tui-textfield
                    [tuiDropdownAlign]="dropdown.align"
                    [tuiDropdownAppearance]="dropdown.appearance"
                    [tuiDropdownDirection]="dropdown.direction"
                    [tuiDropdownLimitWidth]="dropdown.limitWidth"
                    [tuiDropdownMaxHeight]="dropdown.maxHeight"
                    [tuiDropdownMinHeight]="dropdown.minHeight"
                    [tuiDropdownOffset]="dropdown.offset"
                    [tuiTextfieldCleaner]="textfield.cleaner"
                    [tuiTextfieldSize]="textfield.size"
                >
                    <label
                        *ngIf="textfield.size !== 's'"
                        tuiLabel
                    >
                        Type a phone number
                    </label>
                    <input
                        tuiInputPhoneInternational
                        [countries]="countries"
                        [countrySearch]="countrySearch"
                        [formControl]="formControl"
                        [invalid]="control.invalid"
                        [placeholder]="textfield.size === 's' ? 'Type a phone number' : ''"
                        [readOnly]="control.readonly"
                        [tuiDisabled]="control.disabled"
                        [(countryIsoCode)]="countryIsoCode"
                    />
                </tui-textfield>
            </ng-template>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| [countries] | `ReadonlyArray<TuiCountryIsoCode>` | Array of ISO-codes of countries to choose |
| [countrySearch] | `boolean` | Enable filter input for countries |
| [(countryIsoCode)] | `boolean` | ISO-code of selected country |

### TypeScript

```ts
import {Component} from '@angular/core';
import {FormControl, ReactiveFormsModule, Validators} from '@angular/forms';
import {TuiDocControl} from '@demo/components/control';
import {TuiDocDropdown} from '@demo/components/dropdown';
import {TuiDocTextfield} from '@demo/components/textfield';
import {changeDetection} from '@demo/emulate/change-detection';
import {DemoRoute} from '@demo/routes';
import {TuiDemo} from '@demo/utils';
import {TuiDropdown, TuiIcon, TuiTextfield} from '@taiga-ui/core';
import {TuiInputPhoneInternational} from '@taiga-ui/experimental';
import type {TuiCountryIsoCode} from '@taiga-ui/i18n';
import {tuiInputPhoneInternationalOptionsProvider, TuiTooltip} from '@taiga-ui/kit';
import {getCountries} from 'libphonenumber-js';

@Component({
    standalone: true,
    imports: [
        ReactiveFormsModule,
        TuiDemo,
        TuiDocControl,
        TuiDocDropdown,
        TuiDocTextfield,
        TuiDropdown,
        TuiIcon,
        TuiInputPhoneInternational,
        TuiTextfield,
        TuiTooltip,
    ],
    templateUrl: './index.html',
    changeDetection,
    providers: [
        tuiInputPhoneInternationalOptionsProvider({
            metadata: import('libphonenumber-js/max/metadata').then((m) => m.default),
        }),
    ],
})
export default class PageComponent {
    protected readonly routes = DemoRoute;
    protected readonly countriesVariants: ReadonlyArray<readonly TuiCountryIsoCode[]> = [
        ['RU', 'KZ', 'UA', 'BY'],
        getCountries(),
    ];

    protected countries = this.countriesVariants[0]!;
    protected countrySearch = false;

    protected readonly countryIsoCodeVariants: readonly TuiCountryIsoCode[] = [
        'RU',
        'KZ',
        'UA',
        'BY',
    ];

    protected countryIsoCode = this.countryIsoCodeVariants[0]!;

    protected formControl = new FormControl('', [
        Validators.required,
        Validators.minLength(9),
    ]);
}
```

---

# components/InputPin

- **Package**: `KIT`
- **Type**: components


### How to Use (Import)

```ts
import {TuiTextfield} from '@taiga-ui/core';
import {TuiInputPin} from '@taiga-ui/kit';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiTextfield,
    TuiInputPin,
  ],
  // ...
})
export class Example {
  readonly testForm = new FormGroup({
    testValue: new FormControl(null),
  });
}
```
### How to Use (Template)

```html
<form [formGroup]="testForm">
  <tui-textfield>
    <input
      maxlength="4"
      tuiInputPin
      [formControl]="control"
    />
  </tui-textfield>
</form>
```

---

# components/InputRange

- **Package**: `LEGACY`
- **Type**: components

Component to input a range of values

        
            Number formatting can be customized by using
            tuiNumberFormat
            directive


### How to Use (Import)

```ts
import {FormsModule, ReactiveFormsModule} from '@angular/forms';
import {TuiInputRangeModule} from '@taiga-ui/legacy';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    FormsModule,
    ReactiveFormsModule,
    TuiInputRangeModule,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<ng-container [formGroup]="testForm">
  <tui-input-range
    class="input-wrapper"
    formControlName="testValue"
  >
    placeholder
  </tui-input-range>
</ng-container>
```

### Example

```html
<ng-template>
                <tui-input-range
                    [formControl]="control"
                    [keySteps]="keySteps"
                    [leftValueContent]="leftValueContent"
                    [max]="max"
                    [min]="min"
                    [pluralize]="pluralize"
                    [quantum]="quantum"
                    [readOnly]="readOnly"
                    [rightValueContent]="rightValueContent"
                    [segments]="segments"
                    [steps]="steps"
                    [tuiNumberFormat]="{
                        decimalMode: numberFormatDoc.decimalMode(),
                        rounding: numberFormatDoc.rounding(),
                        thousandSeparator: numberFormatDoc.thousandSeparator(),
                        decimalSeparator: numberFormatDoc.decimalSeparator(),
                    }"
                    [tuiTextfieldLabelOutside]="labelOutside"
                    [tuiTextfieldSize]="size"
                >
                    Just a very long label. Don't afraid it does not overflow the wrapper, the label is just cut off
                    with ellipsis when it does not fit the wrapper.
                </tui-input-range>
            </ng-template>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| disabled | `boolean` | ) |
| [min] | `number | null` | The lowest value in the range of permitted values |
| [max] | `number | null` | The greatest value in the range of permitted values |
| [quantum] | `number` | Minimum indivisible value |
| [steps] | `number` | Number of actual discrete slider steps |
| [segments] | `number` | for no ticks) |
| [keySteps] | `TuiKeySteps` | Anchor points of non-uniform format between value and position |
| [leftValueContent] | `PolymorpheusContent` | selected value. |
| [rightValueContent] | `PolymorpheusContent` | selected value. |
| [pluralize] | `Record<string, string>` |  |
| [readOnly] | `boolean` | Component is read only |
| [tuiTextfieldLabelOutside] | `boolean` |  |
| [tuiTextfieldSize] | `TuiSizeL` | Size |

### TypeScript

```ts
import {Component} from '@angular/core';
import {FormControl, ReactiveFormsModule} from '@angular/forms';
import {TuiDocNumberFormat} from '@demo/components/number-format';
import {changeDetection} from '@demo/emulate/change-detection';
import {DemoRoute} from '@demo/routes';
import {TuiDemo} from '@demo/utils';
import type {TuiContext} from '@taiga-ui/cdk';
import {tuiProvide} from '@taiga-ui/cdk';
import type {TuiSizeL} from '@taiga-ui/core';
import {TuiNumberFormat} from '@taiga-ui/core';
import type {TuiKeySteps} from '@taiga-ui/kit';
import {TuiInputRangeModule, TuiTextfieldControllerModule} from '@taiga-ui/legacy';

import {ABSTRACT_PROPS_ACCESSOR} from '../abstract/abstract-props-accessor';
import {AbstractExampleTuiControl} from '../abstract/control';

@Component({
    standalone: true,
    imports: [
        ReactiveFormsModule,
        TuiDemo,
        TuiDocNumberFormat,
        TuiInputRangeModule,
        TuiNumberFormat,
        TuiTextfieldControllerModule,
    ],
    templateUrl: './index.html',
    changeDetection,
    providers: [tuiProvide(ABSTRACT_PROPS_ACCESSOR, PageComponent)],
})
export default class PageComponent extends AbstractExampleTuiControl {
    protected readonly routes = DemoRoute;
    protected minVariants: readonly number[] = [0, 5, 7.77, -10];

    protected min = this.minVariants[0]!;

    protected maxVariants: readonly number[] = [10, 100, 10000];

    protected max = this.maxVariants[0]!;

    protected segments = 1;

    protected steps = 0;

    protected quantumVariants: readonly number[] = [1, 0.001, 10, 100];

    protected quantum = this.quantumVariants[0]!;

    protected readonly pluralizeVariants: ReadonlyArray<Record<string, string>> = [
        {one: 'thing', few: 'things', many: 'things', other: 'things'},
        {
            one: 'year',
            other: 'years',
        },
    ];

    protected pluralize: Record<string, string> | null = null;

    protected keyStepsVariants: readonly TuiKeySteps[] = [
        [
            [0, 0],
            [50, 1_000],
            [100, 10_000],
        ],
    ];

    protected keySteps: TuiKeySteps | null = null;

    protected readonly valueContentVariants = [
        '',
        'TOP SECRET',
        ({$implicit: val}: TuiContext<number>) => (val === this.max ? 'MAX' : `${val}`),
        ({$implicit: val}: TuiContext<number>) => (val === this.min ? 'MIN' : `${val}`),
        ({$implicit: val}: TuiContext<number>) => (val === 5 ? 'FIVE' : `${val}`),
    ];

    protected leftValueContent = this.valueContentVariants[0]!;
    protected rightValueContent = this.valueContentVariants[0]!;

    public control = new FormControl([0, 10]);

    public override sizeVariants: readonly TuiSizeL[] = ['m', 'l'];

    public override size = this.sizeVariants[1]!;
}
```

---

# components/InputSearch

- **Package**: `LAYOUT`
- **Type**: components


### How to Use (Import)

```ts
import {TuiInputSearch} from '@taiga-ui/layout';
import {TuiTextfield} from '@taiga-ui/core';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiTextfield,
    TuiInputSearch,
  ],
  // ...
})
export class MyComponent {}
```
### How to Use (Template)

```html
<tui-textfield>
  <input
    [tuiInputSearch]="results"
    [(ngModel)]="value"
  />
  <ng-template #results>
    <!-- ... -->
  </ng-template>
</tui-textfield>
```

---

# components/InputSlider

- **Package**: `KIT`
- **Type**: components

InputSlider
        =
        Textfield
        +
        InputNumber
        +
        Slider
        + ❤️


### How to Use (Import)

```ts
import {FormsModule} from '@angular/forms';
import {TuiNumberFormat, TuiTextfield} from '@taiga-ui/core';
import {TuiInputSlider} from '@taiga-ui/kit';

@Component({
  standalone: true,
  imports: [
    // ...
    FormsModule,
    TuiTextfield,
    TuiInputSlider,
    TuiNumberFormat,
  ],
  // ...
})
export class Example {
  value = 0;
}
```
### How to Use (Template)

```html
<tui-textfield>
  <input
    tuiInputSlider
    prefix="$"
    postfix="%"
    [min]="0"
    [max]="100"
    [tuiNumberFormat]="{precision: 3}"
    [(ngModel)]="value"
  />

  <input
    tuiSlider
    type="range"
    [keySteps]="keySteps"
    [segments]="segments"
    [step]="step"
  />
</tui-textfield>
```

### Example

```html
<ng-template>
                <tui-textfield
                    #textfield
                    [content]="textfield.focused() ? '' : textfieldContent"
                    [tuiTextfieldCleaner]="textfieldDoc.cleaner"
                    [tuiTextfieldSize]="textfieldDoc.size"
                >
                    <input
                        placeholder="Form control value is still {{ control.value }}"
                        tuiInputSlider
                        [formControl]="control"
                        [invalid]="controlDoc.invalid"
                        [max]="max()"
                        [min]="min()"
                        [postfix]="postfix"
                        [prefix]="prefix"
                        [readOnly]="controlDoc.readonly"
                        [tuiDisabled]="controlDoc.disabled"
                        [tuiNumberFormat]="{
                            thousandSeparator: numberFormatDoc.thousandSeparator(),
                            decimalSeparator: numberFormatDoc.decimalSeparator(),
                            precision: numberFormatDoc.precision(),
                            decimalMode: numberFormatDoc.decimalMode(),
                            rounding: numberFormatDoc.rounding(),
                        }"
                    />
                    <input
                        tuiSlider
                        type="range"
                        [keySteps]="keySteps"
                        [segments]="segments"
                        [step]="step"
                    />
                </tui-textfield>
            </ng-template>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| [min] | `number` | value in the range of permitted values |
| [max] | `number` | value in the range of permitted values |
| [prefix] | `string` | number |
| [postfix] | `string` | number |
| [step] | `number` |  |
| [segments] | `number[] | number` | for no ticks) |
| [keySteps] | `TuiKeySteps | null` | Anchor points of non-uniform format between value and position |
| [content] | `PolymorpheusContent` | A template for custom view of textfield value. |

### TypeScript

```ts
import type {Signal} from '@angular/core';
import {Component, computed, signal} from '@angular/core';
import {FormControl, ReactiveFormsModule} from '@angular/forms';
import {TuiDocControl} from '@demo/components/control';
import {TuiDocNumberFormat} from '@demo/components/number-format';
import {TuiDocTextfield} from '@demo/components/textfield';
import {changeDetection} from '@demo/emulate/change-detection';
import {DemoRoute} from '@demo/routes';
import {TuiDemo} from '@demo/utils';
import type {TuiContext} from '@taiga-ui/cdk';
import {TuiNumberFormat, TuiTextfield, TuiTitle} from '@taiga-ui/core';
import type {TuiKeySteps} from '@taiga-ui/kit';
import {TuiInputSlider} from '@taiga-ui/kit';
import type {PolymorpheusContent} from '@taiga-ui/polymorpheus';

@Component({
    standalone: true,
    imports: [
        ReactiveFormsModule,
        TuiDemo,
        TuiDocControl,
        TuiDocNumberFormat,
        TuiDocTextfield,
        TuiInputSlider,
        TuiNumberFormat,
        TuiTextfield,
        TuiTitle,
    ],
    templateUrl: './index.html',
    changeDetection,
})
export default class PageComponent {
    protected readonly routes = DemoRoute;
    protected readonly control = new FormControl(0);

    protected min = signal(0);
    protected max = signal(100);
    protected prefix = '';
    protected postfix = '';
    protected segments: number[] | number = 1;
    protected step = 1;
    protected keySteps: TuiKeySteps | null = null;
    protected textfieldContent: PolymorpheusContent = '';
    protected readonly segmentsVariants: Array<number[] | number> = [
        1,
        5,
        3,
        [0.2, 0.5],
        [0.1, 0.3],
    ];

    protected readonly keyStepsVariants: Signal<readonly TuiKeySteps[]> = computed(() => [
        [
            [0, this.min()],
            [50, 0.1 * this.max()],
            [100, this.max()],
        ],
    ]);

    protected readonly textfieldContentVariants = computed(() => [
        '',
        'TOP SECRET',
        ({$implicit: val}: TuiContext<number>) => (val === this.max() ? 'MAX' : val),
        ({$implicit: val}: TuiContext<number>) => (val === this.min() ? 'MIN' : val),
        ({$implicit: val}: TuiContext<number>) => (val === 5 ? 'FIVE' : val),
    ]);
}
```

---

# components/InputSliderLegacy

- **Package**: `LEGACY`
- **Type**: components

This version of the component is deprecated and will be removed in the next major version. Use
            
                new version of InputSlider
            
            instead!
        

        Component to input a limited range

        
            Number formatting can be customized by using
            
                TUI_NUMBER_FORMAT


### How to Use (Import)

```ts
import {FormsModule, ReactiveFormsModule} from '@angular/forms';
import {TuiInputSliderModule} from '@taiga-ui/legacy';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    FormsModule,
    ReactiveFormsModule,
    TuiInputSliderModule,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<form [formGroup]="testForm">
  <tui-input-slider
    formControlName="testValue"
    max="1000"
    quantum="10"
  ></tui-input-slider>
</form>
```

### Example

```html
<ng-template>
                <tui-input-slider
                    [focusable]="focusable"
                    [formControl]="control"
                    [keySteps]="keySteps"
                    [max]="max"
                    [min]="min"
                    [pseudoActive]="pseudoPressed"
                    [pseudoFocus]="pseudoFocused"
                    [pseudoHover]="pseudoHovered"
                    [pseudoInvalid]="pseudoInvalid"
                    [quantum]="quantum"
                    [readOnly]="readOnly"
                    [segments]="segments"
                    [steps]="steps"
                    [tuiHintAppearance]="hintAppearance"
                    [tuiHintContent]="hintContent"
                    [tuiHintDirection]="hintDirection"
                    [tuiNumberFormat]="{
                        decimalMode: numberFormatDoc.decimalMode(),
                        rounding: numberFormatDoc.rounding(),
                        thousandSeparator: numberFormatDoc.thousandSeparator(),
                        decimalSeparator: numberFormatDoc.decimalSeparator(),
                    }"
                    [tuiTextfieldCleaner]="cleaner"
                    [tuiTextfieldCustomContent]="customContentSelected"
                    [tuiTextfieldIconLeft]="iconStart"
                    [tuiTextfieldLabelOutside]="labelOutside"
                    [tuiTextfieldPostfix]="postfix"
                    [tuiTextfieldPrefix]="prefix"
                    [tuiTextfieldSize]="size"
                    [valueContent]="valueContent"
                >
                    Range
                </tui-input-slider>
            </ng-template>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| disabled | `boolean` | ) |
| [min] | `number` | The lowest value in the range of permitted values |
| [max] | `number` | The greatest value in the range of permitted values |
| [quantum] | `number` | Minimum indivisible value |
| [steps] | `number` |  |
| [segments] | `number[] | number` | for no ticks) |
| [keySteps] | `TuiKeySteps` | Anchor points of non-uniform format between value and position |
| [valueContent] | `PolymorpheusContent` | A template for custom view of selected value. |

### TypeScript

```ts
import {Component} from '@angular/core';
import {FormControl, ReactiveFormsModule} from '@angular/forms';
import {TuiDocNumberFormat} from '@demo/components/number-format';
import {changeDetection} from '@demo/emulate/change-detection';
import {DemoRoute} from '@demo/routes';
import {TuiDemo} from '@demo/utils';
import {tuiDocExcludeProperties} from '@taiga-ui/addon-doc';
import type {TuiContext} from '@taiga-ui/cdk';
import {tuiProvide} from '@taiga-ui/cdk';
import type {TuiSizeL} from '@taiga-ui/core';
import {TuiHint, TuiNumberFormat} from '@taiga-ui/core';
import type {TuiKeySteps} from '@taiga-ui/kit';
import {TuiInputSliderModule, TuiTextfieldControllerModule} from '@taiga-ui/legacy';

import {ABSTRACT_PROPS_ACCESSOR} from '../abstract/abstract-props-accessor';
import {AbstractExampleTuiControl} from '../abstract/control';
import {InheritedDocumentation} from '../abstract/inherited-documentation';

@Component({
    standalone: true,
    imports: [
        InheritedDocumentation,
        ReactiveFormsModule,
        TuiDemo,
        TuiDocNumberFormat,
        TuiHint,
        TuiInputSliderModule,
        TuiNumberFormat,
        TuiTextfieldControllerModule,
    ],
    templateUrl: './index.html',
    changeDetection,
    providers: [
        tuiProvide(ABSTRACT_PROPS_ACCESSOR, PageComponent),
        tuiDocExcludeProperties(['precision']),
    ],
})
export default class PageComponent extends AbstractExampleTuiControl {
    protected readonly routes = DemoRoute;
    protected readonly minVariants: readonly number[] = [0, 1, 5, 7.77, -10];
    protected readonly segmentsVariants: Array<number[] | number> = [
        1,
        5,
        3,
        [0.2, 0.5],
        [0.1, 0.3],
    ];

    protected min = this.minVariants[0]!;

    protected readonly maxVariants: readonly number[] = [10, 100, 10000];

    protected max = this.maxVariants[0]!;

    protected segments: number[] | number = 1;

    protected steps = 0;

    protected readonly quantumVariants: readonly number[] = [
        1, 0.01, 0.001, 0.0001, 10, 20, 100,
    ];

    protected quantum = this.quantumVariants[0]!;

    protected readonly valueContentVariants = [
        '',
        'TOP SECRET',
        ({$implicit: val}: TuiContext<number>) => (val === this.max ? 'MAX' : val),
        ({$implicit: val}: TuiContext<number>) => (val === this.min ? 'MIN' : val),
        ({$implicit: val}: TuiContext<number>) => (val === 5 ? 'FIVE' : val),
    ];

    protected valueContent = this.valueContentVariants[0]!;

    protected readonly keyStepsVariants: readonly TuiKeySteps[] = [
        [
            [0, 0],
            [50, 1_000],
            [100, 10_000],
        ],
    ];

    protected keySteps: TuiKeySteps | null = null;

    public override readonly sizeVariants: readonly TuiSizeL[] = ['m', 'l'];
    public override size = this.sizeVariants[1]!;
    public readonly control = new FormControl(0);

    public override readonly customContentVariants: string[] = [
        '',
        '@tui.visa-mono',
        '@tui.mastercard-mono',
    ];

    public override customContentSelected = this.customContentVariants[0]!;
}
```

---

# components/InputTag

- **Package**: `LEGACY`
- **Type**: components

InputTag
            allows to input several tags with autocomplete and list in dropdown.


### How to Use (Import)

```ts
import {FormsModule, ReactiveFormsModule} from '@angular/forms';
import {TuiInputTagModule} from '@taiga-ui/legacy';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    FormsModule,
    ReactiveFormsModule,
    TuiInputTagModule,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<ng-container [formGroup]="formName">
  <tui-input-tag formControlName="controlName"></tui-input-tag>
</ng-container>

<tui-input-tag [(ngModel)]="model"></tui-input-tag>
```

### Example

```html
<ng-template>
                <tui-input-tag
                    [autoColor]="autoColor"
                    [disabledItemHandler]="disabledItemHandler"
                    [editable]="editable"
                    [focusable]="focusable"
                    [formControl]="control"
                    [inputHidden]="inputHidden"
                    [maxLength]="maxLength"
                    [placeholder]="exampleText"
                    [pseudoActive]="pseudoPressed"
                    [pseudoFocus]="pseudoFocused"
                    [pseudoHover]="pseudoHovered"
                    [pseudoInvalid]="pseudoInvalid"
                    [readOnly]="readOnly"
                    [rows]="rows"
                    [separator]="separator"
                    [style.text-align]="textAlign"
                    [tagValidator]="tagValidator"
                    [tuiDropdownAlign]="dropdownAlign"
                    [tuiDropdownDirection]="dropdownDirection"
                    [tuiDropdownLimitWidth]="dropdownLimitWidth"
                    [tuiDropdownMaxHeight]="dropdownMaxHeight"
                    [tuiDropdownMinHeight]="dropdownMinHeight"
                    [tuiDropdownOffset]="dropdownOffset"
                    [tuiDropdownOpen]="!!(dropdownOpen | async)"
                    [tuiHintAppearance]="hintAppearance"
                    [tuiHintContent]="hintContent"
                    [tuiHintDirection]="hintDirection"
                    [tuiTextfieldCleaner]="cleaner"
                    [tuiTextfieldIcon]="icon"
                    [tuiTextfieldIconLeft]="iconStart"
                    [tuiTextfieldLabelOutside]="labelOutside"
                    [tuiTextfieldSize]="size"
                    [uniqueTags]="uniqueTags"
                    [(search)]="search"
                    (tuiDropdownOpenChange)="dropdownOpen.next($event)"
                >
                    Please enter Pythons' names
                </tui-input-tag>
            </ng-template>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| disabled | `boolean` | Disabled state (use formControl.disable() ) |
| search | `string | null` | Textfield value to subscribe on input or setting it from the outside (emits null when item from list selected) |
| maxLength | `number` | Max length of tag |
| disabledItemHandler | `TuiBooleanHandler<string>` | " [documentationPropertyValues]="disabledItemHandlerVariants" [(documentationPropertyValue)]="disabledItemHandler" > Handler for deactivation some tags |
| placeholder | `string` | Placeholder |
| uniqueTags | `boolean` | Ability to enter unique or non-unique tags |
| editable | `boolean` | Tags are editable |
| separator | `string | RegExp` | String or RegExp to separate tags |
| rows | `number` | A number of visible rows |
| inputHidden | `boolean` | Hide input field. For example, to prevent adding new tags |
| tagValidator | `TuiBooleanHandler<string>` | " [documentationPropertyValues]="tagValidatorVariants" [(documentationPropertyValue)]="tagValidator" > A function that checks that tag is valid |
| autoColor | `boolean` | Auto color for tags ( autoColor = true does not work together with labelOutside ==== false : use only outside labels) |
| tuiTextfieldIcon | `PolymorpheusContent` | Icon content. If content is a string, it is used as stringified svg. |

### TypeScript

```ts
import {Component} from '@angular/core';
import {FormControl, ReactiveFormsModule, Validators} from '@angular/forms';
import {changeDetection} from '@demo/emulate/change-detection';
import {DemoRoute} from '@demo/routes';
import {TuiDemo} from '@demo/utils';
import {tuiDocExcludeProperties} from '@taiga-ui/addon-doc';
import type {TuiBooleanHandler} from '@taiga-ui/cdk';
import {TUI_FALSE_HANDLER, TUI_TRUE_HANDLER, tuiProvide} from '@taiga-ui/cdk';
import type {TuiSizeL, TuiSizeS} from '@taiga-ui/core';
import {TuiDropdown, TuiHint} from '@taiga-ui/core';
import type {TuiStringifiableItem} from '@taiga-ui/legacy';
import {TuiInputTagModule, TuiTextfieldControllerModule} from '@taiga-ui/legacy';

import {ABSTRACT_PROPS_ACCESSOR} from '../abstract/abstract-props-accessor';
import {AbstractExampleTuiControl} from '../abstract/control';
import {InheritedDocumentation} from '../abstract/inherited-documentation';

@Component({
    standalone: true,
    imports: [
        InheritedDocumentation,
        ReactiveFormsModule,
        TuiDemo,
        TuiDropdown,
        TuiHint,
        TuiInputTagModule,
        TuiTextfieldControllerModule,
    ],
    templateUrl: './index.html',
    changeDetection,
    providers: [
        tuiProvide(ABSTRACT_PROPS_ACCESSOR, PageComponent),
        tuiDocExcludeProperties([
            'tuiTextfieldPrefix',
            'tuiTextfieldPostfix',
            'tuiTextfieldFiller',
        ]),
    ],
})
export default class PageComponent extends AbstractExampleTuiControl {
    protected readonly routes = DemoRoute;

    protected editable = true;

    protected uniqueTags = true;

    protected readonly separatorVariants = [',', ';', /\d/, /[\s,]/];

    protected separator = this.separatorVariants[0]!;

    protected readonly iconVariants: readonly string[] = ['@tui.search'];

    protected icon = '';

    protected search = '';

    protected rows = 100;

    protected tagValidatorVariants: ReadonlyArray<TuiBooleanHandler<string>> = [
        TUI_TRUE_HANDLER,
        (item) => item === 'test',
        (item) => item !== 'mail',
    ];

    protected tagValidator = this.tagValidatorVariants[0]!;

    protected autoColor = false;

    protected inputHidden = false;

    protected readonly disabledItemHandlerVariants: Array<
        TuiBooleanHandler<TuiStringifiableItem<string> | string>
    > = [TUI_FALSE_HANDLER, (item) => String(item).startsWith('T')];

    protected disabledItemHandler = this.disabledItemHandlerVariants[0]!;

    public override readonly sizeVariants: ReadonlyArray<TuiSizeL | TuiSizeS> = [
        's',
        'm',
        'l',
    ];

    public override size: TuiSizeL | TuiSizeS =
        this.sizeVariants[this.sizeVariants.length - 1]!;

    public readonly control = new FormControl(
        ['John Cleese', 'Eric Idle', 'Michael Palin'],
        Validators.required,
    );

    public override maxLengthVariants: number[] = [10, 20];

    public override maxLength: number | null = null;
}
```

---

# components/InputTimeLegacy

- **Package**: `LEGACY`
- **Type**: components

InputTime
            allows input time in HH:MM format
        

        DI-tokens for input-configurations:
        
            
                TUI_TIME_VALUE_TRANSFORMER
            
            
                custom format of control output (
                TuiTime | null
                is default).
                
                    
                        See example
                    
                    with string as control's output.


### How to Use (Import)

```ts
import {FormsModule, ReactiveFormsModule} from '@angular/forms';
import {TuiInputTimeModule} from '@taiga-ui/legacy';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    FormsModule,
    ReactiveFormsModule,
    TuiInputTimeModule,
  ],
  providers: [
    {
      provide: TUI_INPUT_TIME_OPTIONS,
      useValue: {
        icon: '@tui.circle-check',
        mode: 'HH:MM:SS',
        itemSize: 's',
      },
    },
  ],
})
export class Example {
  testForm = new FormGroup({
    testValue: new FormControl(new TuiTime(12, 30)),
  });
}
```
### How to Use (Template)

```html
<form [formGroup]="testForm">
  <tui-input-time formControlName="testValue">Placeholder</tui-input-time>
</form>
```

### Example

```html
<ng-template>
                <tui-input-time
                    [disabledItemHandler]="disabledItemHandler"
                    [focusable]="focusable"
                    [formControl]="control"
                    [items]="items"
                    [itemsHidden]="itemsHidden"
                    [itemSize]="itemSize"
                    [mode]="mode"
                    [pseudoFocus]="pseudoFocused"
                    [pseudoHover]="pseudoHovered"
                    [pseudoInvalid]="pseudoInvalid"
                    [readOnly]="readOnly"
                    [strict]="strict"
                    [style.text-align]="textAlign"
                    [tuiDropdownAlign]="dropdownAlign"
                    [tuiDropdownDirection]="dropdownDirection"
                    [tuiDropdownLimitWidth]="dropdownLimitWidth"
                    [tuiDropdownMaxHeight]="dropdownMaxHeight"
                    [tuiDropdownMinHeight]="dropdownMinHeight"
                    [tuiDropdownOffset]="dropdownOffset"
                    [tuiHintAppearance]="hintAppearance"
                    [tuiHintContent]="hintContent"
                    [tuiHintDirection]="hintDirection"
                    [tuiTextfieldCleaner]="cleaner"
                    [tuiTextfieldLabelOutside]="labelOutside"
                    [tuiTextfieldPostfix]="postfix"
                    [tuiTextfieldPrefix]="prefix"
                    [tuiTextfieldSize]="size"
                >
                    Input time
                </tui-input-time>
            </ng-template>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| disabled | `boolean` | Disabled state (use formControl.disable() ) |
| disabledItemHandler | `TuiBooleanHandler<TuiTime>` | " [documentationPropertyValues]="disabledItemHandlerVariants" [(documentationPropertyValue)]="disabledItemHandler" > Handler to disable some items |
| items | `ReadonlyArray<TuiTime>` | " [documentationPropertyValues]="itemsVariants" [(documentationPropertyValue)]="items" > Items to choose |
| itemsHidden | `boolean` | Disable the display of the dropdown list |
| itemSize | `TuiSizeS | TuiSizeL` | Item size |
| strict | `boolean` | Only items are allowed |
| mode | `TuiTimeMode` | Modes for seconds and ms support |

### TypeScript

```ts
import {Component} from '@angular/core';
import {FormControl, ReactiveFormsModule, Validators} from '@angular/forms';
import {changeDetection} from '@demo/emulate/change-detection';
import {TuiDemo} from '@demo/utils';
import {tuiDocExcludeProperties} from '@taiga-ui/addon-doc';
import type {TuiBooleanHandler, TuiTimeMode} from '@taiga-ui/cdk';
import {TUI_FALSE_HANDLER, tuiProvide, TuiTime} from '@taiga-ui/cdk';
import type {TuiSizeL, TuiSizeS} from '@taiga-ui/core';
import {TuiDropdown, TuiHint} from '@taiga-ui/core';
import {tuiCreateTimePeriods} from '@taiga-ui/kit';
import {TuiInputTimeModule, TuiTextfieldControllerModule} from '@taiga-ui/legacy';

import {ABSTRACT_PROPS_ACCESSOR} from '../abstract/abstract-props-accessor';
import {AbstractExampleTuiControl} from '../abstract/control';
import {InheritedDocumentation} from '../abstract/inherited-documentation';

@Component({
    standalone: true,
    imports: [
        InheritedDocumentation,
        ReactiveFormsModule,
        TuiDemo,
        TuiDropdown,
        TuiHint,
        TuiInputTimeModule,
        TuiTextfieldControllerModule,
    ],
    templateUrl: './index.html',
    changeDetection,
    providers: [
        tuiProvide(ABSTRACT_PROPS_ACCESSOR, PageComponent),
        tuiDocExcludeProperties(['tuiTextfieldFiller']),
    ],
})
export default class PageComponent extends AbstractExampleTuiControl {
    protected readonly disabledItemHandlerVariants: ReadonlyArray<
        TuiBooleanHandler<TuiTime>
    > = [
        TUI_FALSE_HANDLER,
        (item: TuiTime) => String(item) === '06:00' || item > TuiTime.currentLocal(),
    ];

    protected disabledItemHandler = this.disabledItemHandlerVariants[0]!;

    protected readonly itemSizeVariants: ReadonlyArray<TuiSizeL | TuiSizeS> = [
        's',
        'm',
        'l',
    ];

    protected itemSize: TuiSizeL | TuiSizeS = this.itemSizeVariants[1]!;

    protected readonly itemsVariants: ReadonlyArray<readonly TuiTime[]> = [
        [],
        tuiCreateTimePeriods(),
    ];

    protected items = this.itemsVariants[0]!;

    protected itemsHidden = false;

    protected strict = false;

    protected readonly modeVariants: readonly TuiTimeMode[] = [
        'HH:MM',
        'HH:MM AA',
        'HH:MM:SS',
        'HH:MM:SS AA',
        'HH:MM:SS.MSS',
        'HH:MM:SS.MSS AA',
        'MM:SS',
    ];

    protected mode = this.modeVariants[0]!;

    public override cleaner = false;

    public control = new FormControl(new TuiTime(15, 30), Validators.required);
}
```

---

# components/InputYear

- **Package**: `LEGACY`
- **Type**: components

Component to input a single year


### How to Use (Import)

```ts
import {TuiInputYearModule} from '@taiga-ui/legacy';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiInputYearModule,
  ],
  // ...
})
export class Example {
  readonly testForm = new FormGroup({
    testValue: new FormControl(null),
  });
}
```
### How to Use (Template)

```html
<form [formGroup]="testForm">
  <tui-input-year formControlName="testValue">Choose a month</tui-input-year>
</form>
```

### Example

```html
<ng-template>
                <tui-input-year
                    [disabledItemHandler]="disabledItemHandler"
                    [focusable]="focusable"
                    [formControl]="control"
                    [max]="max"
                    [min]="min"
                    [pseudoActive]="pseudoPressed"
                    [pseudoFocus]="pseudoFocused"
                    [pseudoHover]="pseudoHovered"
                    [pseudoInvalid]="pseudoInvalid"
                    [readOnly]="readOnly"
                    [style.text-align]="textAlign"
                    [tuiTextfieldCleaner]="cleaner"
                    [tuiTextfieldFiller]="filler"
                    [tuiTextfieldIconLeft]="iconStart"
                    [tuiTextfieldLabelOutside]="labelOutside"
                    [tuiTextfieldPostfix]="postfix"
                    [tuiTextfieldPrefix]="prefix"
                    [tuiTextfieldSize]="size"
                >
                    Year
                </tui-input-year>
            </ng-template>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| disabled | `boolean` | Disabled state (use formControl.disable() ) |
| disabledItemHandler | `TuiBooleanHandler<number>` | " [documentationPropertyValues]="disabledItemHandlerVariants" [(documentationPropertyValue)]="disabledItemHandler" > A handler that gets a year and returns true if it is disabled. Must be a pure function |
| min | `number | null` | Minimum year |
| max | `number | null` | Maximum year |

### TypeScript

```ts
import {Component} from '@angular/core';
import {FormControl, ReactiveFormsModule, Validators} from '@angular/forms';
import {changeDetection} from '@demo/emulate/change-detection';
import {TuiDemo} from '@demo/utils';
import type {TuiBooleanHandler} from '@taiga-ui/cdk';
import {TUI_FALSE_HANDLER, TUI_FIRST_DAY, TUI_LAST_DAY, tuiProvide} from '@taiga-ui/cdk';
import {TuiInputYearModule, TuiTextfieldControllerModule} from '@taiga-ui/legacy';

import {ABSTRACT_PROPS_ACCESSOR} from '../abstract/abstract-props-accessor';
import {AbstractExampleTuiControl} from '../abstract/control';
import {InheritedDocumentation} from '../abstract/inherited-documentation';

@Component({
    standalone: true,
    imports: [
        InheritedDocumentation,
        ReactiveFormsModule,
        TuiDemo,
        TuiInputYearModule,
        TuiTextfieldControllerModule,
    ],
    templateUrl: './index.html',
    changeDetection,
    providers: [tuiProvide(ABSTRACT_PROPS_ACCESSOR, PageComponent)],
})
export default class PageComponent extends AbstractExampleTuiControl {
    protected readonly minVariants = [TUI_FIRST_DAY.year, 2019, 2007];
    protected readonly maxVariants = [TUI_LAST_DAY.year, 2020, 2023];

    protected min = this.minVariants[0]!;
    protected max = this.maxVariants[0]!;

    protected readonly disabledItemHandlerVariants: ReadonlyArray<
        TuiBooleanHandler<number>
    > = [TUI_FALSE_HANDLER, (year) => year % 3 === 0];

    protected disabledItemHandler = this.disabledItemHandlerVariants[0]!;

    public override cleaner = false;

    public control = new FormControl<number | null>(null, Validators.required);
}
```

---

# components/Island

- **Package**: `LEGACY`
- **Type**: components

This component is deprecated in favor of
            
                Card
            
            component
        

        Islands show information in rounded block with a border

        

        .tui-island
        :
        
            
                .tui-island__category
            
            
                .tui-island__title
            
            
                .tui-island__paragraph
                
                    
                        .tui-island__paragraph_link
                        : paragraph with links. Margin top
                        16px
                    
                    
                        .tui-island__paragraph_button
                        : paragraph with buttons. Margin top
                        20px
                    
                
            
            
                .tui-island__figure
            
            
                .tui-island__content
                : a class for a case when figure is aside
            
            
                .tui-island__carousel-controls
                : block with
                carousel actions
            
            
                .tui-island__carousel-button
                :
                button for carousel
            
            
                .tui-island__carousel-pages
                :
                carousel pages
            
            
                .tui-island__footer-button
                :
                footer button
                with island width


### How to Use (Import)

```ts
import {TuiIsland} from '@taiga-ui/legacy';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiIsland,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<tui-island>
  <h3 class="tui-island__title">Title</h3>
  <p class="tui-island__paragraph">Text</p>
  <p class="tui-island__paragraph tui-island__paragraph_button">
    <button
      tuiButton
      type="button"
      appearance="secondary"
    >
      Button
    </button>
  </p>
</tui-island>
```

### Example

```html
<tui-island
                class="island"
                [hoverable]="hoverable"
                [size]="size"
                [textAlign]="textAlign"
            >
                <div class="tui-island__content">
                    <figure class="tui-island__figure">
                        <div class="some-figure"></div>
                    </figure>
                    <div>
                        <h3 class="tui-island__title">Some heading</h3>
                        <p class="tui-island__paragraph">Some information</p>
                        <p class="tui-island__paragraph tui-island__paragraph_button">
                            <button
                                appearance="secondary"
                                tuiButton
                                type="button"
                                [size]="size"
                            >
                                Button
                            </button>
                        </p>
                    </div>
                </div>
            </tui-island>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| hoverable | `boolean` | Hoverable |
| size | `TuiSizeL` | Size |
| textAlign | `'left' | 'right' | 'center'` | Text align |

### TypeScript

```ts
import {Component} from '@angular/core';
import {changeDetection} from '@demo/emulate/change-detection';
import {DemoRoute} from '@demo/routes';
import {TuiDemo} from '@demo/utils';
import type {TuiSizeL, TuiSizeS} from '@taiga-ui/core';
import {TuiButton} from '@taiga-ui/core';
import {TuiIslandDirective} from '@taiga-ui/legacy';

import {StylesInfo} from '../../app/styles-info';

@Component({
    standalone: true,
    imports: [StylesInfo, TuiButton, TuiDemo, TuiIslandDirective],
    templateUrl: './index.html',
    styleUrls: ['./index.less'],
    changeDetection,
})
export default class Page {
    protected hoverable = false;

    protected readonly textAlignVariants = ['left', 'right', 'center'] as const;

    protected textAlign: 'center' | 'left' | 'right' = this.textAlignVariants[0];

    protected readonly sizeVariants: ReadonlyArray<TuiSizeL | TuiSizeS> = ['s', 'm', 'l'];

    protected size: TuiSizeL | TuiSizeS = this.sizeVariants[0]!;
    protected readonly routes = DemoRoute;
}
```
### LESS

```less
.island {
    max-inline-size: 25rem;
}

.some-figure {
    border-radius: 100%;
    inline-size: 4rem;
    block-size: 4rem;
    background-color: var(--tui-background-neutral-1);
}
```

---

# components/ItemGroup

- **Package**: `LAYOUT`
- **Type**: components


### How to Use (Import)

```ts
import {Component} from '@angular/core';
import {TuiItemGroup} from '@taiga-ui/layout';
// ...

@Component({
  imports: [
    // ...
    TuiItemGroup,
  ],
})
export class Example {}
```
### How to Use (Template)

```html
<div tuiItemGroup>
  <tui-chip appearance="primary">{{ value }}</tui-chip>
</div>
```

### Example

```html
<div
                tuiItemGroup
                [autoscroll]="autoscroll"
                [horizontal]="horizontal"
            >
                <label
                    *ngFor="let chip of chips"
                    tuiChip
                    [appearance]="chip === selected ? 'accent' : 'neutral'"
                >
                    {{ chip }}
                    <input
                        appearance=""
                        name="radio"
                        tuiChip
                        type="radio"
                        [value]="chip"
                        [(ngModel)]="selected"
                    />
                </label>
            </div>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| horizontal | `boolean` | Horizontal layout (for mobile devices) |
| autoscroll | `boolean` | Enable scrolling to selected chip (for interactive chips in horizontal layout) |

### TypeScript

```ts
import {Component} from '@angular/core';
import {FormsModule} from '@angular/forms';
import {changeDetection} from '@demo/emulate/change-detection';
import {TuiDemo} from '@demo/utils';
import {TuiChip} from '@taiga-ui/kit';
import {TuiItemGroup} from '@taiga-ui/layout';

@Component({
    standalone: true,
    selector: 'example-chip',
    imports: [FormsModule, TuiChip, TuiDemo, TuiItemGroup],
    templateUrl: './index.html',
    changeDetection,
})
export default class Example {
    protected readonly examples = [
        'Basic',
        'Single choice',
        'Multiple choice',
        'With more',
    ];

    protected readonly chips = [
        'Indian cuisine',
        'Wi-Fi',
        'Free parking',
        'Pets allowed',
        'Pool',
        'Air conditioning',
        'Breakfast',
        'Gym',
        'Kitchen',
        'Laundry',
        'Luggage storage',
        'Outdoor seating',
        'Room service',
        'Smoking allowed',
    ];

    protected selected = this.chips[7];
    protected horizontal = false;
    protected autoscroll = false;
}
```

---

# components/ItemsWithMore

- **Package**: `KIT`
- **Type**: components

Component to hide overflown items behind custom content.

        Resize the screen to see extra items disappear


### How to Use (Import)

```ts
import {TuiItemsWithMore} from '@taiga-ui/kit';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiItemsWithMore,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<tui-items-with-more>
  <ng-container *ngFor="let item of items">
    <span *tuiItem>{{ item }}</span>
  </ng-container>
  <ng-template
    tuiMore
    let-index
  >
    and {{ items.length - index - 1 }} more
  </ng-template>
</tui-items-with-more>
```

### Example

```html
<tui-items-with-more
                [itemsLimit]="itemsLimit"
                [linesLimit]="linesLimit"
                [required]="required"
                [side]="side"
            >
                <ng-container *ngFor="let item of items">
                    <tui-chip
                        *tuiItem
                        class="tui-space_right-2 tui-space_vertical-1"
                    >
                        {{ item }}
                    </tui-chip>
                </ng-container>
                <span
                    *tuiMore
                    class="tui-space_right-2 tui-space_vertical-1"
                >
                    <tui-chip appearance="secondary">and now!</tui-chip>
                </span>
            </tui-items-with-more>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| [itemsLimit] | `number` | Artificial limit on visible items |
| [linesLimit] | `number` | Limit on visible lines |
| [required] | `number` | Index of an item that must remain visible |
| [side] | `number` | Side of the "See more" content (for one-line mode only) |

### TypeScript

```ts
import {Component, inject} from '@angular/core';
import {changeDetection} from '@demo/emulate/change-detection';
import {TuiDemo} from '@demo/utils';
import {TuiChip, TuiItemsWithMore} from '@taiga-ui/kit';

@Component({
    standalone: true,
    imports: [TuiChip, TuiDemo, TuiItemsWithMore],
    templateUrl: './index.html',
    changeDetection,
})
export default class Page {
    protected readonly examples = ['Basic', 'Dropdown', 'Side', 'Multiline'];
    protected readonly items = inject<readonly string[]>('Pythons' as any);
    protected readonly requiredVariants = [-1, 2, 4];
    protected readonly itemsLimitVariants = [Infinity, 4, 2];
    protected readonly linesLimitVariants = [1, 2, Infinity];
    protected readonly sideVariants = ['start', 'end'] as const;
    protected side: 'end' | 'start' = this.sideVariants[1];
    protected required = this.requiredVariants[0]!;
    protected itemsLimit = this.itemsLimitVariants[0]!;
    protected linesLimit = this.linesLimitVariants[0]!;
}
```

---

# components/Label

- **Package**: `CORE`
- **Type**: components

Label is used to show text related to textfields, checkboxes, toggles and radio buttons


### How to Use (Import)

```ts
import {FormsModule} from '@angular/forms';
import {TuiLabel} from '@taiga-ui/core';
import {TuiCheckbox} from '@taiga-ui/kit';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    FormsModule,
    TuiCheckbox,
    TuiLabel,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<label tuiLabel>
  <input
    tuiCheckbox
    type="checkbox"
    size="s"
    [(ngModel)]="selected"
  />
  Label text
</label>
```

---

# components/LegendItem

- **Package**: `ADDON-CHARTS`
- **Type**: components

A button for a legend of ring or pie charts


### How to Use (Import)

```ts
import {TuiLegendItem} from '@taiga-ui/addon-charts';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiLegendItem,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<tui-legend-item [value]="value">Content</tui-legend-item>
```

### Example

```html
<tui-legend-item
                [active]="active"
                [color]="color"
                [disabled]="disabled"
                [size]="size"
                [text]="text"
            >
                <span>{{ 123456 | tuiAmount: 'RUB' | async }}</span>
            </tui-legend-item>
            <p>
                <code>tuiAmount</code>
                pipe is used to format currency and fraction
            </p>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| [active] | `boolean` | Active state from outside |
| [color] | `TuiColor | string | null` | Indicator color |
| [disabled] | `boolean` | Disabled item (i.e. hidden from the related chart) |
| [size] | `TuiSizeS` | Size |
| [value] | `string` | Text inside |

### TypeScript

```ts
import {Component} from '@angular/core';
import {changeDetection} from '@demo/emulate/change-detection';
import {TuiDemo} from '@demo/utils';
import {TuiLegendItem} from '@taiga-ui/addon-charts';
import {TuiAmountPipe} from '@taiga-ui/addon-commerce';
import type {TuiSizeS} from '@taiga-ui/core';

@Component({
    standalone: true,
    imports: [TuiAmountPipe, TuiDemo, TuiLegendItem],
    templateUrl: './index.html',
    changeDetection,
})
export default class Page {
    protected text = 'Text inside';

    protected active = false;

    protected readonly sizeVariants: readonly TuiSizeS[] = ['s', 'm'];

    protected readonly colorVariants: readonly string[] = [
        'var(--tui-chart-categorical-04)',
        'var(--tui-background-accent-1)',
        'var(--tui-background-neutral-1)',
    ];

    protected size = this.sizeVariants[0]!;

    protected disabled = false;

    protected color = '';
}
```

---

# components/Like

- **Package**: `KIT`
- **Type**: components

A like component based on native checkbox with icons and custom color for icon when
            :checked
            state.


### How to Use (Import)

```ts
import {Component} from '@angular/core';
import {TuiLike} from '@taiga-ui/kit';
// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiLike,
  ],
})
export class Example {}
```
### How to Use (Template)

```html
<input
  tuiLike
  type="checkbox"
/>
```

---

# components/LineChart

- **Package**: `ADDON-CHARTS`
- **Type**: components


### How to Use (Import)

```ts
import {TuiLineChart} from '@taiga-ui/addon-charts';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiLineChart,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<tui-line-chart
  [x]="0"
  [y]="0"
  [width]="200"
  [height]="100"
  [value]="value"
></tui-line-chart>
```

### Example

```html
<tui-axes
                class="axes"
                [horizontalLines]="2"
                [verticalLines]="4"
            >
                <tui-line-chart
                    [dots]="dots"
                    [filled]="filled"
                    [height]="height"
                    [smoothingFactor]="smoothingFactor"
                    [value]="value"
                    [width]="width"
                    [x]="x"
                    [xStringify]="xStringify"
                    [y]="y"
                    [yStringify]="yStringify"
                />
            </tui-axes>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| [dots] | `boolean` | Show dots on chart |
| [filled] | `boolean` | Filled with gradient |
| [height] | `number` | Axis Y range, pixel scale is 1:1 |
| [y] | `number` | Start of Y axis |
| [width] | `number` | Axis X range, pixel scale is 1:1 |
| [x] | `number` | Start of X axis |
| [smoothingFactor] | `number` | Smoothing factor from 0 to 99 |
| [value] | `TuiPoint[]` | Array of data |
| [xStringify] | `TuiStringHandler<number> | null` | Function to stringify a value number to a string in axis X hint |
| [yStringify] | `TuiStringHandler<number> | null` | Function to stringify a value number to a string in axis Y hint |

### TypeScript

```ts
import {Component} from '@angular/core';
import {changeDetection} from '@demo/emulate/change-detection';
import {TuiDemo} from '@demo/utils';
import {TuiAxes, TuiLineChart} from '@taiga-ui/addon-charts';
import type {TuiStringHandler} from '@taiga-ui/cdk';
import type {TuiPoint} from '@taiga-ui/core';

@Component({
    standalone: true,
    imports: [TuiAxes, TuiDemo, TuiLineChart],
    templateUrl: './index.html',
    styleUrls: ['./index.less'],
    changeDetection,
})
export default class Page {
    protected readonly examples = [
        'Line',
        'Smooth',
        'Dotted',
        'Hint',
        'Several lines with hints',
    ];

    protected readonly value: readonly TuiPoint[] = [
        [50, 50],
        [100, 75],
        [150, 50],
        [200, 150],
        [250, 155],
        [300, 190],
        [350, 90],
    ];

    protected readonly yStringifyVariants: ReadonlyArray<TuiStringHandler<number>> = [
        (y) => `${(10 * y).toLocaleString('ru-RU', {maximumFractionDigits: 0})} $`,
    ];

    protected readonly xStringifyVariants: ReadonlyArray<TuiStringHandler<number>> = [
        (x) => `${100 * x}`,
    ];

    protected yStringify: TuiStringHandler<number> | null = null;

    protected xStringify: TuiStringHandler<number> | null = null;

    protected x = 0;

    protected y = 0;

    protected width = 400;

    protected height = 200;

    protected smoothingFactor = 0;

    protected filled = false;

    protected dots = false;
}
```
### LESS

```less
.axes {
    block-size: 12.5rem;
    inline-size: 25rem;
    color: #bc71c9;
}
```

---

# components/LineClamp

- **Package**: `KIT`
- **Type**: components

Component cuts overflown text with "..." and shows it by hover


### How to Use (Import)

```ts
import {TuiLineClamp} from '@taiga-ui/kit';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiLineClamp,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<tui-line-clamp
  [content]="content"
  [linesLimit]="3"
></tui-line-clamp>
<ng-template #content>
  Lorem ipsum
  <br />
  Gaudeamus igitur
  <br />
  <strong>Carpe diem</strong>
  <br />
  Veni, vidi, vici
</ng-template>
```

### Example

```html
<tui-line-clamp
                [content]="content || defaultExampleContent"
                [lineHeight]="lineHeight"
                [linesLimit]="linesLimit"
                [style.maxWidth.px]="maxWidth"
                (overflownChange)="overflownChange.emitEvent($event)"
            />
            <ng-template #defaultExampleContent>
                Lorem ipsum
                <br />
                Gaudeamus igitur
                <br />
                <strong>Carpe diem</strong>
                <br />
                Veni, vidi, vici
            </ng-template>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| [content] | `PolymorpheusContent` | Content |
| [lineHeight] | `number` | Height of single line. It used to limit component's height. |
| [linesLimit] | `number` | Number of visible lines |
| [style.max-width.px] | `number` | Value of max-width |
| (overflownChange) | `boolean` | when all content is visible. |

### TypeScript

```ts
import {Component} from '@angular/core';
import {changeDetection} from '@demo/emulate/change-detection';
import {TuiDemo} from '@demo/utils';
import {TuiLineClamp} from '@taiga-ui/kit';

@Component({
    standalone: true,
    imports: [TuiDemo, TuiLineClamp],
    templateUrl: './index.html',
    styleUrls: ['./index.less'],
    changeDetection,
})
export default class Page {
    protected linesLimit = 1;
    protected lineHeight = 24;
    protected maxWidth = 100;
    protected content = '';
}
```
### LESS

```less
.text {
    max-inline-size: 60%;
}
```

---

# components/LineDaysChart

- **Package**: `ADDON-CHARTS`
- **Type**: components

Line chart but for days


### How to Use (Import)

```ts
import {TuiLineDaysChart} from '@taiga-ui/addon-charts';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiLineDaysChart,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<tui-line-days-chart
  [y]="0"
  [height]="100"
  [value]="value"
></tui-line-days-chart>
```

### Example

```html
<tui-axes
                class="axes"
                [axisXLabels]="(labels$ | async) || []"
                [horizontalLines]="4"
                [verticalLines]="3"
            >
                <tui-line-days-chart
                    [dots]="dots"
                    [height]="height"
                    [hintContent]="hintContent"
                    [smoothingFactor]="smoothingFactor"
                    [value]="value"
                    [xStringify]="xStringify"
                    [y]="y"
                    [yStringify]="yStringify"
                />
            </tui-axes>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| dots | `boolean` | Show dots on chart |
| hintContent | `PolymorpheusContent` | Content of hint for hover. It has $implicit in context with a tuple [TuiDay, number] |
| height | `number` | Axis Y range, pixel scale is 1:1 |
| y | `number` | Start of Y axis |
| smoothingFactor | `number` | Smoothing factor from 0 to 99 |
| value | `[TuiDay, number][]` | Array of data |
| xStringify | `TuiStringHandler<TuiDay> | null` | | null" [documentationPropertyValues]="xStringifyVariants$ | async" [(documentationPropertyValue)]="xStringify" > Function to stringify a value number to a string in axis X hint |
| yStringify | `TuiStringHandler<number> | null` | | null" [documentationPropertyValues]="yStringifyVariants" [(documentationPropertyValue)]="yStringify" > Function to stringify a value number to a string in axis Y hint |

### TypeScript

```ts
import {Component, inject} from '@angular/core';
import {changeDetection} from '@demo/emulate/change-detection';
import {TuiDemo} from '@demo/utils';
import {TuiAxes, TuiLineDaysChart} from '@taiga-ui/addon-charts';
import type {TuiContext, TuiStringHandler} from '@taiga-ui/cdk';
import {TuiDay} from '@taiga-ui/cdk';
import {TUI_MONTHS} from '@taiga-ui/core';
import type {PolymorpheusContent} from '@taiga-ui/polymorpheus';
import type {Observable} from 'rxjs';
import {map} from 'rxjs';

@Component({
    standalone: true,
    imports: [TuiAxes, TuiDemo, TuiLineDaysChart],
    templateUrl: './index.html',
    styleUrls: ['./index.less'],
    changeDetection,
})
export default class Page {
    protected readonly months$ = inject(TUI_MONTHS);

    protected readonly valueVariants: ReadonlyArray<ReadonlyArray<[TuiDay, number]>> = [
        new Array(91)
            .fill(0)
            .reduce<
                ReadonlyArray<[TuiDay, number]>
            >((array, _, i) => [...array, [new TuiDay(2020, 0, 1).append({day: i}), (i ? (array[i - 1]?.[1] ?? 0) : 100) + Math.random() * 20 - 10]], []),
        [
            [new TuiDay(2020, 1, 10), 10],
            [new TuiDay(2020, 1, 15), 150],
            [new TuiDay(2020, 1, 17), 10],
            [new TuiDay(2020, 1, 20), 10],
            [new TuiDay(2020, 1, 25), 150],
            [new TuiDay(2020, 1, 27), 10],
        ],
    ];

    protected value = this.valueVariants[0]!;

    protected readonly labels$: Observable<readonly string[]> = this.months$.pipe(
        map((months) => Array.from({length: 4}, (_, i) => months[i] ?? '')),
    );

    protected readonly yStringifyVariants: ReadonlyArray<TuiStringHandler<number>> = [
        (y) => `${(10 * y).toLocaleString('en-US', {maximumFractionDigits: 0})} $`,
    ];

    protected readonly xStringifyVariants$: Observable<
        ReadonlyArray<TuiStringHandler<TuiDay>>
    > = this.months$.pipe(
        map((months) => [({month, day}) => `${months[month]}, ${day}`]),
    );

    protected readonly hintContentVariants$: Observable<
        ReadonlyArray<PolymorpheusContent<TuiContext<[TuiDay, number]>>>
    > = this.months$.pipe(
        map((months) => [
            '',
            ({$implicit}) =>
                `${months[$implicit[0].month]}, ${$implicit[0].day}\n${(
                    10 * $implicit[1]
                ).toLocaleString('en-US', {
                    maximumFractionDigits: 0,
                })} $`,
        ]),
    );

    protected yStringify: TuiStringHandler<number> | null = null;

    protected xStringify: TuiStringHandler<TuiDay> | null = null;

    protected hintContent: PolymorpheusContent<TuiContext<[TuiDay, number]>> = '';

    protected dots = false;

    protected smoothingFactor = 0;

    protected y = 0;

    protected height = 200;
}
```
### LESS

```less
.axes {
    block-size: 12.5rem;
    inline-size: 45.5rem;
    color: #bc71c9;
}
```

---

# components/Link

- **Package**: `CORE`
- **Type**: components

Link component. It has focus highlight and can be customized with an icon


### How to Use (Import)

```ts
import {TuiLink} from '@taiga-ui/core';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiLink,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<a
  tuiLink
  href="#"
>
  Link
</a>

<a
  tuiLink
  iconStart="@tui.settings"
  href="#"
>
  Link with an icon on the left
</a>
```

---

# components/Loader

- **Package**: `CORE`
- **Type**: components


### How to Use (Import)

```ts
import {TuiLoader} from '@taiga-ui/core';

@Component({
  standalone: true,
  imports: [
    // ...
    TuiLoader,
  ],
  providers: [
    tuiLoaderOptionsProvider({
      size: 'l',
      inheritColor: false,
      overlay: true,
    }),
  ],
})
export class Example {}
```
### How to Use (Template)

```html
<tui-loader [showLoader]="loader">Let off some steam, Bennett</tui-loader>
```

### Example

```html
<div class="example">
                <tui-loader
                    [inheritColor]="inheritColor"
                    [overlay]="overlay"
                    [showLoader]="showLoader"
                    [size]="size"
                    [textContent]="template"
                >
                    <div>
                        <b>Colonel Trautman:</b>
                        It's over Johnny. It's over!
                    </div>
                    <div>
                        <b>Rambo:</b>
                        Nothing is over! Nothing! You just don't turn it off! It wasn't my war! You asked me I didn't
                        ask you! And I did what I had to do to win, for somebody who wouldn't let us win! Then I come
                        back to the world, and I see all those maggots at the airport, protestin' me, spittin', callin'
                        me a baby killer and all kinds of vile crap! Who are they to protest me?! Huh?! Who are they?!
                        Unless they been me and been there and know what the hell they yellin' about!
                    </div>
                </tui-loader>
                <ng-template #textTemplate>
                    <div>Loading</div>
                    <div>
                        You can use a template with
                        <a
                            tuiLink
                            [routerLink]="routes.Notification"
                        >
                            HTML
                        </a>
                        here
                    </div>
                </ng-template>
            </div>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| [showLoader] | `boolean` | Show/hide loader |
| [inheritColor] | `boolean` | Inherit parent color |
| [overlay] | `boolean` | Content overlay when loader is showed |
| [size] | `TuiSizeXS | TuiSizeXL` | Size |
| [textContent] | `PolymorpheusContent` | Custom content under loader |

### TypeScript

```ts
import {Component, ViewChild} from '@angular/core';
import {changeDetection} from '@demo/emulate/change-detection';
import {DemoRoute} from '@demo/routes';
import {TuiDemo} from '@demo/utils';
import type {TuiSizeXS, TuiSizeXXL} from '@taiga-ui/core';
import {TuiLoader} from '@taiga-ui/core';
import type {PolymorpheusContent} from '@taiga-ui/polymorpheus';

@Component({
    standalone: true,
    imports: [TuiDemo, TuiLoader],
    templateUrl: './index.html',
    styleUrls: ['./index.less'],
    changeDetection,
})
export default class Page {
    @ViewChild('textTemplate')
    protected readonly textTemplate: PolymorpheusContent;

    protected readonly routes = DemoRoute;

    protected showLoader = true;

    protected inheritColor = false;

    protected overlay = false;

    protected readonly sizeVariants: ReadonlyArray<TuiSizeXS | TuiSizeXXL> = [
        'xs',
        's',
        'm',
        'l',
        'xl',
        'xxl',
    ];

    protected size = this.sizeVariants[2]!;

    protected selectedTemplate = '';

    protected readonly textVariants: string[] = ['', 'template', 'string'];

    protected get template(): PolymorpheusContent {
        switch (this.selectedTemplate) {
            case 'string': {
                return 'string';
            }
            case 'template': {
                return this.textTemplate || '';
            }
            default: {
                return '';
            }
        }
    }
}
```
### LESS

```less
.example {
    padding: 1.25rem;
    background: var(--tui-background-neutral-1);
}
```

---

# components/Message

- **Package**: `KIT`
- **Type**: components

Message component is used to display message block.


### How to Use (Import)

```ts
import {Component} from '@angular/core';
import {TuiMessage} from '@taiga-ui/kit';
// ...

@Component({
  imports: [
    // ...
    TuiMessage,
  ],
})
export class Example {}
```
### How to Use (Template)

```html
<span tuiMessage>{{ value }}</span>
```

### Example

```html
<span
                tuiMessage
                [appearance]="appearance.appearance"
            >
                Message
            </span>
```

### TypeScript

```ts
import {Component} from '@angular/core';
import {TuiDocAppearance} from '@demo/components/appearance';
import {changeDetection} from '@demo/emulate/change-detection';
import {TuiDemo} from '@demo/utils';
import {TuiMessage} from '@taiga-ui/kit';

@Component({
    standalone: true,
    imports: [TuiDemo, TuiDocAppearance, TuiMessage],
    templateUrl: './index.html',
    changeDetection,
})
export default class Example {
    protected readonly examples = [
        'Basic',
        'Custom color',
        'With link',
        'Chat messages',
        'Inside cells',
    ];
}
```

---

# components/MobileCalendar

- **Package**: `ADDON-MOBILE`
- **Type**: components

A calendar for mobile devices. It is used in date picker controls if provided with
            tuiProvideMobileCalendar()
        
        
            You can use
            TUI_CALENDAR_DATE_STREAM
            token to set value from outside (see samples)


### How to Use (Import)

```ts
import {TuiMobileCalendar, tuiProvideMobileCalendar} from '@taiga-ui/addon-mobile';
import {TuiInputDateModule} from '@taiga-ui/legacy';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiMobileCalendar,
  ],
  // If you want it in date picker inputs
  providers: [tuiProvideMobileCalendar()],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<tui-mobile-calendar
  [min]="min"
  [max]="max"
  [disabledItemHandler]="disabledItemHandler"
></tui-mobile-calendar>
```

### Example

```html
<tui-mobile-calendar
                class="calendar"
                [disabledItemHandler]="disabledItemHandler"
                [max]="max"
                [min]="min"
                [multi]="multi"
                [single]="single"
                (cancel)="documentationPropertyCancel.emitEvent($event)"
                (confirm)="documentationPropertyConfirm.emitEvent($event)"
            />
```

### API

| Property | Type | Description |
|----------|-----|----------|
| value | `TuiDay | TuiDayRange | readonly TuiDay[] | null` | Value |
| disabledItemHandler | `TuiBooleanHandler<TuiDay>` | " [documentationPropertyValues]="disabledItemHandlerVariants" [(documentationPropertyValue)]="disabledItemHandler" > A handler that gets a date and returns true if it is disabled. Must be a pure function |
| max | `TuiDay` | Max date |
| min | `TuiDay` | Min date |
| multi | `boolean` | Array of single dates |
| cancel | `void` | "Cancel" clicked |
| confirm | `TuiDayRange | TuiDay` | "Confirm" button clicked |
| single | `boolean` | Single date or a range Use tuiCalendarSheetOptionsProvider(&#123;rangeMode: boolean"&#125;) instead |

### TypeScript

```ts
import {Component} from '@angular/core';
import {FormControl} from '@angular/forms';
import {changeDetection} from '@demo/emulate/change-detection';
import {DemoRoute} from '@demo/routes';
import {TuiDemo} from '@demo/utils';
import {TuiMobileCalendar} from '@taiga-ui/addon-mobile';
import type {TuiBooleanHandler, TuiDayRange} from '@taiga-ui/cdk';
import {
    TUI_FALSE_HANDLER,
    TUI_FIRST_DAY,
    TUI_LAST_DAY,
    tuiControlValue,
    TuiDay,
} from '@taiga-ui/cdk';
import {TUI_CALENDAR_DATE_STREAM} from '@taiga-ui/kit';
import type {Observable} from 'rxjs';

@Component({
    standalone: true,
    imports: [TuiDemo, TuiMobileCalendar],
    templateUrl: './index.html',
    styleUrls: ['./index.less'],
    changeDetection,
    providers: [
        {
            deps: [Page],
            provide: TUI_CALENDAR_DATE_STREAM,
            useFactory: (component: Page): Observable<TuiDay> => component.stream,
        },
    ],
})
export default class Page {
    protected minVariants = [
        TUI_FIRST_DAY,
        new TuiDay(2017, 2, 5),
        new TuiDay(1900, 0, 1),
    ];

    protected min = this.minVariants[0]!;

    protected maxVariants = [
        TUI_LAST_DAY,
        new TuiDay(2020, 2, 5),
        new TuiDay(2300, 0, 1),
    ];

    protected max = this.maxVariants[0]!;

    protected single = true;
    protected multi = false;

    protected readonly disabledItemHandlerVariants: ReadonlyArray<
        TuiBooleanHandler<TuiDay>
    > = [TUI_FALSE_HANDLER, ({day}) => day % 3 === 0];

    protected disabledItemHandler = this.disabledItemHandlerVariants[0]!;

    protected control = new FormControl<TuiDay | TuiDayRange | null>(null);

    protected stream = tuiControlValue<TuiDay>(this.control);
    protected readonly routes = DemoRoute;
}
```
### LESS

```less
.calendar {
    block-size: min(28.75rem, 60vh);
}
```

---

# components/MobileDialog

- **Package**: `ADDON-MOBILE`
- **Type**: components

Component for showing a dialog on mobile devices. It emulates appearance of native alerts on iOS and Android


### How to Use (Template)

```ts
constructor(private readonly dialogs: TuiMobileDialogService) {}

// ...

this.dialogs
    .open(
        'Text',
        {
            label: 'Heading',
            actions: ['Button 1', 'Button 2'],
            data: 'Some data'
        },
    )
    .subscribe(index => {
        // Index of clicked button
        console.log(index);
    });
```

---

# components/MultiSelect

- **Package**: `LEGACY`
- **Type**: components

MultiSelect
            is a textfield with a dropdown for choosing several items


### How to Use (Import)

```ts
import {FormsModule, ReactiveFormsModule} from '@angular/forms';
import {TuiDataList} from '@taiga-ui/core';
import {TuiDataListWrapper} from '@taiga-ui/kit';
import {TuiMultiSelectModule} from '@taiga-ui/legacy';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    FormsModule,
    ReactiveFormsModule,
    TuiMultiSelectModule,
    TuiDataList,
    TuiDataListWrapper,
  ],
  // ...
})
export class Example {
  testForm = new FormGroup({
    testValue: new FormControl(),
  });
}
```
### How to Use (Template)

```html
<form [formGroup]="testForm">
  <tui-multi-select formControlName="testValue">
    <tui-data-list-wrapper
      *tuiDataList
      tuiMultiSelectGroup
      [items]="items"
    ></tui-data-list-wrapper>
  </tui-multi-select>
</form>
```

### Example

```html
<ng-template>
                <tui-multi-select
                    [autoColor]="autoColor"
                    [disabledItemHandler]="disabledItemHandler"
                    [editable]="editable"
                    [focusable]="focusable"
                    [formControl]="control"
                    [identityMatcher]="identityMatcher"
                    [placeholder]="exampleText"
                    [pseudoActive]="pseudoPressed"
                    [pseudoFocus]="pseudoFocused"
                    [pseudoHover]="pseudoHovered"
                    [pseudoInvalid]="pseudoInvalid"
                    [readOnly]="readOnly"
                    [rows]="rows"
                    [stringify]="stringify"
                    [tagValidator]="tagValidator"
                    [tuiDropdownAlign]="dropdownAlign"
                    [tuiDropdownDirection]="dropdownDirection"
                    [tuiDropdownLimitWidth]="dropdownLimitWidth"
                    [tuiDropdownMaxHeight]="dropdownMaxHeight"
                    [tuiDropdownMinHeight]="dropdownMinHeight"
                    [tuiDropdownOffset]="dropdownOffset"
                    [tuiDropdownOpen]="!!(dropdownOpen | async)"
                    [tuiHintAppearance]="hintAppearance"
                    [tuiHintContent]="hintContent"
                    [tuiHintDirection]="hintDirection"
                    [tuiTextfieldCleaner]="cleaner"
                    [tuiTextfieldIconLeft]="iconStart"
                    [tuiTextfieldLabelOutside]="labelOutside"
                    [tuiTextfieldSize]="size"
                    [valueContent]="valueContent"
                    [(search)]="search"
                    (tuiDropdownOpenChange)="dropdownOpen.next($event)"
                >
                    Choose an account
                    <tui-data-list-wrapper
                        *tuiDataList
                        tuiMultiSelectGroup
                        [disabledItemHandler]="disabledItemHandler"
                        [items]="items"
                    />
                </tui-multi-select>
            </ng-template>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| disabled | `boolean` | Disabled state (use formControl.disable() ) |
| search | `string | null` | Textfield value to subscribe on input or setting it from the outside (emits null when item from list selected) |
| disabledItemHandler | `TuiBooleanHandler<T>` | " [documentationPropertyValues]="disabledItemHandlerVariants" [(documentationPropertyValue)]="disabledItemHandler" > Handler for deactivation some items |
| editable | `boolean` | Textfield can be use for typing |
| rows | `number` | A number of visible rows |
| identityMatcher | `TuiIdentityMatcher` | A function that compares search and value to define a match between them. Must be a pure function |
| stringify | `TuiStringHandler` | A function that transforms object into a string. String(value) by default. Should be a pure function |
| valueContent | `PolymorpheusContent` | A template for custom view of selected value |
| tagValidator | `TuiBooleanHandler<T>` | " [documentationPropertyValues]="tagValidatorVariants" [(documentationPropertyValue)]="tagValidator" > A function that checks that tag is valid |
| autoColor | `boolean` | Auto color for tags ( autoColor = true does not work together with labelOutside ==== false : use only outside labels) |
| placeholder | `string` | Placeholder |

### TypeScript

```ts
import {Component} from '@angular/core';
import {FormControl, ReactiveFormsModule} from '@angular/forms';
import {changeDetection} from '@demo/emulate/change-detection';
import {TuiDemo} from '@demo/utils';
import {tuiDocExcludeProperties} from '@taiga-ui/addon-doc';
import type {
    TuiBooleanHandler,
    TuiContext,
    TuiIdentityMatcher,
    TuiStringHandler,
} from '@taiga-ui/cdk';
import {TUI_FALSE_HANDLER, TUI_TRUE_HANDLER, tuiProvide} from '@taiga-ui/cdk';
import type {TuiSizeL, TuiSizeS} from '@taiga-ui/core';
import {TuiButton, TuiDataList, TuiDropdown, TuiHint, TuiLink} from '@taiga-ui/core';
import {TuiDataListWrapper} from '@taiga-ui/kit';
import {TuiMultiSelectModule, TuiTextfieldControllerModule} from '@taiga-ui/legacy';
import type {PolymorpheusContent} from '@taiga-ui/polymorpheus';

import {ABSTRACT_PROPS_ACCESSOR} from '../abstract/abstract-props-accessor';
import {AbstractExampleTuiControl} from '../abstract/control';
import {InheritedDocumentation} from '../abstract/inherited-documentation';

class Account {
    constructor(
        public readonly name: string,
        public readonly balance: number,
    ) {}

    protected toString(): string {
        return `${this.name} (${this.balance})`;
    }
}

@Component({
    standalone: true,
    imports: [
        InheritedDocumentation,
        ReactiveFormsModule,
        TuiButton,
        TuiDataList,
        TuiDataListWrapper,
        TuiDemo,
        TuiDropdown,
        TuiHint,
        TuiLink,
        TuiMultiSelectModule,
        TuiTextfieldControllerModule,
    ],
    templateUrl: './index.html',
    styleUrls: ['./index.less'],
    changeDetection,
    providers: [
        tuiProvide(ABSTRACT_PROPS_ACCESSOR, PageComponent),
        tuiDocExcludeProperties([
            'tuiTextfieldPrefix',
            'tuiTextfieldPostfix',
            'tuiTextfieldFiller',
            'tuiTextfieldCustomContent',
        ]),
    ],
})
export default class PageComponent extends AbstractExampleTuiControl {
    protected readonly examples = [
        'Strings array',
        'Objects array',
        'Sizes',
        'With IDs',
        'Datalist',
        'Direction: RTL',
        'Virtual scroll',
        'Options (stringify)',
        'Inside dialog',
        'Native select',
        'Value content',
        'Nested datalist',
        'Long items',
        'Readonly',
        'Multi group with separate data list',
    ];

    protected readonly items = [
        new Account('Ruble', 500),
        new Account('Dollar', 500),
        new Account('Euro', 500),
        new Account('Pounds', 500),
        new Account('Yuan', 237),
    ];

    protected rows = 100;

    protected editable = true;

    protected search: string | null = '';

    protected readonly iconVariants = [
        '',
        '@tui.search',
        '@tui.pie-chart',
        '@tui.credit-card',
    ];

    protected stringifyVariants: Array<TuiStringHandler<Account | string>> = [
        String,
        (item) => String(/\d+/.exec(String(item))),
    ];

    protected stringify = this.stringifyVariants[0]!;

    protected identityMatcherVariants: ReadonlyArray<TuiIdentityMatcher<Account>> = [
        (item1, item2) => item1 === item2,
        (item1, item2) => item1.balance === item2.balance,
    ];

    protected identityMatcher = this.identityMatcherVariants[0]!;

    protected tagValidatorVariants: ReadonlyArray<TuiBooleanHandler<Account>> = [
        TUI_TRUE_HANDLER,
        (item) => item.balance > 300,
        (item) => !item.name.startsWith('Pounds'),
    ];

    protected tagValidator = this.tagValidatorVariants[0]!;

    protected autoColor = false;

    protected readonly valueContentVariants: ReadonlyArray<
        PolymorpheusContent<TuiContext<readonly Account[]>>
    > = ['', ({$implicit: {length}}) => `Selected: ${length}`];

    protected valueContent = this.valueContentVariants[0];

    protected readonly disabledItemHandlerVariants: ReadonlyArray<
        TuiBooleanHandler<Account>
    > = [TUI_FALSE_HANDLER, (item: Account) => item.balance < 300];

    protected disabledItemHandler = this.disabledItemHandlerVariants[0]!;

    public control = new FormControl<Account[] | null>(null);

    public override iconStart = '';

    public override readonly sizeVariants: ReadonlyArray<TuiSizeL | TuiSizeS> = [
        's',
        'm',
        'l',
    ];

    public override size: TuiSizeL | TuiSizeS =
        this.sizeVariants[this.sizeVariants.length - 1]!;

    public override readonly maxLengthVariants: readonly number[] = [10];

    public override maxLength = null;

    public override labelOutside = true;

    protected setValue(): void {
        this.control.setValue([new Account('Dollar', 237)]);
    }
}
```
### LESS

```less
.content {
    display: flex;
    align-items: center;
}

.avatar {
    margin-right: 0.75rem;
}
```

---

# components/Navigation

- **Package**: `LAYOUT`
- **Type**: components

A set of basic layout components for global navigation


### How to Use (Import)

```ts
import {TuiNavigation} from '@taiga-ui/layout';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiNavigation,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<header tuiNavigationHeader>Header content</header>
<aside [tuiNavigationAside]="expanded">Sidebar content</aside>
<main tuiNavigationMain>
  <nav tuiNavigationNav>Breadcrumbs, tabs, buttons</nav>
  Main content
</main>
```

---

# components/Notification

- **Package**: `CORE`
- **Type**: components

An inline message with a type (info, positive, warning, negative or neutral) that does not interrupt user
        actions


### How to Use (Import)

```ts
import {TuiNotification} from '@taiga-ui/core';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiNotification,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<tui-notification appearance="negative">Some content</tui-notification>
```

---

# components/Pager

- **Package**: `KIT`
- **Type**: components


### How to Use (Import)

```ts
import {Component} from '@angular/core';
import {TuiPager} from '@taiga-ui/kit';
// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiPager,
  ],
})
export class Example {}
```
### How to Use (Template)

```html
<tui-pager
  [index]="index"
  [count]="count"
/>
```

### Example

```html
<tui-pager
                [count]="count"
                [index]="index"
                [max]="max"
                [size]="size"
                [valueContent]="valueContent"
            />

            <ng-template #templateRef>
                <tui-icon icon="@tui.heart-filled" />
            </ng-template>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| [size] | `'m' | 's'` | Layout size |
| [index] | `number` | Current active dot |
| [max] | `number` | Max visible dots |
| [count] | `number` | Count of dots |
| [valueContent] | `TemplateRef` | A template for custom view |

### TypeScript

```ts
import type {TemplateRef} from '@angular/core';
import {Component, ViewChild} from '@angular/core';
import {changeDetection} from '@demo/emulate/change-detection';
import {TuiDemo} from '@demo/utils';
import type {TuiSizeS} from '@taiga-ui/core';
import {TuiIcon} from '@taiga-ui/core';
import {TuiPager} from '@taiga-ui/kit';

@Component({
    standalone: true,
    imports: [TuiDemo, TuiIcon, TuiPager],
    templateUrl: './index.html',
    changeDetection,
})
export default class Page {
    @ViewChild('templateRef')
    protected templateRef?: TemplateRef<unknown>;

    protected readonly examples = ['Basic', 'Icons', 'Dynamic width'];

    protected index = 0;

    protected max = 6;

    protected sizes: TuiSizeS[] = ['m', 's'];

    protected size = this.sizes[0]!;

    protected countVariants = [10, 15, 1, 2, 3, 4, 5, 6, 8, 100];

    protected count = this.countVariants[0]!;

    protected templateVariants = ['', 'Template'];
    protected selectedTemplate = this.templateVariants[0]!;

    protected get valueContent(): TemplateRef<unknown> | undefined {
        return this.templateRef && this.selectedTemplate ? this.templateRef : undefined;
    }
}
```

---

# components/Pagination

- **Package**: `KIT`
- **Type**: components

Pagination component enables the user to select a specific page from a range of pages


### How to Use (Import)

```ts
import {TuiPagination} from '@taiga-ui/kit';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiPagination,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<tui-pagination
  [length]="pageCount"
  [index]="currentPage"
  (indexChange)="goToPage($event)"
></tui-pagination>
```

### Example

```html
<tui-pagination
                [activePadding]="activePadding"
                [focusable]="focusable"
                [length]="length"
                [sidePadding]="sidePadding"
                [size]="size"
                [(index)]="index"
            />
```

### API

| Property | Type | Description |
|----------|-----|----------|
| focusable | `boolean` | Accepts focus with keyboard |
| index | `number` | Active page index |
| length | `number` | Total pages count |
| size | `TuiSizeS | TuiSizeL` | Size |
| activePadding | `number` | Amount of visible pages around active page |
| sidePadding | `number` | Amount of visible pages at the edges |

### TypeScript

```ts
import {Component} from '@angular/core';
import {changeDetection} from '@demo/emulate/change-detection';
import {TuiDemo} from '@demo/utils';
import type {TuiSizeL, TuiSizeS} from '@taiga-ui/core';
import {TuiPagination} from '@taiga-ui/kit';

@Component({
    standalone: true,
    imports: [TuiDemo, TuiPagination],
    templateUrl: './index.html',
    changeDetection,
})
export default class Page {
    protected focusable = true;
    protected index = 0;
    protected length = 8;
    protected readonly sizeVariants: ReadonlyArray<TuiSizeL | TuiSizeS> = ['s', 'm', 'l'];
    protected size = this.sizeVariants[2]!;
    protected activePadding = 1;
    protected sidePadding = 1;
}
```

---

# components/PdfViewer

- **Package**: `KIT`
- **Type**: components

Custom dialog to preview PDF

        
            PDF display in browsers is handled by each browser independently, using their own homegrown or 3rd-party
            code, as this is not part of the HTML spec. Keep in mind most mobile devices do not support displaying PDFs
            in iframe. Check it
            
                here
            
            . The only way to enforce rendering consistency in all browsers is to do the rendering server-side, bundle
            your own JS PDF renderer, or use a 3rd-party rendering service. If you want to display it yourself, so you
            need to rely on
            TUI_IS_MOBILE
            token to provide suitable alternative behavior. For example, you can use third-party service
            https://drive.google.com/viewerng/viewer?embedded=true&url=$YOUR_PUBLIC_PATH_TO_PDF
            or your own service to render PDF by
            
                pdf.js.


---

# components/PieChart

- **Package**: `ADDON-CHARTS`
- **Type**: components


### How to Use (Import)

```ts
import {TuiPieChart} from '@taiga-ui/addon-charts';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiPieChart,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<tui-pie-chart [value]="value"></tui-pie-chart>
```

### Example

```html
<tui-pie-chart
                class="chart"
                [size]="size"
                [value]="value"
                [(activeItemIndex)]="activeItemIndex"
            />
```

### API

| Property | Type | Description |
|----------|-----|----------|
| [(activeItemIndex)] | `number` | Active fragment |
| [size] | `TuiSizeS | TuiSizeXL` | Size |
| [value] | `readonly number[]` | Value |

### TypeScript

```ts
import {Component} from '@angular/core';
import {changeDetection} from '@demo/emulate/change-detection';
import {DemoRoute} from '@demo/routes';
import {TuiDemo} from '@demo/utils';
import {TuiPieChart} from '@taiga-ui/addon-charts';
import {TuiCurrency, tuiGetCurrencySymbol} from '@taiga-ui/addon-commerce';
import type {TuiContext} from '@taiga-ui/cdk';
import {tuiRound, tuiSum} from '@taiga-ui/cdk';
import type {TuiSizeXL, TuiSizeXS} from '@taiga-ui/core';
import {tuiFormatNumber} from '@taiga-ui/core';
import type {PolymorpheusContent} from '@taiga-ui/polymorpheus';

@Component({
    standalone: true,
    imports: [TuiDemo, TuiPieChart],
    templateUrl: './index.html',
    styleUrls: ['./index.less'],
    changeDetection,
})
export default class Page {
    protected readonly routes = DemoRoute;
    protected readonly valueVariants = [
        [0, 30, 20, 10],
        [40, 30, 20, 10],
        [13769, 12367, 10172, 3018, 2592],
    ];

    protected value = this.valueVariants[0]!;

    protected readonly activeItemIndexVariants = [NaN, 0, 1, 2];

    protected activeItemIndex = this.activeItemIndexVariants[0]!;

    protected readonly sizeVariants: ReadonlyArray<TuiSizeXL | TuiSizeXS> = [
        'xs',
        's',
        'm',
        'l',
        'xl',
    ];

    protected size = this.sizeVariants[2]!;

    protected readonly contentVariants: ReadonlyArray<
        PolymorpheusContent<TuiContext<number>>
    > = [
        '',
        ({$implicit}) => this.getPercent($implicit),
        ({$implicit}) => this.format($implicit),
    ];

    protected hintContent = this.contentVariants[0]!;

    protected getPercent(index: number): string {
        return `${tuiRound((100 * (this.value[index] ?? 0)) / tuiSum(...this.value), 2)} %`;
    }

    protected format(index: number): string {
        return `${tuiFormatNumber(this.value[index] ?? 0)} ${tuiGetCurrencySymbol(
            TuiCurrency.Ruble,
        )}`;
    }
}
```
### LESS

```less
.chart {
    margin: 0 auto;
}
```

---

# components/Pin

- **Package**: `KIT`
- **Type**: components

Pins are used to show a location on a 2D plane. Use
            color
            ,
            background
            ,
            border
            and
            box-shadow
            to customize the pin
        

        
            Pins are designed to be absolutely positioned on map or similar medium, therefore specifically their center
            is placed where you put them.


### How to Use (Import)

```ts
import {Component} from '@angular/core';
import {TuiPin} from '@taiga-ui/kit';
// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiPin,
  ],
})
export class Example {}
```
### How to Use (Template)

```html
<tui-pin [open]="open">16</tui-pin>
```

---

# components/Preview

- **Package**: `KIT`
- **Type**: components

Preview component allows to open modal for viewing some document and to work with it (download, zoom, rotate
            etc)
        

        As a document you can provide images, embeds and other arbitrary content.

        
            The component automatically adjusts to the mobile device


### How to Use (Import)

```ts
import {, inject, TemplateRef, ViewChild} from '@angular/core';
import {TuiPreviewDialogService} from '@taiga-ui/kit';
import {PolymorpheusContent} from '@taiga-ui/polymorpheus';
import {TuiDialogContext} from '@taiga-ui/core';

@Component({
  // ...
})
export class Example {
  private readonly previewDialogService = inject(TuiPreviewDialogService);

  @ViewChild(`preview`)
  readonly preview: TemplateRef<TuiDialogContext<void>>;

  show() {
    this.previewDialogService.open(this.preview).subscribe();
  }
}
```
### How to Use (Template)

```html
<ng-template #preview>
  <tui-preview>
    <tui-preview-title>{{title}}</tui-preview-title>
    <tui-preview-pagination
      [length]="2"
      [(index)]="index"
    ></tui-preview-pagination>

    <button
      tuiIconButton
      tuiPreviewAction
      icon="@tui.trash"
      title="Delete"
      (click)="delete()"
    ></button>
    <button
      tuiIconButton
      tuiPreviewAction
      icon="@tui.download"
      title="Download"
      (click)="download()"
    ></button>

    <img
      *polymorpheusOutlet="previewContent as src"
      alt=""
      [src]="src"
    />
  </tui-preview>
</ng-template>
```

---

# components/PrimitiveTextfield

- **Package**: `LEGACY`
- **Type**: components

This component is deprecated, use new
            
                Textfield
            
            instead to build your custom textfield controls
        
        
            PrimitiveTextfield is a flexible string input that can be used as a base for complex inputs. Use it as a
            basis for other components.

            Does not work with Angular forms


### How to Use (Import)

```ts
import {TuiPrimitiveTextfieldModule} from '@taiga-ui/legacy';

@Component({
  standalone: true,
  imports: [
    // ...
    TuiPrimitiveTextfieldModule,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<tui-primitive-textfield [(value)]="value">Type something</tui-primitive-textfield>
```

### Example

```html
<tui-primitive-textfield
                [disabled]="disabled"
                [editable]="editable"
                [focusable]="focusable"
                [invalid]="invalid"
                [pseudoActive]="pseudoPressed"
                [pseudoFocus]="pseudoFocused"
                [pseudoHover]="pseudoHovered"
                [readOnly]="readOnly"
                [style.text-align]="textAlign"
                [tuiHintAppearance]="hintAppearance"
                [tuiHintContent]="hintContent"
                [tuiHintDirection]="hintDirection"
                [tuiTextfieldCleaner]="cleaner"
                [tuiTextfieldCustomContent]="customContent"
                [tuiTextfieldFiller]="filler"
                [tuiTextfieldIcon]="iconContent"
                [tuiTextfieldIconLeft]="iconStart"
                [tuiTextfieldLabelOutside]="labelOutside"
                [tuiTextfieldPostfix]="postfix"
                [tuiTextfieldPrefix]="prefix"
                [tuiTextfieldSize]="size"
                [(value)]="value"
            >
                Component label
            </tui-primitive-textfield>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| disabled | `boolean` | Disabled state |
| editable | `boolean` | Native input allows inputting |
| filler | `string` | Pale text suggestion for input (e.g. HH:MM:SS for time). Use tuiTextfieldFiller instead |
| tuiTextfieldIcon | `PolymorpheusContent` | Icon content. If content is a string, it is used as stringified svg. Requires you to import TuiTextfieldControllerModule |
| readOnly | `boolean` | Component is read only |
| invalid | `boolean` | Invalid state |
| value | `string` | Value |

### TypeScript

```ts
import {Component, ViewChild} from '@angular/core';
import {FormsModule} from '@angular/forms';
import {changeDetection} from '@demo/emulate/change-detection';
import {DemoRoute} from '@demo/routes';
import {TuiDemo} from '@demo/utils';
import type {TuiContext} from '@taiga-ui/cdk';
import {tuiProvide} from '@taiga-ui/cdk';
import type {TuiSizeL, TuiSizeS} from '@taiga-ui/core';
import {TUI_HINT_DIRECTIONS, TuiHint, TuiIcon} from '@taiga-ui/core';
import {TuiAvatar} from '@taiga-ui/kit';
import {
    TuiPrimitiveTextfieldModule,
    TuiTextfieldControllerModule,
} from '@taiga-ui/legacy';
import type {PolymorpheusContent} from '@taiga-ui/polymorpheus';

import {ABSTRACT_PROPS_ACCESSOR} from '../abstract/abstract-props-accessor';
import {HintControllerDocumentation} from '../abstract/hint-controller-documentation';
import {InheritedDocumentation} from '../abstract/inherited-documentation';
import {AbstractExampleTuiInteractive} from '../abstract/interactive';
import {TextfieldControllerDocumentation} from '../abstract/textfield-controller-documentation';
import Example1 from './examples/1';
import Example2 from './examples/2';

@Component({
    standalone: true,
    imports: [
        Example1,
        Example2,
        FormsModule,
        HintControllerDocumentation,
        InheritedDocumentation,
        TextfieldControllerDocumentation,
        TuiAvatar,
        TuiDemo,
        TuiHint,
        TuiIcon,
        TuiPrimitiveTextfieldModule,
        TuiTextfieldControllerModule,
    ],
    templateUrl: './index.html',
    styleUrls: ['./index.less'],
    changeDetection,
    providers: [tuiProvide(ABSTRACT_PROPS_ACCESSOR, PageComponent)],
})
export default class PageComponent extends AbstractExampleTuiInteractive {
    @ViewChild('interactiveContent')
    private readonly interactiveIcon: PolymorpheusContent<
        TuiContext<TuiSizeL | TuiSizeS>
    >;

    protected readonly routes = DemoRoute;
    protected readonly themes = ['Taiga UI', 'Bootstrap', 'Material'];
    protected theme = this.themes[0]!;

    protected readonly iconVariants = ['', '@tui.search', 'Interactive content'];
    protected selectedIcon = this.iconVariants[0]!;

    protected readonly iconLeftVariants = ['', '@tui.pie-chart', '@tui.credit-card'];

    protected iconStart = '';

    protected readonly typeVariants: readonly string[] = [
        'text',
        'email',
        'password',
        'tel',
        'url',
    ];

    protected cleaner = false;

    protected editable = true;

    protected filler = '';

    protected prefix = '';

    protected postfix = '';

    protected readonly maxLengthVariants: readonly number[] = [10];

    protected maxLength = null;

    protected readonly inputModeVariants: readonly string[] = ['text', 'numeric'];

    protected inputMode = this.inputModeVariants[0]!;

    protected readonly customContentVariants = [
        '',
        '@tui.bell',
        '<span>LongTextContent</span>',
    ];

    protected customContentSelected = this.customContentVariants[0]!;

    protected password = '';

    protected example2Value = 'mail@example.com';

    protected value = '';

    protected exampleText = '';

    protected disabled = false;

    protected readOnly = false;

    protected labelOutside = false;

    protected readonly sizeVariants: ReadonlyArray<TuiSizeL | TuiSizeS> = ['s', 'm', 'l'];

    protected size = this.sizeVariants[2]!;

    protected readonly hintContentVariants: readonly string[] = ['', 'Ivan Ivanov'];

    protected readonly hintDirectionVariants = TUI_HINT_DIRECTIONS;

    protected readonly hintAppearanceVariants = ['', 'error', 'dark'];

    protected invalid = false;

    protected hintContent = this.hintContentVariants[0]!;

    protected hintDirection = this.hintDirectionVariants[0]!;

    protected hintAppearance = this.hintAppearanceVariants[0]!;

    protected get customContent(): string | null {
        return this.customContentSelected;
    }

    protected get iconContent(): PolymorpheusContent<TuiContext<TuiSizeL | TuiSizeS>> {
        if (this.selectedIcon === '') {
            return '';
        }

        return this.interactiveIcon && this.selectedIcon !== '@tui.search'
            ? this.interactiveIcon
            : '@tui.search';
    }

    protected get isBootstrap(): boolean {
        return this.theme === this.themes[1];
    }

    protected get isMaterial(): boolean {
        return this.theme === this.themes[2]!;
    }

    protected get placeholder(): string {
        return this.isBootstrap ? 'Type a value' : 'Theming sample';
    }

    protected get customizationSize(): TuiSizeL | TuiSizeS {
        return this.isBootstrap ? 's' : 'l';
    }

    protected onClick(): void {
        console.info('Interactive icon clicked');
    }
}
```
### LESS

```less
@import '@taiga-ui/core/styles/taiga-ui-local';

:host {
    display: block;
}

.icon-button {
    position: relative;
}

.avatar {
    margin-right: 0.5rem;
}

.label {
    inline-size: 22.5rem;
}

.input {
    margin-top: 0.25rem;
}
```

---

# components/ProgressBar

- **Package**: `KIT`
- **Type**: components

tuiProgressBar
            
            
                – attribute component for native html tag
                '">
                .
            
        
        
            Usage:
            '">
            .


### How to Use (Import)

```ts
import {TuiProgress} from '@taiga-ui/kit';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiProgress,
  ],
})
export class Example {}
```
### How to Use (Template)

```html
<progress
  tuiProgressBar
  [value]="40"
  [max]="100"
></progress>
```

### Example

```html
<progress
                tuiProgressBar
                class="api-progress"
                [color]="color"
                [max]="max"
                [size]="size"
                [value]="value"
            ></progress>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| value | `number` | Native attribute value of '"> |
| max | `number` | Native attribute max of '"> |
| size | `TuiSizeXS | TuiSizeXXL` | Size of the progress element |
| color | `string` | Color of the progress indicator We recommend set solid color via '"> 's CSS-property color (especially, if you support old not-chromium based Edge) |

### TypeScript

```ts
import {Component} from '@angular/core';
import {changeDetection} from '@demo/emulate/change-detection';
import {TuiDemo} from '@demo/utils';
import type {TuiSizeXS, TuiSizeXXL} from '@taiga-ui/core';
import {TuiLink} from '@taiga-ui/core';
import {TuiProgress} from '@taiga-ui/kit';

@Component({
    standalone: true,
    imports: [TuiDemo, TuiLink, TuiProgress],
    templateUrl: './index.html',
    styleUrls: ['./index.less'],
    changeDetection,
})
export default class Page {
    protected value = 6;
    protected max = 10;

    protected readonly sizeVariants: ReadonlyArray<TuiSizeXS | TuiSizeXXL> = [
        'xs',
        's',
        'm',
        'l',
        'xl',
        'xxl',
    ];

    protected size: TuiSizeXS | TuiSizeXXL = this.sizeVariants[2]!;

    protected readonly colorVariants: readonly string[] = [
        'var(--tui-background-accent-1)',
        'lightskyblue',
        '#3682db',
        'rgba(74, 201, 155, 1)',
        'linear-gradient(to right, var(--tui-chart-categorical-02), var(--tui-chart-categorical-14), var(--tui-chart-categorical-12))',
    ];

    protected color = this.colorVariants[0]!;
}
```
### LESS

```less
@import '@taiga-ui/core/styles/taiga-ui-local';

.api-progress {
    inline-size: 50%;

    @media @tui-mobile {
        inline-size: 100%;
    }
}

dt,
dd {
    display: inline;
    margin: 0;
}
```

---

# components/ProgressCircle

- **Package**: `KIT`
- **Type**: components

'">
            
            
                is a component to visually represent the completion of a process or operation (as a partially filled
                circle/ring). It shows how much has been completed and how much remains.


### How to Use (Import)

```ts
import {TuiProgress} from '@taiga-ui/kit';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiProgress,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<tui-progress-circle
  [max]="100"
  [value]="70"
></tui-progress-circle>
```

### Example

```html
<tui-progress-circle
                [color]="color"
                [max]="max"
                [size]="size"
                [value]="value"
            />
```

### API

| Property | Type | Description |
|----------|-----|----------|
| value | `number` | This property specifies how much of the task that has been completed. It must be a valid floating point number between 0 and max , or between 0 and 1 if max is omitted. |
| max | `number` | This property describes how much work the task indicated by the progress element requires. The default value is 1 . |
| size | `TuiSizeXXL | TuiSizeXXS` | Size of the circle. |
| color | `string` | Color of the progress indicator. We recommend set solid color via CSS-property color . |

### TypeScript

```ts
import {Component} from '@angular/core';
import {changeDetection} from '@demo/emulate/change-detection';
import {TuiDemo} from '@demo/utils';
import type {TuiSizeXXL, TuiSizeXXS} from '@taiga-ui/core';
import {TuiLink} from '@taiga-ui/core';
import {tuiInputNumberOptionsProvider, TuiProgress} from '@taiga-ui/kit';

@Component({
    standalone: true,
    imports: [TuiDemo, TuiLink, TuiProgress],
    templateUrl: './index.html',
    styleUrls: ['./index.less'],
    changeDetection,
    providers: [tuiInputNumberOptionsProvider({min: 0})],
})
export default class Page {
    protected value = 6;
    protected max = 10;

    protected readonly sizeVariants: ReadonlyArray<TuiSizeXXL | TuiSizeXXS> = [
        'xxs',
        'xs',
        's',
        'm',
        'l',
        'xl',
        'xxl',
    ];

    protected size: TuiSizeXXL | TuiSizeXXS = 'm';

    protected readonly colorVariants: readonly string[] = [
        'var(--tui-background-accent-1)',
        'lightskyblue',
        '#3682db',
        'rgba(74, 201, 155, 1)',
        'url(#gradient)',
    ];

    protected color = this.colorVariants[0]!;
}
```
### LESS

```less
dt,
dd {
    display: inline;
    margin: 0;
}
```

---

# components/PullToRefresh

- **Package**: `ADDON-MOBILE`
- **Type**: components

Component to refresh content after pull top. It emulates appearance of native iOS and Android components

        
            It emits
            (pulled)
            event when the pull threshold is reached.
        
        
            You can set that threshold in pixels by
            TUI_PULL_TO_REFRESH_THRESHOLD
            DI token.
        
        
            You can finish loading with
            TUI_PULL_TO_REFRESH_LOADED
            stream token that can be provided in DI.
        

        
            Use
            overscroll-behavior: none;
            CSS on your scrolling container to stop elastic scrolling on iOS


### How to Use (Import)

```ts
import {TuiPullToRefresh} from '@taiga-ui/addon-mobile';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiPullToRefresh,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<tui-pull-to-refresh (pulled)="onPulled()">content</tui-pull-to-refresh>
```

---

# components/Pulse

- **Package**: `KIT`
- **Type**: components


### How to Use (Import)

```ts
import {TuiPulse} from '@taiga-ui/kit';
// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiPulse,
  ],
})
export class Example {}
```
### How to Use (Template)

```html
<tui-pulse [playing]="value"></tui-pulse>
```

---

# components/Push

- **Package**: `KIT`
- **Type**: components

Notifications in style of native browser push


### How to Use (Import)

```ts
import {TuiPush} from '@taiga-ui/kit';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiPush,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<tui-push heading="1.21 Gigawatts!?!">
  <tui-icon icon="@tui.clock" />
  This is heavy!
  <button tuiLink>Great Scott!</button>
</tui-push>
```

### Example

```html
<tui-push
                [heading]="heading"
                [lines]="lines"
                [timestamp]="timestamp"
                [type]="type"
                (close)="documentationPropertyClose.emitEvent($event)"
            >
                <img
                    alt=""
                    src="assets/images/roy.jpg"
                />
                <tui-icon icon="@tui.settings" />
                I’ve seen things you people wouldn't believe. Attack ships on fire off The Shoulder Of Orion. I watched
                C-Beams glitter in the dark near The Tannhauser Gate. All those moments will be lost in time, like tears
                in rain.
                <button
                    tuiButton
                    type="button"
                >
                    I want more life
                </button>
                <button
                    tuiLink
                    type="button"
                >
                    Time to die
                </button>
            </tui-push>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| heading | `string` | Heading of the push |
| type | `string` | Small text near icon, typically, category of the message |
| lines | `number` | A number of visible lines |
| timestamp | `number | string` | Timestamp of the arrival. Formatted with FormatDate pipe if the number is passed. |
| close | `void` | Output for close button clicks. If you do not listen to this output, close button is hidden. |

### TypeScript

```ts
import {Component} from '@angular/core';
import {changeDetection} from '@demo/emulate/change-detection';
import {encapsulation} from '@demo/emulate/encapsulation';
import {DemoRoute} from '@demo/routes';
import {TuiDemo} from '@demo/utils';
import {TuiButton, TuiIcon} from '@taiga-ui/core';
import {TuiPush} from '@taiga-ui/kit';

@Component({
    standalone: true,
    imports: [TuiButton, TuiDemo, TuiIcon, TuiPush],
    templateUrl: './index.html',
    encapsulation,
    changeDetection,
})
export default class Page {
    protected readonly examples = ['Basic', 'Service', 'Directive'];
    protected heading = '';
    protected type = '';
    protected lines = 2;

    protected readonly timestampVars = ['', 'A moment ago', 123456789];
    protected timestamp = this.timestampVars[0]!;
    protected readonly routes = DemoRoute;
}
```

---

# components/Radio

- **Package**: `KIT`
- **Type**: components

A radio component that is able to imitate native control on mobile platforms.

        
            Use
            --tui-background-accent-2
            CSS variable to customize color of native control emulation
        

        
            Due to internal Angular implementation of radio buttons, you are required to add
            name
            attribute to your
            input
            tag, unless you are using
            formControlName


### How to Use (Import)

```ts
import {Component} from '@angular/core';
import {TuiRadio} from '@taiga-ui/kit';
// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiRadio,
  ],
})
export class Example {}
```
### How to Use (Template)

```html
<input
  tuiRadio
  type="radio"
  [(ngModel)]="value"
/>
```

---

# components/Range

- **Package**: `KIT`
- **Type**: components

Component allows to choose a part of a range


### How to Use (Import)

```ts
import {FormsModule, ReactiveFormsModule} from '@angular/forms';
import {TuiRange} from '@taiga-ui/kit';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    FormsModule,
    ReactiveFormsModule,
    TuiRange,
  ],
})
class Example {
  testForm = new FormGroup({
    testValue: new FormControl(0),
  });
}
```
### How to Use (Template)

```html
<tui-range
  [max]="10"
  [(ngModel)]="model"
></tui-range>

<tui-range
  [formControl]="testValue"
  [max]="10"
></tui-range>
```

### Example

```html
<ng-template>
                <tui-range
                    [formControl]="control"
                    [keySteps]="keySteps"
                    [limit]="limit"
                    [margin]="margin"
                    [max]="max"
                    [min]="min"
                    [segments]="segments"
                    [size]="size"
                    [step]="step"
                />
            </ng-template>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| disabled | `boolean` | Disabled state (use formControl.disable() ) |
| min | `number` | The lowest value in the range of permitted values. The default is 0 . |
| max | `number` | The greatest value in the range of permitted values. The default is 100 . |
| step | `number` | A number that specifies the granularity that the value must adhere. The default is 1 . |
| size | `TuiSizeS` | Size The default is m . |
| segments | `number` | A number of visual segments. The default is 1 (no ticks). |
| keySteps | `TuiKeySteps | null` | Anchor points of non-uniform format between value and position. The default is null . |
| limit | `number` | Limiting the maximum distance between two thumbs. The default is Infinity . |
| margin | `number` | Limiting the minimum distance between two thumbs. The default is 0 . |

### TypeScript

```ts
import {Component} from '@angular/core';
import {FormControl, ReactiveFormsModule} from '@angular/forms';
import {changeDetection} from '@demo/emulate/change-detection';
import {TuiDemo} from '@demo/utils';
import type {TuiSizeS} from '@taiga-ui/core';
import type {TuiKeySteps} from '@taiga-ui/kit';
import {TuiRange} from '@taiga-ui/kit';

@Component({
    standalone: true,
    imports: [ReactiveFormsModule, TuiDemo, TuiRange],
    templateUrl: './index.html',
    changeDetection,
})
export default class Page {
    protected readonly control = new FormControl([0, 0]);

    protected readonly sizeVariants: readonly TuiSizeS[] = ['s', 'm'];
    protected readonly limitVariants: readonly number[] = [Infinity, 100, 50, 10, 5, 1];

    protected size: TuiSizeS = this.sizeVariants[1]!;

    protected min = 0;

    protected max = 100;

    protected margin = 0;

    protected limit = Infinity;

    protected step = 1;

    protected segments = 1;

    protected readonly keyStepsVariants: readonly TuiKeySteps[] = [
        [
            [0, 0],
            [50, 1_000],
            [100, 10_000],
        ],
    ];

    protected keySteps: TuiKeySteps | null = null;

    protected get disabled(): boolean {
        return this.control.disabled;
    }

    protected set disabled(value: boolean) {
        if (value) {
            this.control.disable();

            return;
        }

        this.control.enable();
    }
}
```

---

# components/Rating

- **Package**: `KIT`
- **Type**: components


### How to Use (Import)

```ts
import {Component} from '@angular/core';
import {TuiRating} from '@taiga-ui/kit';
// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiRating,
  ],
})
export class Example {}
```
### How to Use (Template)

```html
<tui-rating [(ngModel)]="value"></tui-rating>
```

---

# components/Reorder

- **Package**: `ADDON-TABLE`
- **Type**: components

Component to change order of elements in an array


### How to Use (Import)

```ts
import {TuiReorder} from '@taiga-ui/addon-table';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiReorder,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<tui-reorder
  [(items)]="items"
  [(enabled)]="enabled"
></tui-reorder>
```

---

# components/RingChart

- **Package**: `ADDON-CHARTS`
- **Type**: components


### How to Use (Import)

```ts
import {TuiRingChart} from '@taiga-ui/addon-charts';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiRingChart,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<tui-ring-chart [value]="value"></tui-ring-chart>
```

### Example

```html
<tui-ring-chart
                class="chart"
                [size]="size"
                [value]="value"
                [(activeItemIndex)]="activeItemIndex"
            />
```

### API

| Property | Type | Description |
|----------|-----|----------|
| [(activeItemIndex)] | `number` | Active fragment |
| [size] | `TuiSizeXS | TuiSizeXL` | Size |
| [value] | `readonly number[]` | Value |

### TypeScript

```ts
import {Component} from '@angular/core';
import {changeDetection} from '@demo/emulate/change-detection';
import {TuiDemo} from '@demo/utils';
import {TuiRingChart} from '@taiga-ui/addon-charts';
import type {TuiSizeXL, TuiSizeXS} from '@taiga-ui/core';

@Component({
    standalone: true,
    imports: [TuiDemo, TuiRingChart],
    templateUrl: './index.html',
    styleUrls: ['./index.less'],
    changeDetection,
})
export default class Page {
    protected readonly valueVariants = [
        [40, 30, 20, 10],
        [13769, 10172, 3018, 2592],
    ];

    protected value = this.valueVariants[0]!;

    protected readonly activeItemIndexVariants = [NaN, 0, 1, 2];

    protected activeItemIndex = this.activeItemIndexVariants[0]!;

    protected readonly sizeVariants: ReadonlyArray<TuiSizeXL | TuiSizeXS> = [
        'xs',
        's',
        'm',
        'l',
        'xl',
    ];

    protected size = this.sizeVariants[2]!;
}
```
### LESS

```less
.chart {
    margin: 0 auto;
}
```

---

# components/Scrollbar

- **Package**: `CORE`
- **Type**: components

Scrollbar
            implements a custom scrollbar in Taiga UI style.
        

        Native scrollbar is hidden to keep native platform scroll experience

        
            Use
            TUI_SCROLL_REF
            token to get a scrollable container. For example, when working with virtual scroll.


### How to Use (Import)

```ts
import {TuiScrollbar} from '@taiga-ui/core';

// ...

@Component({
  standalone: true,
  // ...
  imports: [
    //  ...
    TuiScrollbar,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<tui-scrollbar>
  <ul>
    <li>Item 1</li>
    <li>Item 2</li>
    <li>Item 3</li>
  </ul>
</tui-scrollbar>
```

---

# components/Search

- **Package**: `LAYOUT`
- **Type**: components

A wrapping component for search or filtering the table


### How to Use (Import)

```ts
import {TuiSearch} from '@taiga-ui/layout';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiSearch,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<search tuiSearch>
  <form [formGroup]="form">
    <fieldset>
      <tui-textfield iconStart="@tui.search">
        <label tuiLabel>Search</label>
        <input
          placeholder="Search"
          tuiTextfield
          formControlName="search"
        />
      </tui-textfield>
      <button tuiButton>Search</button>
    </fieldset>
  </form>
</search>
```

---

# components/Segmented

- **Package**: `KIT`
- **Type**: components

Segmented is used for links and buttons to navigate within the application. It can also work as a radio
            button to toggle between different states.


### How to Use (Import)

```ts
import {Component} from '@angular/core';
import {TuiSegmented} from '@taiga-ui/kit';
// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiSegmented,
  ],
})
export class Example {}
```
### How to Use (Template)

```html
<tui-segmented [(activeItemIndex)]="index">
  <button>Tab 1</button>
  <button>Tab 2</button>
  <button>Tab 3</button>
</tui-segmented>
```

---

# components/Select

- **Package**: `KIT`
- **Type**: components

Select
        is a form control for selecting a
        single
        value from a set of options, similar to the native
        
            &lt;select&gt;
        
        element.


### How to Use (Import)

```ts
import {FormsModule} from '@angular/forms';
import {TuiTextfield} from '@taiga-ui/core';
import {TuiSelect} from '@taiga-ui/kit';

@Component({
  standalone: true,
  imports: [
    // ...
    FormsModule,
    TuiTextfield,
    TuiSelect,
  ],
})
export class Example {
  value: null = null;
}
```
### How to Use (Template)

```html
<tui-textfield tuiChevron>
  <input
    tuiSelect
    [(ngModel)]="value"
  />

  <tui-data-list-wrapper
    *tuiTextfieldDropdown
    [items]="items"
  />
</tui-textfield>
```

### Example

```html
<ng-template>
                <tui-textfield
                    *tuiLet="textfieldDoc.size === 's' || !control.value as showPlaceholder"
                    tuiChevron
                    [content]="control.value && textfieldContent"
                    [disabledItemHandler]="itemsHandlers.disabledItemHandler()"
                    [identityMatcher]="itemsHandlers.identityMatcher()"
                    [stringify]="itemsHandlers.stringify()"
                    [tuiDropdownAlign]="dropdown.align"
                    [tuiDropdownAppearance]="dropdown.appearance"
                    [tuiDropdownDirection]="dropdown.direction"
                    [tuiDropdownLimitWidth]="dropdown.limitWidth"
                    [tuiDropdownMaxHeight]="dropdown.maxHeight"
                    [tuiDropdownMinHeight]="dropdown.minHeight"
                    [tuiDropdownOffset]="dropdown.offset"
                    [tuiTextfieldCleaner]="textfieldDoc.cleaner"
                    [tuiTextfieldSize]="textfieldDoc.size"
                    [(open)]="dropdown.open"
                >
                    <label
                        *ngIf="!showPlaceholder"
                        tuiLabel
                    >
                        Choose country
                    </label>

                    <input
                        tuiSelect
                        [formControl]="control"
                        [invalid]="controlDoc.invalid"
                        [placeholder]="showPlaceholder ? 'Choose country' : ''"
                        [readOnly]="controlDoc.readonly"
                        [tuiDisabled]="controlDoc.disabled"
                    />

                    <tui-data-list-wrapper
                        *tuiTextfieldDropdown
                        new
                        [items]="countries$ | async"
                    />
                </tui-textfield>
            </ng-template>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| [content] | `PolymorpheusContent` | A template for custom view of textfield value. |

### TypeScript

```ts
import {Component, computed, inject} from '@angular/core';
import {FormControl, ReactiveFormsModule} from '@angular/forms';
import {TuiDocControl} from '@demo/components/control';
import {TuiDocDropdown} from '@demo/components/dropdown';
import {TuiDocItemsHandlers} from '@demo/components/items-handlers';
import {TuiDocTextfield} from '@demo/components/textfield';
import {changeDetection} from '@demo/emulate/change-detection';
import {DemoRoute} from '@demo/routes';
import {TuiDemo} from '@demo/utils';
import type {TuiRawLoaderContent} from '@taiga-ui/addon-doc';
import type {TuiContext} from '@taiga-ui/cdk';
import {TUI_IS_MOBILE, TuiLet} from '@taiga-ui/cdk';
import {TuiDropdown, TuiTextfield} from '@taiga-ui/core';
import {TUI_COUNTRIES, TuiChevron, TuiDataListWrapper, TuiSelect} from '@taiga-ui/kit';
import type {PolymorpheusContent} from '@taiga-ui/polymorpheus';
import type {Observable} from 'rxjs';
import {map} from 'rxjs';

interface Country {
    id: string;
    name: string;
}

@Component({
    standalone: true,
    imports: [
        ReactiveFormsModule,
        TuiChevron,
        TuiDataListWrapper,
        TuiDemo,
        TuiDocControl,
        TuiDocDropdown,
        TuiDocItemsHandlers,
        TuiDocTextfield,
        TuiDropdown,
        TuiLet,
        TuiSelect,
        TuiTextfield,
    ],
    templateUrl: './index.html',
    changeDetection,
})
export default class PageComponent {
    protected readonly routes = DemoRoute;

    protected readonly isMobile = inject(TUI_IS_MOBILE);
    protected readonly control = new FormControl<Country | null>({
        id: 'US',
        name: 'USA',
    });

    protected textfieldContent: PolymorpheusContent = '';

    protected readonly countries$: Observable<Country[]> = inject(TUI_COUNTRIES).pipe(
        map((x) => Object.entries(x).map(([id, name]) => ({id, name}))),
    );

    protected readonly textfieldContentVariants = computed(() => [
        '',
        'TOP SECRET',
        ({$implicit: x}: TuiContext<any>) =>
            x?.name.includes('i') ? `->${x.name}<-` : x?.name,
    ]);

    protected selectOptionExample: TuiRawLoaderContent = import(
        './examples/10/option.ts?raw'
    );

    protected readonly handler = (item: Country): boolean =>
        item.id.charCodeAt(1) % 3 === 0;
}
```

---

# components/SelectLegacy

- **Package**: `LEGACY`
- **Type**: components

This version of the component is deprecated and will be removed in the next major version. Use
            
                new version of Select
            
            instead!
        

        
            Select
            is a field with dropdown to choose one item.


### How to Use (Import)

```ts
import {FormsModule, ReactiveFormsModule} from '@angular/forms';
import {TuiDataList} from '@taiga-ui/core';
import {TuiDataListWrapper} from '@taiga-ui/kit';
import {TuiSelectModule} from '@taiga-ui/legacy';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    FormsModule,
    ReactiveFormsModule,
    TuiSelectModule,
    TuiDataList,
    TuiDataListWrapper,
  ],
  // ...
})
export class Example {
  testForm = new FormGroup({
    testValue: new FormControl(),
  });
}
```
### How to Use (Template)

```html
<form [formGroup]="testForm">
  <tui-select formControlName="testValue">
    <tui-data-list-wrapper
      *tuiDataList
      [items]="items"
    ></tui-data-list-wrapper>
  </tui-select>
</form>
```

### Example

```html
<ng-template>
                <tui-select
                    [focusable]="focusable"
                    [formControl]="control"
                    [identityMatcher]="identityMatcher"
                    [pseudoActive]="pseudoPressed"
                    [pseudoFocus]="pseudoFocused"
                    [pseudoHover]="pseudoHovered"
                    [pseudoInvalid]="pseudoInvalid"
                    [readOnly]="readOnly"
                    [tuiDropdownAlign]="dropdownAlign"
                    [tuiDropdownDirection]="dropdownDirection"
                    [tuiDropdownLimitWidth]="dropdownLimitWidth"
                    [tuiDropdownMaxHeight]="dropdownMaxHeight"
                    [tuiDropdownMinHeight]="dropdownMinHeight"
                    [tuiDropdownOffset]="dropdownOffset"
                    [tuiDropdownOpen]="!!(dropdownOpen | async)"
                    [tuiHintAppearance]="hintAppearance"
                    [tuiHintContent]="hintContent"
                    [tuiHintDirection]="hintDirection"
                    [tuiTextfieldCleaner]="cleaner"
                    [tuiTextfieldCustomContent]="customContent"
                    [tuiTextfieldFiller]="filler"
                    [tuiTextfieldIconLeft]="iconStart"
                    [tuiTextfieldLabelOutside]="labelOutside"
                    [tuiTextfieldSize]="size"
                    [valueContent]="valueContent"
                    (tuiDropdownOpenChange)="dropdownOpen.next($event)"
                >
                    Choose an account
                    <tui-data-list-wrapper
                        *tuiDataList
                        [items]="items"
                    />
                </tui-select>
            </ng-template>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| disabled | `boolean` | Disabled state (use formControl.disable() ) |
| identityMatcher | `TuiIdentityMatcher` | Function that matches value and items, e.g. if objects are copied. Uses === by default. Must be a pure function |
| valueContent | `PolymorpheusContent<TuiValueContentContext<T>>` | >" [documentationPropertyValues]="valueTemplateVariants" [(documentationPropertyValue)]="selectedValueTemplate" > A template for custom view of selected value |

### TypeScript

```ts
import {Component, ViewChild} from '@angular/core';
import {FormControl, ReactiveFormsModule, Validators} from '@angular/forms';
import {changeDetection} from '@demo/emulate/change-detection';
import {DemoRoute} from '@demo/routes';
import {TuiDemo} from '@demo/utils';
import {tuiDocExcludeProperties} from '@taiga-ui/addon-doc';
import type {TuiBooleanHandler, TuiIdentityMatcher} from '@taiga-ui/cdk';
import {TUI_FALSE_HANDLER, tuiProvide} from '@taiga-ui/cdk';
import type {TuiValueContentContext} from '@taiga-ui/core';
import {TuiButton, TuiDataList, TuiDropdown, TuiHint, TuiIcon} from '@taiga-ui/core';
import {TuiDataListWrapper} from '@taiga-ui/kit';
import {TuiSelectModule, TuiTextfieldControllerModule} from '@taiga-ui/legacy';
import type {PolymorpheusContent} from '@taiga-ui/polymorpheus';

import {ABSTRACT_PROPS_ACCESSOR} from '../abstract/abstract-props-accessor';
import {AbstractExampleTuiControl} from '../abstract/control';
import {InheritedDocumentation} from '../abstract/inherited-documentation';

class Account {
    constructor(
        public readonly name: string,
        public readonly balance: number,
    ) {}

    protected toString(): string {
        return `${this.name} (${this.balance})`;
    }
}

@Component({
    standalone: true,
    imports: [
        InheritedDocumentation,
        ReactiveFormsModule,
        TuiButton,
        TuiDataList,
        TuiDataListWrapper,
        TuiDemo,
        TuiDropdown,
        TuiHint,
        TuiIcon,
        TuiSelectModule,
        TuiTextfieldControllerModule,
    ],
    templateUrl: './index.html',
    styleUrls: ['./index.less'],
    changeDetection,
    providers: [
        tuiProvide(ABSTRACT_PROPS_ACCESSOR, PageComponent),
        tuiDocExcludeProperties(['tuiTextfieldPrefix', 'tuiTextfieldPostfix']),
    ],
})
export default class PageComponent extends AbstractExampleTuiControl {
    @ViewChild('valueTemplateContent')
    private readonly valueTemplateRef: PolymorpheusContent<
        TuiValueContentContext<Account>
    >;

    protected readonly routes = DemoRoute;

    protected readonly example9 = {
        TypeScript: import('./examples/9/index.ts?raw'),
        HTML: import('./examples/9/index.html?raw'),
        LESS: import('./examples/9/index.less?raw'),
        './account/index.ts': import('./examples/9/account/index.ts?raw'),
        './account/index.less': import('./examples/9/account/index.less?raw'),
        './account/index.html': import('./examples/9/account/index.html?raw'),
    };

    protected readonly items = [new Account('Ruble', 500), new Account('Dollar', 237)];

    protected readonly valueTemplateVariants = ['', 'Template'];

    protected selectedValueTemplate = this.valueTemplateVariants[0]!;

    protected readonly identityMatcherVariants: ReadonlyArray<
        TuiIdentityMatcher<Account>
    > = [
        (item1, item2) => item1 === item2,
        (item1, item2) => item1.balance === item2.balance,
    ];

    protected identityMatcher = this.identityMatcherVariants[0]!;

    protected readonly disabledItemHandlerVariants: ReadonlyArray<
        TuiBooleanHandler<Account>
    > = [TUI_FALSE_HANDLER, (item: Account) => item.balance < 300];

    public readonly iconVariants = ['', '@tui.pie-chart', '@tui.credit-card'];

    public override iconStart = this.iconVariants[0]!;

    public control = new FormControl<Account | null>(null, Validators.required);

    protected get valueContent(): PolymorpheusContent<TuiValueContentContext<Account>> {
        return this.valueTemplateRef && this.selectedValueTemplate
            ? this.valueTemplateRef
            : '';
    }

    protected setValue(): void {
        this.control.setValue(new Account('Dollar', 237));
    }
}
```
### LESS

```less
.icon {
    block-size: 1.125rem;
    color: var(--tui-background-accent-2);
    margin: 0 0.25rem 0 -0.25rem;
}

.text-overflow {
    overflow: hidden;
    text-overflow: ellipsis;
}
```

---

# services/BreakpointService

- **Package**: `CORE`
- **Type**: components/services

Service to observe changes in the current breakpoint.


---

# services/KeyboardService

- **Package**: `ADDON-MOBILE`
- **Type**: components/services

A service that allows hiding and showing virtual keyboard programmatically on both Android and iOS devices
        
        
            Does nothing on devices with no virtual keyboard or when input is not focused


---

# services/ScrollService

- **Package**: `CDK`
- **Type**: components/services

A service for smooth scroll


### API

| Property | Type | Description |
|----------|-----|----------|
| element | `Element` | Element to be scrolled |
| scrollTop | `number` | Target position from top |
| scrollLeft | `number` | Optional . Target position from left |
| duration | `number` | Optional . Duration time in ms (0 for an instant scroll). |

---

# components/Sheet

- **Package**: `LEGACY`
- **Type**: components

If you need overlay and do not need image related functionality, it is recommended to use
            
                SheetDialog
            
            .
            Sheet
            component is on track to be deprecated.
        

        
            This component only works on mobile devices. Enable emulation in DevTools


### How to Use (Import)

```ts
import {TuiSheetModule} from '@taiga-ui/legacy';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiSheetModule,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<tui-root>
  <!-- Your app content -->
  <tui-sheets-host ngProjectAs="tuiOverContent"></tui-sheets-host>
</tui-root>
```

### Example

```html
<button
                tuiButton
                type="button"
                (click)="toggle()"
            >
                Toggle
            </button>
            <ng-template #template>
                <div class="top">
                    <tui-avatar size="l">Karl Gambolputty</tui-avatar>
                    <h2>Karl Gambolputty</h2>
                </div>
            </ng-template>
            <ng-template
                [tuiSheetOptions]="options"
                [(tuiSheet)]="open"
            >
                Karl Gambolputty de von
                Ausfern-schplenden-schlitter-crasscrenbon-fried-digger-dingle-dangle-dongle-dungle-burstein-von-knacker-thrasher-apple-banger-horowitz-ticolensic-grander-knotty-spelltinkle-grandlich-grumblemeyer-spelterwasser-kurstlich-himbleeisen-bahnwagen-gutenabend-bitte-ein-nürnburger-bratwustle-gerspurten-mitzweimache-luber-hundsfut-gumberaber-shönendanker-kalbsfleisch-mittler-aucher
                von Hautkopft of Ulm was the last-surviving relative of Johann Gambolputty de von
                Ausfern-schplenden-schlitter-crasscrenbon-fried-digger-dingle-dangle-dongle-dungle-burstein-von-knacker-thrasher-apple-banger-horowitz-ticolensic-grander-knotty-spelltinkle-grandlich-grumblemeyer-spelterwasser-kurstlich-himbleeisen-bahnwagen-gutenabend-bitte-ein-nürnburger-bratwustle-gerspurten-mitzweimache-luber-hundsfut-gumberaber-shönendanker-kalbsfleisch-mittler-aucher
                von Hautkopft of Ulm.
                <div class="tui-space_top-4">
                    <button
                        tuiButton
                        type="button"
                        (click)="toggle()"
                    >
                        Close
                    </button>
                </div>
            </ng-template>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| closeable | `boolean` | Whether or not a sheet can be closed by user. |
| data | `I` | Optional data to be passed to the sheet. |
| image | `PolymorpheusContent<TuiSheetOptions<I>>` | >" [documentationPropertyValues]="imageVariants" [(documentationPropertyValue)]="image" > A content to show above the sheet. |
| imageSlide | `boolean` | Should image slide as the sheet is dragged. |
| stops | `string[]` | An array of stop points in any units for the sheet. |
| initial | `number` | Initial stop index to open on. Indices exceeding stops are treated as stop on image then stop on top of the sheet's content. |
| overlay | `boolean` | Show overlay under the sheet. |

### TypeScript

```ts
import {Component, inject, ViewChild} from '@angular/core';
import {changeDetection} from '@demo/emulate/change-detection';
import {DemoRoute} from '@demo/routes';
import {TuiDemo} from '@demo/utils';
import {TUI_IS_MOBILE} from '@taiga-ui/cdk';
import {TuiButton} from '@taiga-ui/core';
import {TuiAvatar} from '@taiga-ui/kit';
import type {TuiSheet, TuiSheetOptions} from '@taiga-ui/legacy';
import {TUI_SHEET_DEFAULT_OPTIONS, TuiSheetModule} from '@taiga-ui/legacy';
import type {PolymorpheusContent} from '@taiga-ui/polymorpheus';

@Component({
    standalone: true,
    imports: [TuiAvatar, TuiButton, TuiDemo, TuiSheetModule],
    templateUrl: './index.html',
    styleUrls: ['./index.less'],
    changeDetection,
})
export default class Page {
    @ViewChild('template')
    protected readonly templateRef: PolymorpheusContent<TuiSheet<unknown>>;

    protected readonly routes = DemoRoute;
    protected closeable = TUI_SHEET_DEFAULT_OPTIONS.closeable;
    protected image = TUI_SHEET_DEFAULT_OPTIONS.image;
    protected imageSlide = TUI_SHEET_DEFAULT_OPTIONS.imageSlide;
    protected initial = TUI_SHEET_DEFAULT_OPTIONS.initial;
    protected overlay = TUI_SHEET_DEFAULT_OPTIONS.overlay;
    protected stops = TUI_SHEET_DEFAULT_OPTIONS.stops;

    protected open = false;

    protected readonly imageVariants = [
        this.image,
        '/assets/images/avatar.jpg',
        'Template',
    ];

    protected readonly stopsVariants = [this.stops, ['100px'], ['10rem', '20rem']];

    protected readonly isMobile = inject(TUI_IS_MOBILE);

    protected get computedImage(): PolymorpheusContent<TuiSheet<unknown>> {
        return this.image === 'Template' ? this.templateRef : this.image;
    }

    protected get options(): Partial<TuiSheetOptions> {
        return {
            closeable: this.closeable,
            image: this.computedImage,
            imageSlide: this.imageSlide,
            stops: this.stops,
            initial: this.initial,
            overlay: this.overlay,
        };
    }

    protected toggle(): void {
        this.open = !this.open;
    }
}
```
### LESS

```less
.top {
    display: flex;
    background: var(--tui-background-accent-2);
    padding: 1rem;
    flex-direction: column;
    align-items: center;
}
```

---

# components/SheetDialog

- **Package**: `ADDON-MOBILE`
- **Type**: components

A mobile draggable sheet dialog


### Example

```html
<button
                tuiButton
                type="button"
                (click)="toggle()"
            >
                Click
            </button>
            <button
                tuiButton
                type="button"
                class="tui-space_left-4"
                (longtap)="toggle()"
            >
                Long tap
            </button>
            <ng-template #template>
                <div class="label">
                    <tui-avatar size="m">KG</tui-avatar>
                    <label tuiTitle>
                        <span tuiSubtitle>Terry Jones</span>
                        <b>Karl Gambolputty</b>
                    </label>
                </div>
            </ng-template>
            <ng-template
                [tuiSheetDialogOptions]="{
                    label: label === 'Template' ? template : label,
                    closeable: closeable,
                    fullscreen: fullscreen,
                    stops: stops,
                    initial: initial,
                    bar: bar,
                    offset: offset,
                }"
                [(tuiSheetDialog)]="open"
            >
                <p [style.flex-grow]="1">
                    Karl Gambolputty de von
                    Ausfern-schplenden-schlitter-crasscrenbon-fried-digger-dingle-dangle-dongle-dungle-burstein-von-knacker-thrasher-apple-banger-horowitz-ticolensic-grander-knotty-spelltinkle-grandlich-grumblemeyer-spelterwasser-kurstlich-himbleeisen-bahnwagen-gutenabend-bitte-ein-nürnburger-bratwustle-gerspurten-mitzweimache-luber
                    von Hautkopft of Ulm was the last-surviving relative of Johann Gambolputty de von.
                </p>
                <footer tuiFloatingContainer>
                    <button
                        tuiButton
                        type="button"
                        (click)="toggle()"
                    >
                        Close
                    </button>
                </footer>
            </ng-template>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| closeable | `boolean` | Whether or not a sheet can be closed by user. |
| fullscreen | `boolean` | Fullscreen |
| bar | `boolean` | Show bar |
| data | `I` | Optional data to be passed to the sheet. |
| label | `PolymorpheusContent` | Sheet label. |
| stops | `string[]` | An array of stop points in any units for the sheet. |
| initial | `number` | Initial stop index to open on. Index exceeding stops means to stop on top of the sheet's content. |
| offset | `number` | Top offset px ( --tui-offset ) |

### TypeScript

```ts
import {Component} from '@angular/core';
import {changeDetection} from '@demo/emulate/change-detection';
import {TuiDemo} from '@demo/utils';
import {TUI_SHEET_DIALOG_DEFAULT_OPTIONS, TuiSheetDialog} from '@taiga-ui/addon-mobile';
import {TuiButton, TuiTitle} from '@taiga-ui/core';
import {TuiAvatar, TuiFloatingContainer} from '@taiga-ui/kit';

@Component({
    standalone: true,
    imports: [
        TuiAvatar,
        TuiButton,
        TuiDemo,
        TuiFloatingContainer,
        TuiSheetDialog,
        TuiTitle,
    ],
    templateUrl: './index.html',
    styleUrls: ['./index.less'],
    changeDetection,
})
export default class Page {
    protected readonly exampleComponent = import('./examples/import/component.md?raw');
    protected readonly examples = [
        'String',
        'Basic',
        'Advanced',
        'Sticky elements',
        'Responsive',
        'AppBar',
        'Fullscreen',
    ];

    protected closeable = TUI_SHEET_DIALOG_DEFAULT_OPTIONS.closeable;
    protected fullscreen = TUI_SHEET_DIALOG_DEFAULT_OPTIONS.fullscreen;
    protected bar = TUI_SHEET_DIALOG_DEFAULT_OPTIONS.bar;
    protected initial = TUI_SHEET_DIALOG_DEFAULT_OPTIONS.initial;
    protected stops = TUI_SHEET_DIALOG_DEFAULT_OPTIONS.stops;
    protected label = TUI_SHEET_DIALOG_DEFAULT_OPTIONS.label;
    protected offset = TUI_SHEET_DIALOG_DEFAULT_OPTIONS.offset;

    protected open = false;

    protected readonly stopsVariants = [this.stops, ['100px'], ['10rem', '20rem']];
    protected readonly labelVariants = [this.label, 'String label', 'Template'];

    protected toggle(): void {
        this.open = !this.open;
    }
}
```
### LESS

```less
.label {
    display: flex;
    gap: 0.75rem;
}
```

---

# components/Slider

- **Package**: `KIT`
- **Type**: components

tuiSlider
            
            
                attribute component for native html tag
                '">
                to choose a value from a limited range.
            
        
        
            Read more about current input's type in
            
                MDN Docs
            
            .
        
        
            Usage:
            '">
            .


### How to Use (Import)

```ts
import {FormsModule, ReactiveFormsModule} from '@angular/forms';
import {TuiSlider} from '@taiga-ui/kit';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    FormsModule,
    ReactiveFormsModule,
    TuiSlider,
  ],
  // ...
})
export class Example {
  readonly control = new FormControl(1);
}
```
### How to Use (Template)

```html
<input
  tuiSlider
  type="range"
  [formControl]="control"
/>
```

### Example

```html
<ng-template>
                <input
                    tuiSlider
                    type="range"
                    [formControl]="control"
                    [max]="max"
                    [min]="min"
                    [segments]="segments"
                    [size]="size"
                    [step]="step"
                />
            </ng-template>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| disabled | `boolean` | Disabled state (use formControl.disable() ) |
| max | `number` | Native attribute max of '"> |
| min | `number` | Native attribute min of '"> |
| step | `number` | Native attribute step of '"> |
| size | `TuiSizeS` | Size |
| segments | `number[] | number` | A number of visual segments or an array, in which every number - is ratio of slider's track length in range (0; 1) where to put tick (use 1 for no ticks) |

### TypeScript

```ts
import {ChangeDetectionStrategy, Component} from '@angular/core';
import {FormControl, ReactiveFormsModule} from '@angular/forms';
import {TuiDemo} from '@demo/utils';
import type {TuiSizeS} from '@taiga-ui/core';
import {TuiSlider} from '@taiga-ui/kit';

@Component({
    standalone: true,
    imports: [ReactiveFormsModule, TuiDemo, TuiSlider],
    templateUrl: './index.html',
    changeDetection: ChangeDetectionStrategy.OnPush,
})
export default class Page {
    protected readonly sizeVariants: readonly TuiSizeS[] = ['s', 'm'];
    protected readonly segmentsVariants: Array<number[] | number> = [
        1,
        5,
        3,
        [0.2, 0.5],
        [0.1, 0.3],
    ];

    protected readonly control = new FormControl(1);

    protected max = 5;
    protected min = 0;
    protected step = 1;
    protected size: TuiSizeS = this.sizeVariants[1]!;
    protected segments: number[] | number = this.max;

    protected get disabled(): boolean {
        return this.control.disabled;
    }

    protected set disabled(value: boolean) {
        if (value) {
            this.control.disable();

            return;
        }

        this.control.enable();
    }
}
```

---

# components/Status

- **Package**: `KIT`
- **Type**: components


### How to Use (Import)

```ts
import {Component} from '@angular/core';
import {TuiStatus} from '@taiga-ui/kit';
// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiStatus,
  ],
})
export class Example {}
```
### How to Use (Template)

```html
<span tuiStatus="var(--tui-status-positive)">Success</span>
```

---

# components/Stepper

- **Package**: `KIT`
- **Type**: components


### How to Use (Import)

```ts
import {TuiStepper} from '@taiga-ui/kit';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiStepper,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<tui-stepper>
  <a
    routerLink="/step-1"
    routerLinkActive
    tuiStep
  >
    One 1
  </a>
  <a
    routerLink="/step-2"
    routerLinkActive
    tuiStep
  >
    Two 2
  </a>
  <a
    routerLink="/step-3"
    routerLinkActive
    tuiStep
  >
    Three 3
  </a>
</tui-stepper>
```

### Example

```html
<tui-stepper
                [orientation]="orientation"
                [(activeItemIndex)]="activeItemIndex"
            >
                <button
                    tuiStep
                    type="button"
                >
                    Simple step
                </button>
                <button
                    tuiStep
                    type="button"
                >
                    Simple step
                </button>
                <button
                    tuiStep
                    type="button"
                    [icon]="icon"
                    [stepState]="state"
                >
                    Simple step
                </button>
                <button
                    tuiStep
                    type="button"
                >
                    Simple step
                </button>
                <button
                    tuiStep
                    type="button"
                >
                    Simple step
                </button>
            </tui-stepper>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| orientation | `TuiOrientation` | Steps direction |
| activeItemIndex | `number` | Active step index |

### TypeScript

```ts
import {Component} from '@angular/core';
import {changeDetection} from '@demo/emulate/change-detection';
import {TuiDemo} from '@demo/utils';
import type {TuiOrientation} from '@taiga-ui/core';
import {TuiStepper} from '@taiga-ui/kit';

@Component({
    standalone: true,
    imports: [TuiDemo, TuiStepper],
    templateUrl: './index.html',
    changeDetection,
})
export default class Page {
    protected activeItemIndex = 0;

    protected readonly examples = [
        'Basic',
        'Vertical',
        'Vertical autoscroll',
        'Vertical connected',
    ];

    protected readonly orientationVariants: readonly TuiOrientation[] = [
        'horizontal',
        'vertical',
    ];

    protected orientation: TuiOrientation = this.orientationVariants[0]!;

    protected readonly iconVariants = ['', '@tui.clock', '@tui.heart'];

    protected icon = this.iconVariants[0]!;

    protected readonly stateVariants = ['normal', 'pass', 'error'] as const;

    protected state: 'error' | 'normal' | 'pass' = this.stateVariants[0];
}
```

---

# components/Surface

- **Package**: `CORE`
- **Type**: components

General purpose container used in Taiga UI interfaces. Often used in conjunction with
            
                Card
            
            component.


### How to Use (Import)

```ts
import {Component} from '@angular/core';
import {TuiSurface} from '@taiga-ui/core';
// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiSurface,
  ],
})
export class Example {}
```
### How to Use (Template)

```html
<div tuiSurface>
  <!-- Content -->
</div>
```

---

# components/SwipeAction

- **Package**: `ADDON-MOBILE`
- **Type**: components

Component should be used on mobile devices only.


### How to Use (Import)

```ts
import {Component} from '@angular/core';
import {TuiSwipeActions} from '@taiga-ui/addon-mobile';
// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiSwipeActions,
  ],
})
export class Example {}
```
### How to Use (Template)

```html
<tui-swipe-actions>
  <div>Card content</div>

  <button
    iconStart="@tui.eye"
    size="m"
    tuiIconButton
    tuiSwipeAction
  ></button>
</tui-swipe-actions>
```

---

# components/Switch

- **Package**: `KIT`
- **Type**: components

A switch component that is able to imitate native control on mobile platforms.

        
            Use
            --tui-background-accent-2
            CSS variable to customize color of native control emulation


### How to Use (Import)

```ts
import {Component} from '@angular/core';
import {TuiSwitch} from '@taiga-ui/kit';
// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiSwitch,
  ],
})
export class Example {}
```
### How to Use (Template)

```html
<input
  tuiSwitch
  type="checkbox"
  [(ngModel)]="value"
/>
```

---

# components/TabBar

- **Package**: `ADDON-MOBILE`
- **Type**: components

Component for creating mobile navigation.


### How to Use (Import)

```ts
import {TuiTabBar} from '@taiga-ui/addon-mobile';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiTabBar,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<!--
    Add to the template inside your root component
    at the required layer and position with CSS:
-->
<tui-root>
  Your app
  <nav
    tuiTabBar
    ngProjectAs="tuiOverContent"
  >
    <a
      *ngFor="let item of items"
      tuiTabBarItem
      routerLinkActive
      [routerLink]="item.path"
      [icon]="item.icon"
    >
      {{ item.text}}
    </a>
  </nav>
</tui-root>
```

---

# components/Table

- **Package**: `ADDON-TABLE`
- **Type**: components

This module allows you to create various tables, both static and editable.


### How to Use (Import)

```ts
import {TuiTable} from '@taiga-ui/addon-table';

@Component({
  standalone: true,
  imports: [
    // ...
    TuiTable,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<table
  tuiTable
  [columns]="columns"
>
  <thead tuiThead>
    <tr tuiThGroup>
      <th
        *tuiHead="'name'"
        tuiTh
      >
        Name
      </th>
      <th
        *tuiHead="'email'"
        tuiTh
      >
        E-mail
      </th>
      <th
        *tuiHead="'status'"
        tuiTh
      >
        Status
      </th>
      <th
        *tuiHead="'tags'"
        tuiTh
        [sorter]="null"
      >
        Tags
      </th>
    </tr>
  </thead>
  <tbody
    *tuiLet="users | tuiTableSort as sortedUsers"
    tuiTbody
    [data]="sortedUsers"
  >
    <tr
      *ngFor="let item of sortedUsers"
      tuiTr
    >
      <td
        *tuiCell="'name'"
        tuiTd
      >
        {{ item.name }}
      </td>
      <td
        *tuiCell="'email'"
        tuiTd
      >
        <a
          *ngIf="item.email"
          tuiLink
          [href]="'mailto:' + item.email"
        >
          {{ item.email }}
        </a>
      </td>
      <td
        *tuiCell="'status'"
        tuiTd
      >
        <div [class]="item.status">{{ item.status }}</div>
      </td>
      <td
        *tuiCell="'tags'"
        tuiTd
      >
        <tui-tag
          class="tui-space_right-1"
          *ngFor="let tag of item.tags"
          [value]="tag"
          [autoColor]="true"
        ></tui-tag>
      </td>
    </tr>
  </tbody>
</table>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| columns | `readonly string[]` | An array of keys to set up columns order |
| size | `TuiSizeS | TuiSizeL` | Cells size |
| sorter | `TuiComparator<T>` | " > Sort function (basic JavaScript array sort API) |
| direction | `-1 | 1` | Direction for sorting |

---

# components/TableFilters

- **Package**: `ADDON-TABLE`
- **Type**: components

This module allows you to filter table data in a flexible way.


### How to Use (Import)

```ts
import {TuiTableFilters} from '@taiga-ui/addon-table';

@Component({
  standalone: true,
  imports: [
    // ...
    TuiTableFilters,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<table
  tuiTableFilters
  tuiTable
  [columns]="columns"
>
  <thead tuiThead>
    <tr tuiThGroup>
      <th
        *tuiHead="'name'"
        tuiTh
      >
        Name
      </th>
      <th
        *tuiHead="'balance'"
        tuiTh
      >
        <tui-textfield>
          <label tuiLabel>Minimal balance</label>
          <input
            tuiInputNumber
            tuiTableFilter
            [tuiGenericFilter]="filter"
            [formControl]="balance"
          />
        </tui-textfield>
      </th>
    </tr>
  </thead>
  <tbody tuiTbody>
    <tr
      *ngFor="let item of users | tuiTableFilters"
      tuiTr
    >
      <td
        *tuiCell="'name'"
        tuiTd
      >
        {{item.name}}
      </td>
      <td
        *tuiCell="'balance'"
        tuiTd
      >
        {{ item.balance}}
      </td>
    </tr>
  </tbody>
</table>
```

---

# components/TablePagination

- **Package**: `ADDON-TABLE`
- **Type**: components

Component to show pagination in table footer


### How to Use (Import)

```ts
import {TuiTablePagination} from '@taiga-ui/addon-table';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiTablePagination,
  ],
})
export class Example {}
```
### How to Use (Template)

```html
<tui-table-pagination
  [total]="total"
  [(page)]="page"
  [(size)]="size"
></tui-table-pagination>
```

### Example

```html
<tui-table-pagination
                [items]="items"
                [page]="page"
                [size]="size"
                [total]="total"
                (paginationChange)="documentationPropertyPaginationChange.emitEvent($event); update($event)"
            />
```

### API

| Property | Type | Description |
|----------|-----|----------|
| total | `number` | Total amount of items/lines in the table. |
| size | `number` | Items/Lines per page. Uses the first element inside items by default. |
| page | `number` | Current page. Indexing starts at zero. |
| items | `readonly number[]` | Options to select amount of lines per page. |
| paginationChange | `TuiTablePagination` | Event emits when page or size changes. |

### TypeScript

```ts
import {Component} from '@angular/core';
import {changeDetection} from '@demo/emulate/change-detection';
import {encapsulation} from '@demo/emulate/encapsulation';
import {TuiDemo} from '@demo/utils';
import type {TuiTablePaginationEvent} from '@taiga-ui/addon-table';
import {TuiTablePagination} from '@taiga-ui/addon-table';

@Component({
    standalone: true,
    imports: [TuiDemo, TuiTablePagination],
    templateUrl: './index.html',
    encapsulation,
    changeDetection,
})
export default class Page {
    protected readonly itemsVariants = [
        [10, 20, 50, 100],
        [10, 100, 500],
    ];

    protected total = 1000;
    protected page = 5;
    protected items = this.itemsVariants[0]!;
    protected size = this.items[0]!;

    protected update({page, size}: TuiTablePaginationEvent): void {
        this.page = page;
        this.size = size;
    }

    protected totalChange(total: number): void {
        this.total = total;
        this.size = Math.min(this.size, Math.max(total, 1));
    }
}
```

---

# components/Tabs

- **Package**: `KIT`
- **Type**: components

Component for creating tabs.

        
            If you use
            routerLink
            you must also add
            routerLinkActive
            directive.


### How to Use (Import)

```ts
import {TuiTabs} from '@taiga-ui/kit';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiTabs,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
Router links:
<tui-tabs>
  <a
    tuiTab
    routerLink="/page-1"
    routerLinkActive
  >
    Page 1
  </a>
  <a
    tuiTab
    routerLink="/page-2"
    routerLinkActive
  >
    Page 2
  </a>
</tui-tabs>

Buttons:
<tui-tabs [(activeItemIndex)]="activeItemIndex">
  <button
    tuiTab
    (click)="onTabClick(1)"
  >
    Page 1
  </button>
  <button
    tuiTab
    (click)="onTabClick(2)"
  >
    Page 2
  </button>
</tui-tabs>
```

### Example

```html
<tui-tabs-with-more
                [itemsLimit]="itemsLimit"
                [moreContent]="moreContent"
                [size]="size"
                [underline]="underline"
                [(activeItemIndex)]="activeItemIndex"
            >
                <ng-container *ngFor="let button of buttons">
                    <button
                        *tuiItem
                        tuiTab
                        type="button"
                    >
                        {{ button }}
                    </button>
                </ng-container>
            </tui-tabs-with-more>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| [(activeItemIndex)] | `number` | Active index item |
| [size] | `TuiSizeM | TuiSizeL` | Size |
| [itemsLimit] | `number` |  |
| [moreContent] | `PolymorpheusContent` |  |
| [dropdownContent] | `PolymorpheusContent` |  |

### TypeScript

```ts
import {Component} from '@angular/core';
import {changeDetection} from '@demo/emulate/change-detection';
import {TuiDemo} from '@demo/utils';
import {tuiDocExampleOptionsProvider} from '@taiga-ui/addon-doc';
import type {TuiSizeL} from '@taiga-ui/core';
import {TuiTabs} from '@taiga-ui/kit';

@Component({
    standalone: true,
    imports: [TuiDemo, TuiTabs],
    templateUrl: './index.html',
    changeDetection,
    providers: [tuiDocExampleOptionsProvider({fullsize: true})],
})
export default class Page {
    protected readonly examples = [
        'Basic',
        'TabsWithMore',
        'Complex',
        'Stepper',
        'Closing',
        'Vertical',
        'Styles',
    ];

    protected buttons = ['Button 1', 'Button 2', 'Button 3', 'Button 4'];

    protected readonly moreContentVariants = ['', 'And more'];

    protected moreContent = this.moreContentVariants[0]!;

    protected underline = true;

    protected activeItemIndex = 0;

    protected itemsLimit = 999;

    protected sizes: readonly TuiSizeL[] = ['m', 'l'];

    protected size = this.sizes[1]!;
}
```

---

# components/Tag

- **Package**: `LEGACY`
- **Type**: components

Tags show information and they can be edited, deleted or clicked.

        
            This component is deprecated in favor of
            
                Chip
            
            component
        

        
            They work with both
            tui-tag
            and
            a[tuiTag]/button[tuiTag]
            selectors


### How to Use (Import)

```ts
import {TuiTagModule, tuiTagOptionsProvider} from '@taiga-ui/legacy';
// ...

@Component({
  standalone: true,
  imports: [TuiTagModule],
  providers: [
    tuiTagOptionsProvider({
      size: 'l',
      status: 'success',
    }),
  ],
})
export class Example {}
```
### How to Use (Template)

```html
<tui-tag [value]="tag"></tui-tag>
<!--Use can use tag as link-->
<a
  tuiTag
  href="https://somesite.com"
  target="_blank"
  [value]="tag"
></a>
```

### Example

```html
<tui-tag
                [autoColor]="autoColor"
                [disabled]="disabled"
                [editable]="editable"
                [hoverable]="hoverable"
                [leftContent]="leftContent"
                [maxLength]="maxLength"
                [removable]="removable"
                [showLoader]="showLoader"
                [size]="size"
                [status]="status"
                [value]="value"
                (edited)="editTag($event); documentationPropertyModeEdited.emitEvent($event)"
            />
            <ng-template #errorIcon>
                <tui-icon
                    icon="@tui.circle-alert"
                    class="error-icon"
                />
            </ng-template>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| autoColor | `boolean` | Autocolor for tag |
| disabled | `boolean` | Disabled state |
| editable | `boolean` | Tag can be edited |
| hoverable | `boolean` | Enable hovered state |
| leftContent | `PolymorpheusContent` | Content left to text |
| maxLength | `number | null` | Max length of tag (when editing) |
| removable | `boolean` | Tag can be removed |
| showLoader | `boolean` | Show loader |
| size | `TuiSizeL` | Size |
| status | `TuiStatus` | Changes color |
| value | `string` | String value of tag |
| edited | `string` | Emits tag change (if it was edited to space or empty string, it emits delete) |

### TypeScript

```ts
import type {TemplateRef} from '@angular/core';
import {Component, ViewChild} from '@angular/core';
import {changeDetection} from '@demo/emulate/change-detection';
import {DemoRoute} from '@demo/routes';
import {TuiDemo} from '@demo/utils';
import type {TuiSizeL, TuiSizeS} from '@taiga-ui/core';
import {TuiIcon} from '@taiga-ui/core';
import type {TuiStatus} from '@taiga-ui/legacy';
import {TuiTagModule} from '@taiga-ui/legacy';
import type {PolymorpheusContent} from '@taiga-ui/polymorpheus';

@Component({
    standalone: true,
    imports: [TuiDemo, TuiIcon, TuiTagModule],
    templateUrl: './index.html',
    styleUrls: ['./index.less'],
    changeDetection,
})
export default class Page {
    @ViewChild('errorIcon')
    protected errorTemplate?: TemplateRef<Record<string, unknown>>;

    protected removable = false;

    protected disabled = false;

    protected editable = false;

    protected autoColor = false;

    protected hoverable = false;

    protected showLoader = false;

    protected value = 'John Cleese';

    protected maxLengthVariants: number[] = [10, 20];

    protected maxLength: number | null = null;

    protected readonly statusVariants: readonly TuiStatus[] = [
        'default',
        'primary',
        'custom',
        'success',
        'error',
        'warning',
    ];

    protected status = this.statusVariants[0]!;

    protected readonly sizeVariants: ReadonlyArray<TuiSizeL | TuiSizeS> = ['s', 'm', 'l'];

    protected size: TuiSizeL | TuiSizeS = this.sizeVariants[1]!;

    protected readonly leftContentVariants = ['', 'Error icon'];

    protected leftContentSelected = '';

    protected readonly routes = DemoRoute;

    protected get leftContent(): PolymorpheusContent {
        return this.leftContentSelected && this.errorTemplate;
    }

    protected editTag(value: string): void {
        this.value = value;
    }
}
```
### LESS

```less
.error-icon {
    display: block;
    color: var(--tui-text-negative);
    inline-size: 1rem;
    block-size: 1rem;
}
```

---

# components/Textarea

- **Package**: `KIT`
- **Type**: components

A string input for multi line text


### How to Use (Import)

```ts
import {FormsModule} from '@angular/forms';
import {TuiTextfield} from '@taiga-ui/core';
import {TuiTextarea} from '@taiga-ui/kit';

@Component({
  standalone: true,
  imports: [
    // ...
    FormsModule,
    TuiTextfield,
    TuiTextarea,
  ],
})
export class Example {
  value = 'Value';
}
```
### How to Use (Template)

```html
<tui-textfield>
  <label tuiLabel>Label</label>
  <textarea
    tuiTextarea
    [(ngModel)]="value"
  ></textarea>
</tui-textfield>
```

### Example

```html
<ng-template>
                <tui-textfield
                    [iconEnd]="icons.iconEnd"
                    [iconStart]="icons.iconStart"
                    [tuiTextfieldCleaner]="textfieldDoc.cleaner"
                    [tuiTextfieldSize]="textfieldDoc.size"
                >
                    <label
                        *ngIf="textfieldDoc.size !== 's'"
                        tuiLabel
                    >
                        Label
                    </label>
                    <textarea
                        placeholder="Placeholder"
                        tuiTextarea
                        [formControl]="control"
                        [invalid]="controlDoc.invalid"
                        [max]="max"
                        [min]="min"
                        [readOnly]="controlDoc.readonly"
                        [tuiDisabled]="controlDoc.disabled"
                    ></textarea>
                </tui-textfield>
            </ng-template>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| [min] | `number` | Minimum number of rows in height |
| [max] | `number` | Maximum number of rows before scroll appears |

### TypeScript

```ts
import {Component, inject} from '@angular/core';
import {FormControl, ReactiveFormsModule} from '@angular/forms';
import {TuiDocControl} from '@demo/components/control';
import {TuiDocIcons} from '@demo/components/icons';
import {TuiDocTextfield} from '@demo/components/textfield';
import {changeDetection} from '@demo/emulate/change-detection';
import {encapsulation} from '@demo/emulate/encapsulation';
import {TuiDemo} from '@demo/utils';
import {TuiTextfield} from '@taiga-ui/core';
import {TUI_TEXTAREA_OPTIONS, TuiTextarea} from '@taiga-ui/kit';

@Component({
    standalone: true,
    imports: [
        ReactiveFormsModule,
        TuiDemo,
        TuiDocControl,
        TuiDocIcons,
        TuiDocTextfield,
        TuiTextarea,
        TuiTextfield,
    ],
    templateUrl: './index.html',
    encapsulation,
    changeDetection,
})
export default class PageComponent {
    protected readonly options = inject(TUI_TEXTAREA_OPTIONS);
    protected readonly examples = ['Sizes', 'Limit', 'Custom highlight', 'Icons'];
    protected readonly control = new FormControl(null);

    protected min = this.options.min;
    protected max = this.options.max;
}
```

---

# components/TextareaLegacy

- **Package**: `LEGACY`
- **Type**: components

This version of the component is deprecated and will be removed in the next major version. Use
            
                new version of Textarea
            
            instead!


### How to Use (Import)

```ts
import {FormsModule, ReactiveFormsModule} from '@angular/forms';
import {TuiTextareaModule} from '@taiga-ui/legacy';

@Component({
  standalone: true,
  imports: [
    // ...
    FormsModule,
    ReactiveFormsModule,
    TuiTextareaModule,
  ],
})
export class Example {
  testForm = new FormGroup({
    testValue: new FormControl('Content'),
  });
}
```
### How to Use (Template)

```html
<form [formGroup]="testForm">
  <tui-textarea formControlName="testValue">Bio</tui-textarea>
</form>
```

### Example

```html
<tui-textarea
                [expandable]="expandable"
                [focusable]="focusable"
                [formControl]="control"
                [maxLength]="maxLength"
                [pseudoFocus]="pseudoFocused"
                [pseudoHover]="pseudoHovered"
                [pseudoInvalid]="pseudoInvalid"
                [readOnly]="readOnly"
                [rows]="rows"
                [style.max-width.rem]="20"
                [tuiHintAppearance]="hintAppearance"
                [tuiHintContent]="hintContent"
                [tuiHintDirection]="hintDirection"
                [tuiTextfieldCleaner]="cleaner"
                [tuiTextfieldCustomContent]="customContent"
                [tuiTextfieldIcon]="icon"
                [tuiTextfieldIconLeft]="iconStart"
                [tuiTextfieldLabelOutside]="labelOutside"
                [tuiTextfieldSize]="size"
            >
                Textfield for multiline input. It can grow with its content.
                <textarea
                    tuiTextfieldLegacy
                    [placeholder]="placeholder"
                ></textarea>
            </tui-textarea>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| disabled | `boolean` | Disabled state (formControl.disable()) |
| expandable | `boolean` | Control height can be expanded to show all content |
| maxLength | `number` | Use maxLength for highlighting extra characters. If you want to limit the number of characters, add '"> with native maxlength attribute. |
| rows | `number` | A number of visible rows in expandable mode |
| tuiTextfieldIcon | `PolymorpheusContent` | Icon content. If content is a string, it is used as stringified svg or a name of an icon |

### TypeScript

```ts
import {Component} from '@angular/core';
import {FormControl, ReactiveFormsModule} from '@angular/forms';
import {changeDetection} from '@demo/emulate/change-detection';
import {DemoRoute} from '@demo/routes';
import {TuiDemo} from '@demo/utils';
import {tuiDocExcludeProperties} from '@taiga-ui/addon-doc';
import {tuiProvide} from '@taiga-ui/cdk';
import type {TuiSizeL, TuiSizeM} from '@taiga-ui/core';
import {TuiHint} from '@taiga-ui/core';
import {TuiTextareaModule, TuiTextfieldControllerModule} from '@taiga-ui/legacy';

import {ABSTRACT_PROPS_ACCESSOR} from '../abstract/abstract-props-accessor';
import {AbstractExampleTuiControl} from '../abstract/control';
import {InheritedDocumentation} from '../abstract/inherited-documentation';

@Component({
    standalone: true,
    imports: [
        InheritedDocumentation,
        ReactiveFormsModule,
        TuiDemo,
        TuiHint,
        TuiTextareaModule,
        TuiTextfieldControllerModule,
    ],
    templateUrl: './index.html',
    changeDetection,
    providers: [
        tuiProvide(ABSTRACT_PROPS_ACCESSOR, PageComponent),
        tuiDocExcludeProperties([
            'tuiTextfieldPrefix',
            'tuiTextfieldPostfix',
            'tuiTextfieldFiller',
        ]),
    ],
})
export default class PageComponent extends AbstractExampleTuiControl {
    protected readonly routes = DemoRoute;
    protected readonly iconVariants = ['', '@tui.search', '@tui.calendar'];
    protected icon = this.iconVariants[0]!;
    protected readonly rowsVariants: readonly number[] = [8, 15, 30];
    protected rows: number = this.rowsVariants[0]!;
    protected expandable = false;
    protected placeholder = 'Placeholder';

    public control = new FormControl('');
    public override readonly maxLengthVariants: readonly number[] = [50, 100, 500];
    public override maxLength: number | null = null;

    public override readonly sizeVariants: ReadonlyArray<TuiSizeL | TuiSizeM> = [
        'm',
        'l',
    ];

    public override size: TuiSizeL | TuiSizeM = this.sizeVariants[1]!;
}
```

---

# components/Textfield

- **Package**: `CORE`
- **Type**: components

Basic textfield component to implement more complex controls based upon it.

        
            Textfield based controls are in the process of being refactored. For now it is recommended to use old
            components from the Legacy package


### How to Use (Import)

```ts
import {Component} from '@angular/core';
import {TuiTextfield} from '@taiga-ui/core';
// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiTextfield,
  ],
})
export class Example {}
```
### How to Use (Template)

```html
<tui-textfield>
  <input
    tuiTextfield
    [(ngModel)]="value"
  />
</tui-textfield>
```

### Example

```html
<tui-textfield
                [filler]="filler"
                [iconEnd]="icons.iconEnd"
                [iconStart]="icons.iconStart"
                [tuiTextfieldCleaner]="textfield.cleaner"
                [tuiTextfieldSize]="textfield.size"
            >
                <label
                    *ngIf="textfield.size !== 's'"
                    tuiLabel
                >
                    I am a label
                </label>
                <input
                    placeholder="I am placeholder"
                    tuiTextfield
                    [disabled]="control.disabled"
                    [invalid]="control.invalid"
                    [readOnly]="control.readonly"
                    [(ngModel)]="value"
                />
                <tui-icon tuiTooltip="I am a hint" />
            </tui-textfield>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| [(ngModel)] | `string` | Value (or reactive control directives) |
| [filler] | `string` | Filler |

### TypeScript

```ts
import {Component} from '@angular/core';
import {FormsModule} from '@angular/forms';
import {TuiDocControl} from '@demo/components/control';
import {TuiDocIcons} from '@demo/components/icons';
import {TuiDocTextfield} from '@demo/components/textfield';
import {changeDetection} from '@demo/emulate/change-detection';
import {DemoRoute} from '@demo/routes';
import {TuiDemo} from '@demo/utils';
import {TuiIcon, TuiTextfield} from '@taiga-ui/core';
import {TuiTooltip} from '@taiga-ui/kit';

@Component({
    standalone: true,
    imports: [
        FormsModule,
        TuiDemo,
        TuiDocControl,
        TuiDocIcons,
        TuiDocTextfield,
        TuiIcon,
        TuiTextfield,
        TuiTooltip,
    ],
    templateUrl: './index.html',
    changeDetection,
})
export default class Page {
    protected routes = DemoRoute;
    protected readonly examples = [
        'Size',
        'States',
        'Dropdown',
        'Interactive icons',
        'Mask',
        'Fieldset',
    ];

    protected value = '';
    protected filler = '';
}
```

---

# components/ThumbnailCard

- **Package**: `ADDON COMMERCE`
- **Type**: components

Customizable credit card thumbnail


### How to Use (Import)

```ts
import {TuiThumbnailCard} from '@taiga-ui/addon-commerce';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiThumbnailCard,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<tui-thumbnail-card
  class="logo"
  paymentSystem="visa"
>
  {{ 1234 }}
</tui-thumbnail-card>
```

### Example

```html
<tui-thumbnail-card
                [iconEnd]="iconEnd"
                [iconStart]="iconStart"
                [monoHandler]="monoHandler"
                [paymentSystem]="paymentSystem"
                [size]="size"
                [style.background]="background"
            >
                {{ contentProjection }}
            </tui-thumbnail-card>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| iconStart | `string` | Icon on the left |
| iconEnd | `string` | Icon on the right |
| monoHandler | `TuiBooleanHandler<TuiPaymentSystem>` | " [documentationPropertyValues]="monoHandlerVariants" [(documentationPropertyValue)]="monoHandler" > Whether to use colored icon for particular payment system |
| paymentSystem | `TuiPaymentSystem | null` | Payment system |
| size | `TuiSizeXS | TuiSizeL` | Size |

### TypeScript

```ts
import {Component, inject} from '@angular/core';
import {changeDetection} from '@demo/emulate/change-detection';
import {TuiDemo} from '@demo/utils';
import type {TuiPaymentSystem} from '@taiga-ui/addon-commerce';
import {TUI_PAYMENT_SYSTEM_ICONS, TuiThumbnailCard} from '@taiga-ui/addon-commerce';
import type {TuiBooleanHandler} from '@taiga-ui/cdk';
import {TUI_TRUE_HANDLER} from '@taiga-ui/cdk';

@Component({
    standalone: true,
    imports: [TuiDemo, TuiThumbnailCard],
    templateUrl: './index.html',
    changeDetection,
})
export default class Example {
    protected readonly examples = [
        'Sizes',
        'A cool one',
        'Backgrounds',
        'External colored icon',
        'Textfield',
    ];

    protected readonly iconVariants = [
        '',
        '@tui.lock',
        '@tui.cloud',
        '@tui.user',
        '@tui.snowflake',
    ];

    protected iconStart = this.iconVariants[0]!;
    protected iconEnd = this.iconVariants[0]!;

    protected readonly paymentSystemVariants = Object.keys(
        inject(TUI_PAYMENT_SYSTEM_ICONS),
    ) as readonly TuiPaymentSystem[];

    protected readonly sizeVariants: ReadonlyArray<TuiThumbnailCard['size']> = [
        'l',
        'm',
        's',
        'xs',
    ];

    protected size = this.sizeVariants[0]!;

    protected readonly monoHandlerVariants: ReadonlyArray<
        TuiBooleanHandler<TuiPaymentSystem>
    > = [(ps) => ps === 'mir' || ps === 'visa' || ps === 'electron', TUI_TRUE_HANDLER];

    protected monoHandler = this.monoHandlerVariants[0]!;

    protected paymentSystem = this.paymentSystemVariants[0]!;

    protected contentProjection = '1234';
    protected background =
        '#2b9aff linear-gradient(110deg, transparent 70%, #0780ff 71%, #db028b 100%)';
}
```

---

# components/Tiles

- **Package**: `KIT`
- **Type**: components

Tiles
            is a light-weight touch-friendly tiles grid drag and drop component with no predefined styles.


### How to Use (Import)

```ts
import {TuiTiles} from '@taiga-ui/kit';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiTiles,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<tui-tiles [(order)]="order">
  <tui-tile
    *ngFor="let item of items"
    [width]="item.w"
    [height]="item.h"
  >
    <tui-icon
      tuiTileHandle
      icon="@tui.grip-vertical"
    />
    {{ item.content }}
  </tui-tile>
</tui-tiles>
```

### Example

```html
<tui-tiles
                class="tiles"
                [(order)]="order"
            >
                <tui-tile
                    *ngFor="let item of items; let index = index"
                    tuiTileHandle
                    [style.order]="order.get(index)"
                >
                    <div class="content">{{ item.name }}</div>
                </tui-tile>
            </tui-tiles>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| [debounce] | `number` | Debounce for the tile order change output. |
| [(order)] | `Map<number, number>` | The order of the tiles. |
| (orderChange) | `Map<number, number>` | Output for tile order change. |
| [width] | `number` | Width of the tile. |
| [height] | `number` | Height of the tile. |
| [tuiTileHandle] | `Directive` | Directive to determine the handle of the tui-tile. |

### TypeScript

```ts
import {NgForOf} from '@angular/common';
import {Component} from '@angular/core';
import {changeDetection} from '@demo/emulate/change-detection';
import {TuiDemo} from '@demo/utils';
import {TuiTitle} from '@taiga-ui/core';
import {TuiTiles} from '@taiga-ui/kit';

@Component({
    standalone: true,
    imports: [NgForOf, TuiDemo, TuiTiles, TuiTitle],
    templateUrl: './index.html',
    styleUrls: ['./index.less'],
    changeDetection,
})
export default class Page {
    protected debounce = 0;
    protected order = new Map<number, number>();

    protected width = 1;
    protected height = 1;

    protected readonly items = [
        {id: 1, name: 'John Cleese'},
        {id: 2, name: 'Eric Idle'},
        {id: 3, name: 'Graham Chapman'},
    ];
}
```
### LESS

```less
@import '@taiga-ui/core/styles/taiga-ui-local';

.tiles {
    inline-size: 10rem;
    gap: 1rem;
    grid-auto-rows: minmax(var(--tui-height-m), auto);
}

@media @tui-mobile {
    .tile_tall {
        --tui-height: 2;
    }
}

.content {
    .transition(box-shadow);

    display: flex;
    block-size: 100%;
    align-items: center;
    padding: 0 1rem;
    background: var(--tui-background-base);
    border-radius: var(--tui-radius-l);
    border: 1px solid var(--tui-border-normal);
    cursor: ns-resize;

    tui-tile._dragged & {
        box-shadow: var(--tui-shadow-small-hover);
    }
}
```

---

# components/Tooltip

- **Package**: `KIT`
- **Type**: components

Component to show icons with a hint by hover


### How to Use (Import)

```ts
import {TuiHint} from '@taiga-ui/core';
import {TuiTooltip} from '@taiga-ui/kit';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiTooltip,
    TuiHint,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<tui-icon tuiTooltip="Please don't touch this" />
```

---

# components/Tree

- **Package**: `KIT`
- **Type**: components

Component to display tree-like data structure


### How to Use (Import)

```ts
import {TuiTree} from '@taiga-ui/kit';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiTree,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<tui-tree
  [value]="value"
  [childrenHandler]="handler"
></tui-tree>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| tuiTreeController | `boolean` | Directive used to enable opening/closing of nodes with children. Boolean input is the default state. |

---

# utils/Browser

- **Package**: `CDK`
- **Type**: components/utils

A set of tools for work with browser


### How to Use (Import)

```ts
import {tuiIsEdge} from '@taiga-ui/cdk';
import {WA_USER_AGENT} from '@ng-web-apis/common';

// ...
export class Example {
  private readonly userAgent = inject(WA_USER_AGENT);

  areThereProblems = tuiIsEdge(this.userAgent);
}
// ...
```

---

# utils/DOM utils

- **Package**: `CDK`
- **Type**: components/utils


### How to Use (Import)

```ts
import {isElementAtPoint} from '@taiga-ui/cdk';

//...
isAtPoint = isElementAtPoint(element, point.x, point.y);
//...
```

---

# utils/format

- **Package**: `CDK / CORE`
- **Type**: components/utils

A set of format utils


---

# utils/Math

- **Package**: `CDK`
- **Type**: components/utils

A set of utils to calculate math


---

# utils/Miscellaneous

- **Package**: `CDK`
- **Type**: components/utils

Some utils to simplify the development process


---

# utils/Pure

- **Package**: `CDK`
- **Type**: components/utils

Decorator for memoization of pure methods and getters

        
            Decorator can help to cache result of methods or getters that can be computed once in the first call. The
            next calls to getter will just use computed static value.
        

        
            If you use decorator with methods, it does not compute the result again if arguments did not change after
            the last call (concept similar to Angular pure pipes)


---

# utils/Tokens

- **Package**: `CDK`
- **Type**: components/utils


---

# directives/ActiveZone

- **Package**: `CDK`
- **Type**: directives

tuiActiveZone
            allows to track a scope that user interacts with. For example, for closing dropdown on blur


### How to Use (Import)

```ts
import {TuiActiveZone} from '@taiga-ui/cdk';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiActiveZone,
  ],
  // ...
})
export class Example {
  active = false;

  onActiveZone(active: boolean) {
    this.active = active;
  }
}
```
### How to Use (Template)

```html
<div (tuiActiveZoneChange)="onActiveZone($event)">
  <button
    tuiButton
    type="button"
  >
    Button 1
  </button>
  <button
    tuiButton
    type="button"
  >
    Button 2
  </button>
</div>
```

---

# directives/Appearance

- **Package**: `CORE`
- **Type**: directives

A directive for visual presets of interactive components


### How to Use (Import)

```ts
import {Component} from '@angular/core';
import {TuiAppearance} from '@taiga-ui/core';
// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiAppearance,
  ],
})
export class Example {}
```
### How to Use (Template)

```html
<button
  tuiButton
  tuiAppearance="secondary"
>
  Press me
</button>
```

### Example

```html
<button
                tuiButton
                type="button"
                [appearance]="appearance"
                [tuiAppearanceFocus]="focus"
                [tuiAppearanceState]="state"
            >
                Appearance
            </button>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| tuiAppearance | `string` | Appearance (use appearance selector instead of tuiAppearance when used on a component that has such input due to hostDirectives ) |
| tuiAppearanceFocus | `boolean | null` | Manual override of focused state |
| tuiAppearanceState | `TuiInteractiveState | null` | Manual override of interactive state |

### TypeScript

```ts
import {Component} from '@angular/core';
import {changeDetection} from '@demo/emulate/change-detection';
import {TuiDemo} from '@demo/utils';
import type {TuiInteractiveState} from '@taiga-ui/core';
import {TuiButton} from '@taiga-ui/core';

@Component({
    standalone: true,
    imports: [TuiButton, TuiDemo],
    templateUrl: './index.html',
    changeDetection,
})
export default class Page {
    protected examples = ['Basic', 'Custom', 'Checkbox', 'Bundled'];
    protected descriptions = [
        'Interactive elements react to pointer natively but you can override state with inputs',
        'Use LESS or SCSS mixins to create your own appearances in global styles',
        'You can use it on input[type="checkbox"] to create a custom toggle component easily',
        'You can create your own appearances or use one of the bundled options',
    ];

    protected appearances = ['primary', 'secondary', 'flat'];
    protected appearance = this.appearances[0]!;

    protected states: readonly TuiInteractiveState[] = ['hover', 'active', 'disabled'];
    protected state: TuiInteractiveState | null = null;

    protected focus: boolean | null = null;
}
```

---

# directives/AutoFocus

- **Package**: `CDK`
- **Type**: directives

tuiAutoFocus
            allows to focus HTML-element right after its appearance. It works also with focusable Taiga UI components


### How to Use (Import)

```ts
@Component({
  standalone: true,
  imports: [
    // ...
    TuiAutoFocus,
  ],
  providers: [
    tuiAutoFocusOptionsProvider({
      delay: 300, // NaN = no delay/sync
      preventScroll: true,
    }),
  ],
})
export class Example {}
```
### How to Use (Template)

```html
<!-- Usual HTML element -->
<div
  tuiAutoFocus
  tabindex="0"
></div>

<!-- Or focusable component of Taiga UI -->
<tui-input
  tuiAutoFocus
  [(ngModel)]="model"
>
  Input
</tui-input>
```

---

# directives/Comment

- **Package**: `KIT`
- **Type**: directives


### How to Use (Import)

```ts
import {Component} from '@angular/core';
import {TuiComment} from '@taiga-ui/kit';
// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiComment,
  ],
})
export class Example {}
```
### How to Use (Template)

```html
<div tuiComment="bottom">comment</div>
```

---

# directives/CopyProcessor

- **Package**: `CDK`
- **Type**: directives

Directive is used to processed text when coping


### How to Use (Import)

```ts
import {TuiCopyProcessor} from '@taiga-ui/core';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiCopyProcessor,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<span [tuiCopyProcessor]="processor">
  ...
</div>
```

---

# directives/DateFormat

- **Package**: `CORE`
- **Type**: directives

Directive allows to customize
            TuiInputDate
            ,
            TuiInputDateRange
            ,
            TuiInputDateMulti
            and
            TuiInputDateTime
            date format.


### How to Use (Import)

```ts
import {TuiDateFormat} from '@taiga-ui/core';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiDateFormat,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<tui-input-date [tuiDateFormat]="{mode, separator}"></tui-input-date>
```

---

# directives/Dropdown

- **Package**: `CORE`
- **Type**: directives

tuiDropdown
            shows a dropdown with custom template. Use
            
                ActiveZone
            
            directive to hide dropdown.
        

        
            See also
            
                DropdownOpen


### How to Use (Import)

```ts
import {TuiDropdown} from '@taiga-ui/core';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiDropdown,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<div
  [tuiDropdown]="dropdownContent"
  [tuiDropdownManual]="open"
>
  Host element
</div>

<ng-template #dropdownContent>Dropdown content</ng-template>
```

### Example

```html
<span (tuiActiveZoneChange)="onActiveZone($event)">
                <button
                    tuiButton
                    type="button"
                    [tuiDropdown]="dropdownContent"
                    [tuiDropdownAlign]="dropdown.align"
                    [tuiDropdownDirection]="dropdown.direction"
                    [tuiDropdownLimitWidth]="dropdown.limitWidth"
                    [tuiDropdownManual]="open"
                    [tuiDropdownMaxHeight]="dropdown.maxHeight"
                    [tuiDropdownMinHeight]="dropdown.minHeight"
                    [tuiDropdownOffset]="dropdown.offset"
                    (click)="onClick()"
                    (tuiObscured)="onObscured($event)"
                >
                    PRESS!
                    <i>* There is also a pretty long text to check its width limitations</i>
                </button>
                <ng-template #dropdownContent>
                    <div [style.padding.rem]="1">
                        Here can be any content
                        <p>You can even insert other components:</p>
                        <button
                            tuiButton
                            type="button"
                        >
                            Do not touch!
                        </button>
                        <p>Everything you want... *</p>
                        <sub>* except cases of human rights violation</sub>
                    </div>
                </ng-template>
            </span>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| [tuiDropdownManual] | `boolean` | Show dropdown (basic manual implementation, see related pages for other options) |
| [tuiDropdown] | `PolymorpheusContent` | Content |

### TypeScript

```ts
import {Component, forwardRef} from '@angular/core';
import {TuiDocDropdown} from '@demo/components/dropdown';
import {changeDetection} from '@demo/emulate/change-detection';
import {DemoRoute} from '@demo/routes';
import {TuiDemo} from '@demo/utils';
import {TuiActiveZone, TuiObscured} from '@taiga-ui/cdk';
import {TuiButton, TuiDropdown} from '@taiga-ui/core';

import {ABSTRACT_PROPS_ACCESSOR} from '../../components/abstract/abstract-props-accessor';
import {AbstractExampleTuiDropdown} from '../../components/abstract/dropdown';
import {DropdownDocumentation} from '../../components/abstract/dropdown-documentation';

@Component({
    standalone: true,
    imports: [
        DropdownDocumentation,
        TuiActiveZone,
        TuiButton,
        TuiDemo,
        TuiDocDropdown,
        TuiDropdown,
        TuiObscured,
    ],
    templateUrl: './index.html',
    changeDetection,
    providers: [
        {
            provide: ABSTRACT_PROPS_ACCESSOR,
            useExisting: forwardRef(() => PageComponent),
        },
    ],
})
export default class PageComponent extends AbstractExampleTuiDropdown {
    protected readonly routes = DemoRoute;
    protected readonly examples = [
        'Basic',
        'Interesting',
        'Change detection',
        'Appearance',
        'Manual',
        'Mobile',
    ];

    protected open = false;

    protected onClick(): void {
        this.open = !this.open;
    }

    protected onObscured(obscured: boolean): void {
        if (obscured) {
            this.open = false;
        }
    }

    protected onActiveZone(active: boolean): void {
        this.open = active && this.open;
    }
}
```

---

# directives/DropdownContext

- **Package**: `CORE`
- **Type**: directives

DropdownContext
            allows to show custom right click context dropdown.
        
        To close dropdown:
        
            
                Use
                Esc
            
            
                Make
                mouse left/right click
                outside of dropdown content
            
            
                Manually toggle
                tuiDropdown
                to
                false
                using template reference variable (see first example)


### How to Use (Import)

```ts
import {TuiDropdown} from '@taiga-ui/core';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiDropdown,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<div
  tuiDropdownContext
  [tuiDropdown]="content"
>
  Host element
</div>

<ng-template
  #content
  let-close
>
  Dropdown content
  <button (click)="close()"></button>
</ng-template>
```

### Example

```html
<p
                tuiDropdownContext
                [tuiDropdown]="dropdownContent"
                [tuiDropdownAlign]="dropdownAlign"
                [tuiDropdownDirection]="dropdownDirection"
                [tuiDropdownLimitWidth]="dropdownLimitWidth"
                [tuiDropdownMaxHeight]="dropdownMaxHeight"
                [tuiDropdownMinHeight]="dropdownMinHeight"
                [tuiDropdownOffset]="dropdownOffset"
            >
                Right click on me to
                <strong>see a dropdown</strong>
                <ng-template #dropdownContent>Hello there!</ng-template>
            </p>
```

### TypeScript

```ts
import {Component, forwardRef} from '@angular/core';
import {changeDetection} from '@demo/emulate/change-detection';
import {TuiDemo} from '@demo/utils';
import {TuiDropdown} from '@taiga-ui/core';

import {ABSTRACT_PROPS_ACCESSOR} from '../../components/abstract/abstract-props-accessor';
import {AbstractExampleTuiDropdown} from '../../components/abstract/dropdown';
import {DropdownDocumentation} from '../../components/abstract/dropdown-documentation';

@Component({
    standalone: true,
    imports: [DropdownDocumentation, TuiDemo, TuiDropdown],
    templateUrl: './index.html',
    changeDetection,
    providers: [
        {
            provide: ABSTRACT_PROPS_ACCESSOR,
            useExisting: forwardRef(() => PageComponent),
        },
    ],
})
export default class PageComponent extends AbstractExampleTuiDropdown {}
```

---

# directives/DropdownHover

- **Package**: `CORE`
- **Type**: directives

DropdownHover
            shows dropdown with custom template upon hover


### How to Use (Import)

```ts
import {TuiDropdown} from '@taiga-ui/core';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiDropdown,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<div
  tuiDropdownHover
  [tuiDropdown]="content"
>
  Host element
</div>

<ng-template #content>Dropdown content</ng-template>
```

### Example

```html
<p
                tuiDropdownHover
                [tuiDropdown]="dropdownContent"
                [tuiDropdownAlign]="dropdownAlign"
                [tuiDropdownDirection]="dropdownDirection"
                [tuiDropdownHideDelay]="hideDelay"
                [tuiDropdownLimitWidth]="dropdownLimitWidth"
                [tuiDropdownMaxHeight]="dropdownMaxHeight"
                [tuiDropdownMinHeight]="dropdownMinHeight"
                [tuiDropdownOffset]="dropdownOffset"
                [tuiDropdownShowDelay]="showDelay"
            >
                Hover pointer over
                <strong>to see a dropdown</strong>
            </p>
            <ng-template #dropdownContent>
                <div [style.padding.rem]="1">
                    Here you can have any content
                    <p>You can select a text inside a dropdown and it will not close a dropdown</p>
                    <button
                        tuiButton
                        type="button"
                    >
                        Button
                    </button>
                </div>
            </ng-template>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| tuiDropdownShowDelay | `number` | Show delay for dropdown appearance after hover |
| tuiDropdownHideDelay | `number` | Hide delay for dropdown to disappear after pointer is moved away |

### TypeScript

```ts
import {Component, forwardRef} from '@angular/core';
import {changeDetection} from '@demo/emulate/change-detection';
import {TuiDemo} from '@demo/utils';
import {TuiButton, TuiDropdown} from '@taiga-ui/core';

import {ABSTRACT_PROPS_ACCESSOR} from '../../components/abstract/abstract-props-accessor';
import {AbstractExampleTuiDropdown} from '../../components/abstract/dropdown';
import {DropdownDocumentation} from '../../components/abstract/dropdown-documentation';

@Component({
    standalone: true,
    imports: [DropdownDocumentation, TuiButton, TuiDemo, TuiDropdown],
    templateUrl: './index.html',
    changeDetection,
    providers: [
        {
            provide: ABSTRACT_PROPS_ACCESSOR,
            useExisting: forwardRef(() => PageComponent),
        },
    ],
})
export default class PageComponent extends AbstractExampleTuiDropdown {
    protected showDelay = 200;

    protected hideDelay = 500;
}
```

---

# directives/DropdownOpen

- **Package**: `CORE`
- **Type**: directives

DropdownOpen
            is a composite dropdown directive, similar to manual dropdown, but it also takes care of opening and closing
            on its own.
        

        
            If an element is a textfield (
            input
            or
            textarea
            ), arrow down press opens a dropdown. The next press focuses the first item from the list.
        

        
            If it is not a textfield, click opens and closes a dropdown. By default directive is applied to the first
            focusable element inside. If you want another element to be the host, use
            #tuiDropdownHost
            reference.


### How to Use (Import)

```ts
import {TuiDropdown} from '@taiga-ui/core';
// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiDropdown,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<button
  tuiButton
  type="button"
  [tuiDropdown]="dropdown"
  [(tuiDropdownOpen)]="open"
>
  Open menu
  <ng-template #dropdown>
    <tui-data-list>
      <button
        *ngFor="let item of items"
        tuiOption
        (click)="onClick()"
      >
        {{item}}
      </button>
    </tui-data-list>
  </ng-template>
</button>
```

### Example

```html
<tui-input
                class="input"
                [ngModel]="input"
                [tuiDropdown]="template ? dropdown : content"
                [tuiDropdownAlign]="dropdownAlign"
                [tuiDropdownDirection]="dropdownDirection"
                [tuiDropdownEnabled]="enabled"
                [tuiDropdownLimitWidth]="dropdownLimitWidth"
                [tuiDropdownMaxHeight]="dropdownMaxHeight"
                [tuiDropdownMinHeight]="dropdownMinHeight"
                [tuiDropdownOffset]="dropdownOffset"
                [(tuiDropdownOpen)]="open"
                (ngModelChange)="onInput($event)"
            >
                Start typing
            </tui-input>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| tuiDropdownOpen | `boolean` | Open/close state |
| tuiDropdownEnabled | `boolean` | Should internal logic handle opening |
| tuiDropdown | `PolymorpheusContent` | Content inside a dropdown |

### TypeScript

```ts
import {Component, forwardRef} from '@angular/core';
import {FormsModule} from '@angular/forms';
import {changeDetection} from '@demo/emulate/change-detection';
import {TuiDemo} from '@demo/utils';
import {TuiButton, TuiDropdown} from '@taiga-ui/core';
import {TuiInputModule} from '@taiga-ui/legacy';

import {ABSTRACT_PROPS_ACCESSOR} from '../../components/abstract/abstract-props-accessor';
import {AbstractExampleTuiDropdown} from '../../components/abstract/dropdown';
import {DropdownDocumentation} from '../../components/abstract/dropdown-documentation';

@Component({
    standalone: true,
    imports: [
        DropdownDocumentation,
        FormsModule,
        TuiButton,
        TuiDemo,
        TuiDropdown,
        TuiInputModule,
    ],
    templateUrl: './index.html',
    styleUrls: ['./index.less'],
    changeDetection,
    providers: [
        {
            provide: ABSTRACT_PROPS_ACCESSOR,
            useExisting: forwardRef(() => PageComponent),
        },
    ],
})
export default class PageComponent extends AbstractExampleTuiDropdown {
    protected open = false;

    protected sided = false;

    protected input = '';

    protected enabledVariants = [true, 'getter this.input.length > 2'];

    protected enabledSelected = this.enabledVariants[0]!;

    protected readonly contentVariants = ['Template', 'Custom string'];

    protected content = this.contentVariants[0]!;

    protected get template(): boolean {
        return this.content === 'Template';
    }

    protected get enabled(): boolean {
        return this.enabledSelected === true || this.input.length > 2;
    }

    protected onInput(input: string): void {
        this.input = input;
        this.open = this.enabled;
    }

    protected onClick(): void {
        this.open = false;
    }
}
```
### LESS

```less
.input {
    inline-size: 15.625rem;
}

.dropdown {
    padding: 1.25rem;
}

.buttons {
    display: flex;
    margin-bottom: 0;
}

.button {
    flex: 1;

    &:first-child {
        margin-right: 0.75rem;
    }
}
```

---

# directives/DropdownSelection

- **Package**: `CORE`
- **Type**: directives

DropdownSelection
            shows dropdown with custom template on selected text


### How to Use (Import)

```ts
import {TuiDropdown} from '@taiga-ui/core';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiDropdown,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<div
  tuiDropdownSelection
  [tuiDropdown]="content"
>
  Host element
</div>

<ng-template #content>Dropdown content</ng-template>
```

### Example

```html
<p
                tuiDropdownSelection
                [tuiDropdown]="dropdownContent"
                [tuiDropdownAlign]="dropdownAlign"
                [tuiDropdownDirection]="dropdownDirection"
                [tuiDropdownLimitWidth]="dropdownLimitWidth"
                [tuiDropdownMaxHeight]="dropdownMaxHeight"
                [tuiDropdownMinHeight]="dropdownMinHeight"
                [tuiDropdownOffset]="dropdownOffset"
                [tuiDropdownSelectionPosition]="position"
            >
                Select a text to
                <strong>see a dropdown</strong>
            </p>
            <ng-template #dropdownContent>
                <div class="dropdown">
                    Here you can have any content
                    <p>You can select a text inside a dropdown and it will not close a dropdown</p>
                    <button
                        tuiButton
                        type="button"
                    >
                        Button
                    </button>
                </div>
            </ng-template>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| tuiDropdownSelection | `TuiBooleanHandler<Range>` | " > Directive selector . Optional: you can also set a handler that gets Range and returns show/close dropdown |
| tuiDropdownSelectionPosition | `'selection' | 'word' | 'tag'` | Position of dropdown near text selection |

### TypeScript

```ts
import {Component, forwardRef} from '@angular/core';
import {changeDetection} from '@demo/emulate/change-detection';
import {TuiDemo} from '@demo/utils';
import {TuiButton, TuiDropdown} from '@taiga-ui/core';

import {ABSTRACT_PROPS_ACCESSOR} from '../../components/abstract/abstract-props-accessor';
import {AbstractExampleTuiDropdown} from '../../components/abstract/dropdown';
import {DropdownDocumentation} from '../../components/abstract/dropdown-documentation';

@Component({
    standalone: true,
    imports: [DropdownDocumentation, TuiButton, TuiDemo, TuiDropdown],
    templateUrl: './index.html',
    styleUrls: ['./index.less'],
    changeDetection,
    providers: [
        {
            provide: ABSTRACT_PROPS_ACCESSOR,
            useExisting: forwardRef(() => PageComponent),
        },
    ],
})
export default class PageComponent extends AbstractExampleTuiDropdown {
    protected positionVariants = ['selection', 'word', 'tag'] as const;

    protected position: 'selection' | 'tag' | 'word' = this.positionVariants[0];
}
```
### LESS

```less
.dropdown {
    max-inline-size: 20rem;
    padding: 0.5rem 1.25rem;
}
```

---

# directives/ElasticSticky

- **Package**: `ADDON-MOBILE`
- **Type**: directives

Directive allows to scale "stuck" sticky heading. It can also be used as service
            TuiElasticStickyService


### How to Use (Import)

```ts
import {TuiElasticSticky} from '@taiga-ui/addon-mobile';
import {TuiScrollbar} from '@taiga-ui/core';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiScrollbar,
    TuiElasticSticky,
  ],
  // ...
})
export class Example {
  scale = 1;

  // ...

  onElastic(scale: number) {
    this.scale = clamp(scale, 0.5, 1); // We do not want to scale below 50%
  }
}
```
### How to Use (Template)

```html
<tui-scrollbar>
  <header (tuiElasticSticky)="onElastic($event)">I'm sticky</header>
  ...
</tui-scrollbar>
```

---

# directives/Element

- **Package**: `CDK`
- **Type**: directives

Directive is used to get a link to a native element as template reference variable (analogue of
            &#64;ViewChild(&#39;ref&#39;, &#123;read: ElementRef&#125;
            for template)


### How to Use (Import)

```ts
import {TuiElement} from '@taiga-ui/cdk';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiElement,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<tui-scrollbar
  #element="elementRef"
  tuiElement
>
  <some-infinite-scroll-library [scrollingElement]="element.nativeElement" />
</tui-scrollbar>
```

---

# directives/Fade

- **Package**: `KIT`
- **Type**: directives

Directive that uses masking to fade out overflown content


### How to Use (Import)

```ts
import {Component} from '@angular/core';
import {TuiFade} from '@taiga-ui/kit';
// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiFade,
  ],
})
export class Example {}
```
### How to Use (Template)

```html
<div tuiFade>
  <!-- long text here -->
</div>
```

### Example

```html
<div
                tuiFade
                class="fade"
                [tuiFadeHeight]="lineHeight"
                [tuiFadeOffset]="offset"
                [tuiFadeSize]="size"
            >
                I am a very long text with
                <code>white-space: nowrap</code>
                that fades
            </div>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| tuiFade | `TuiOrientation` | Orientation of the fade |
| tuiFadeHeight | `string` | Line height (required for multiline text fade) |
| tuiFadeOffset | `string` | Offset from the edge for the fade to start |
| tuiFadeSize | `string` | Size of the fade |

### TypeScript

```ts
import {Component} from '@angular/core';
import {changeDetection} from '@demo/emulate/change-detection';
import {TuiDemo} from '@demo/utils';
import {TuiFade} from '@taiga-ui/kit';

@Component({
    standalone: true,
    imports: [TuiDemo, TuiFade],
    templateUrl: './index.html',
    styleUrls: ['./index.less'],
    changeDetection,
})
export default class Page {
    protected readonly examples = ['Basic', 'Multiline', 'Vertical', 'Hyphens'];

    protected lineHeight = '100%';
    protected size = '1.5em';
    protected offset = '0em';
}
```
### LESS

```less
.fade {
    font: var(--tui-font-heading-6);
    white-space: nowrap;
}
```

---

# directives/FluidTypography

- **Package**: `KIT`
- **Type**: directives

A directive that adjusts font size for the text to fit in the container


### How to Use (Import)

```ts
import {Component} from '@angular/core';
import {TuiTextfield} from '@taiga-ui/core';
import {TuiFluidTypography} from '@taiga-ui/kit';
// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiTextfield,
    TuiFluidTypography,
  ],
})
export class Example {}
```
### How to Use (Template)

```html
<tui-textfield>
  <input
    tuiTextfield
    tuiFluidTypography
  />
</tui-textfield>
```

---

# directives/Highlight

- **Package**: `KIT`
- **Type**: directives

Directive is used to highlight text in element.

        
            You can configure the directive with
            TUI_HIGHLIGHT_OPTIONS
            token.
            
            Allowed options:
        
        
            
                highlightColor:
            
            The default color for the highlight.
        

        
            Use function
            tuiHighlightOptionsProvider
            to provide new value of this token.
        

        Does not work with inline elements


### How to Use (Import)

```ts
import {TuiHighlight} from '@taiga-ui/kit';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiHighlight,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<div
  [tuiHighlight]="query"
  [tuiHighlightColor]="'#228B22'"
>
  ...
</div>
```

---

# directives/Hint

- **Package**: `CORE`
- **Type**: directives

Directive to show a hint by hover of an element


### How to Use (Import)

```ts
import {TuiHint} from '@taiga-ui/core';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiHint,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<button
  tuiButton
  type="button"
  tuiHint="Custom host with text tooltip"
>
  Press me
</button>
<button
  tuiButton
  type="button"
  [tuiHint]="template"
>
  Press him ↑
</button>

<ng-template #template>Reusable template</ng-template>
```

### Example

```html
<ng-template #hint>
                To be accessible, hint should be set to a focusable element. See
                <a
                    tuiLink
                    [routerLink]="routes.HintDescribe"
                >
                    <code>HintDescribe</code>
                </a>
            </ng-template>
            <span
                [tuiHint]="hint"
                [tuiHintAppearance]="appearance"
                [tuiHintDescribe]="'qwerty'"
                [tuiHintDirection]="direction"
                [tuiHintHideDelay]="hideDelay"
                [tuiHintShowDelay]="showDelay"
            >
                Hover it!
            </span>
            <input id="qwerty" />
```

### API

| Property | Type | Description |
|----------|-----|----------|
| tuiHint | `PolymorpheusContent` | Content |
| tuiHintShowDelay | `number` | Show Delay |
| tuiHintHideDelay | `number` | Hide Delay |

### TypeScript

```ts
import {Component} from '@angular/core';
import {changeDetection} from '@demo/emulate/change-detection';
import {DemoRoute} from '@demo/routes';
import {TuiDemo} from '@demo/utils';
import {tuiProvide} from '@taiga-ui/cdk';
import {TuiHint} from '@taiga-ui/core';

import {ABSTRACT_PROPS_ACCESSOR} from '../../components/abstract/abstract-props-accessor';
import {AbstractExampleTuiHint} from '../../components/abstract/hint';
import {InheritedDocumentation} from '../../components/abstract/inherited-documentation';

@Component({
    standalone: true,
    imports: [InheritedDocumentation, TuiDemo, TuiHint],
    templateUrl: './index.html',
    changeDetection,
    providers: [tuiProvide(ABSTRACT_PROPS_ACCESSOR, PageComponent)],
})
export default class PageComponent extends AbstractExampleTuiHint {
    protected readonly examples = ['Basic', 'Customizing', 'Nested', 'Auto', 'Form'];

    protected showDelay = 500;
    protected hideDelay = 200;
    protected readonly routes = DemoRoute;
}
```

---

# directives/HintDescribe

- **Package**: `CORE`
- **Type**: directives

Directive to show a hint in accessible way upon keyboard focus


### How to Use (Import)

```ts
import {TuiHint} from '@taiga-ui/core';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiHint,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<button
  tuiButton
  tuiHint="I'm a hint"
  tuiHintDescribe
>
  Press me
</button>
```

### Example

```html
<input
                placeholder="My id is 'qwerty'"
                tuiHint="I will be visible upon keyboard focus"
                tuiHintDescribe="qwerty"
                [tuiHintAppearance]="appearance"
                [tuiHintDirection]="direction"
            />
```

### API

| Property | Type | Description |
|----------|-----|----------|
| tuiHint | `PolymorpheusContent` | Content |
| tuiHintDescribe | `string` | Id of the element |

### TypeScript

```ts
import {Component} from '@angular/core';
import {changeDetection} from '@demo/emulate/change-detection';
import {TuiDemo} from '@demo/utils';
import {tuiProvide} from '@taiga-ui/cdk';
import {TuiHint} from '@taiga-ui/core';

import {ABSTRACT_PROPS_ACCESSOR} from '../../components/abstract/abstract-props-accessor';
import {AbstractExampleTuiHint} from '../../components/abstract/hint';
import {InheritedDocumentation} from '../../components/abstract/inherited-documentation';

@Component({
    standalone: true,
    imports: [InheritedDocumentation, TuiDemo, TuiHint],
    templateUrl: './index.html',
    changeDetection,
    providers: [tuiProvide(ABSTRACT_PROPS_ACCESSOR, PageComponent)],
})
export default class PageComponent extends AbstractExampleTuiHint {
    protected id = '';
}
```

---

# directives/HintManual

- **Package**: `CORE`
- **Type**: directives

Directive to show a hint manually


### How to Use (Import)

```ts
import {TuiHint} from '@taiga-ui/core';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiHint,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<button
  tuiButton
  type="button"
  tuiHint="Custom host with text tooltip"
  [tuiHintManual]="true"
>
  Press me
</button>

<button
  tuiButton
  type="button"
  [tuiHint]="template"
  [tuiHintManual]="true"
>
  Press that ↑
</button>

<ng-template #template>Reusable template</ng-template>
```

### Example

```html
<button
                tuiButton
                tuiHint="It says 'Hi all!' into console"
                type="button"
                [tuiHintAppearance]="appearance"
                [tuiHintDirection]="direction"
                [tuiHintManual]="show"
                (click)="sayHi()"
            >
                A strange button
            </button>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| tuiHint | `PolymorpheusContent` | Content |
| tuiHintManual | `boolean` | Show/hide hint |

### TypeScript

```ts
import {Component} from '@angular/core';
import {changeDetection} from '@demo/emulate/change-detection';
import {TuiDemo} from '@demo/utils';
import {tuiProvide} from '@taiga-ui/cdk';
import {TuiButton, TuiHint} from '@taiga-ui/core';

import {ABSTRACT_PROPS_ACCESSOR} from '../../components/abstract/abstract-props-accessor';
import {AbstractExampleTuiHint} from '../../components/abstract/hint';
import {InheritedDocumentation} from '../../components/abstract/inherited-documentation';

@Component({
    standalone: true,
    imports: [InheritedDocumentation, TuiButton, TuiDemo, TuiHint],
    templateUrl: './index.html',
    changeDetection,
    providers: [tuiProvide(ABSTRACT_PROPS_ACCESSOR, PageComponent)],
})
export default class PageComponent extends AbstractExampleTuiHint {
    protected show = false;

    protected sayHi(): void {
        console.info('Hi all!');
    }
}
```

---

# directives/HintPointer

- **Package**: `CORE`
- **Type**: directives

A directive to show a hint above the cursor


### How to Use (Import)

```ts
import {TuiHint} from '@taiga-ui/core';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiHint,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<div
  tuiHintPointer
  tuiHint="Hint text"
>
  Block with pointer hint
</div>
```

### Example

```html
<div
                tuiHint="Some information"
                tuiHintPointer
                [tuiHintAppearance]="appearance"
                [tuiHintDirection]="direction"
                [tuiHintHideDelay]="hideDelay"
                [tuiHintShowDelay]="showDelay"
            >
                It is followed inside the block
            </div>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| tuiHint | `PolymorpheusContent` | Hint content |
| tuiHintShowDelay | `number` | Show Delay |
| tuiHintHideDelay | `number` | Hide Delay |

### TypeScript

```ts
import {Component} from '@angular/core';
import {changeDetection} from '@demo/emulate/change-detection';
import {TuiDemo} from '@demo/utils';
import {tuiProvide} from '@taiga-ui/cdk';
import {TuiHint, TuiHintDirective} from '@taiga-ui/core';

import {ABSTRACT_PROPS_ACCESSOR} from '../../components/abstract/abstract-props-accessor';
import {AbstractExampleTuiHint} from '../../components/abstract/hint';
import {InheritedDocumentation} from '../../components/abstract/inherited-documentation';

@Component({
    standalone: true,
    imports: [InheritedDocumentation, TuiDemo, TuiHint, TuiHintDirective],
    templateUrl: './index.html',
    changeDetection,
    providers: [tuiProvide(ABSTRACT_PROPS_ACCESSOR, PageComponent)],
})
export default class PageComponent extends AbstractExampleTuiHint {
    protected showDelay = 0;
    protected hideDelay = 0;
}
```

---

# directives/HoveredChange

- **Package**: `CDK`
- **Type**: directives

tuiHoveredChange
            is used for emitting true/false when users hovers over an element or moves cursor away from it.


### How to Use (Import)

```ts
import {TuiHovered} from '@taiga-ui/cdk';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiHovered,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<button
  tuiButton
  type="button"
  (tuiHoveredChange)="onHovered($event)"
>
  Hover over me to reveal hidden text!
</button>
```

---

# directives/LazyLoading

- **Package**: `KIT`
- **Type**: directives

Directive can be used for image lazy loading. It is the same as
            tuiLoading="lazy"
            but supports also old browsers


### How to Use (Import)

```ts
import {TuiImgLazyLoading} from '@taiga-ui/kit';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiImgLazyLoading,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<img
  src="myImage.jpg"
  height="200"
  width="300"
  tuiLoading="lazy"
/>
```

---

# directives/Let

- **Package**: `CDK`
- **Type**: directives

Directive
            tuiLet
            allows to reuse computed value in several places in template to avoid recalculations of getters or many
            async pipes


### How to Use (Import)

```ts
import {TuiLet} from '@taiga-ui/cdk';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiLet,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<ng-container *tuiLet="someStream | async as streamValue">
  <p>
    {{streamValue}}
    <tui-icon [tuiTooltip]="template"></tui-icon>
  </p>
  <button
    tuiButton
    type="button"
  >
    Delete {{streamValue}}
  </button>
  <ng-template #template>{{streamValue}} is a current value of a someStream</ng-template>
</ng-container>
```

---

# directives/Media

- **Package**: `CDK`
- **Type**: directives

Directive for declarative work with HTML5 video and audio


### How to Use (Import)

```ts
import {TuiMedia} from '@taiga-ui/cdk';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiMedia,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<video
  tuiMedia
  controls
>
  <source
    *tuiHdpi
    src="4k.mp4"
    type="video/mp4"
  />
  <source
    src="1080p.mp4"
    type="video/mp4"
  />
</video>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| currentTime | `number` | Current time |
| paused | `boolean` | Paused state |
| playbackRate | `number` | Playback speed |
| volume | `number` | Volume |

---

# directives/NumberFormat

- **Package**: `CORE`
- **Type**: directives

Directive allows to customize
            TuiInputNumber
            ,
            TuiInputSlider
            ,
            TuiInputRange
            number format.


### How to Use (Import)

```ts
import {TuiNumberFormat} from '@taiga-ui/core';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiNumberFormat,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<tui-textfield>
  <input
    tuiInputNumber
    [tuiNumberFormat]="{decimal, precision, zeroPadding, rounding, thousandSeparator, decimalSeparator}"
  />
</tui-textfield>
```

---

# directives/Pan

- **Package**: `CDK`
- **Type**: directives

tuiPan
            The directive emits delta between mousemove / touchmove events. You can use it to change the coordinates of
            an element as in example below


### How to Use (Import)

```ts
import {TuiPan} from '@taiga-ui/cdk';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiPan,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<div (tuiPan)="..."></div>
```

---

# directives/Present

- **Package**: `KIT`
- **Type**: directives

tuiPresentChange
            allows to detect appearance of elements in DOM


### How to Use (Import)

```ts
import {TuiPresent} from '@taiga-ui/kit';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiPresent,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<div
  [class.hidden]="!visible"
  (tuiPresentChange)="onPresentChange($event)"
>
  I am a component hidden with CSS
</div>
or
<div
  *ngIf="visible"
  (tuiPresentChange)="onPresentChange($event)"
>
  I am a component hidden with *ngIf
</div>
```

---

# directives/ProgressSegmented

- **Package**: `KIT`
- **Type**: directives

ProgressSegmented
        is a component to visually represent the completion of a process or operation (as a segmented bar). It shows how
        much has been completed and how much remains.

        
            Actually, this component is the same
            
                ProgressBar
            
            processed by css-property
            
                mask
            
            .


### How to Use (Import)

```ts
import {TuiProgress} from '@taiga-ui/kit';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiProgress,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<progress
  tuiProgressBar
  [max]="5"
  [segments]="5"
  [value]="3"
></progress>
```

### Example

```html
<progress
                tuiProgressBar
                [max]="max"
                [segments]="segments"
                [size]="size"
                [tuiProgressColorSegments]="computedColors"
                [value]="value"
            ></progress>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| segments | `number` | A number of visual segments. It must be a valid integer number between 0 and max . |
| value | `number` | This property specifies how much of the task that has been completed. It must be a valid integer number between 0 and max . |
| max | `number` | This property describes how much work the task indicated by the progress element requires. It must be a valid positive integer number. The default value is 1 . |
| size | `TuiSizeXS | TuiSizeXXL` | Height of the progress. |
| tuiProgressColorSegments | `string[]` | Colors of the progress segments. Use CSS-property color to set single solid color of progress indicator. |

### TypeScript

```ts
import {ChangeDetectionStrategy, Component} from '@angular/core';
import {RouterLink} from '@angular/router';
import {DemoRoute} from '@demo/routes';
import {TuiDemo} from '@demo/utils';
import {TuiLink} from '@taiga-ui/core';
import type {TuiProgressBar} from '@taiga-ui/kit';
import {TuiProgress} from '@taiga-ui/kit';

@Component({
    standalone: true,
    imports: [RouterLink, TuiDemo, TuiLink, TuiProgress],
    templateUrl: './index.html',
    changeDetection: ChangeDetectionStrategy.OnPush,
})
export default class Page {
    protected readonly routes = DemoRoute;
    protected value = 3;
    protected max = 5;
    protected segments = this.max;

    protected examples = ['Basic', 'Sizes', 'Colors', 'With labels', 'No round corners'];

    protected readonly sizeVariants: ReadonlyArray<TuiProgressBar['size']> = [
        'xs',
        's',
        'm',
        'l',
        'xl',
        'xxl',
    ];

    protected size: TuiProgressBar['size'] = this.sizeVariants[2]!;

    protected readonly colorsVariants: readonly string[][] = [
        ['var(--tui-background-accent-1)'],
        ['#39b54a', '#ffd450', '#ffd450', '#fcc521', '#fab619', '#f8a34d', '#e01f19'],
        new Array(20)
            .fill('')
            .map((_, index) => `var(--tui-chart-categorical-0${index + 1})`),
    ];

    protected colors: string[] = this.colorsVariants[0] ?? [];

    protected get computedColors(): string[] {
        return this.colors.slice(0, this.segments);
    }
}
```

---

# directives/Resizer

- **Package**: `CDK`
- **Type**: directives

Directive to resize container in multiple directions.


### How to Use (Import)

```ts
import {TuiResizable, TuiResizer} from '@taiga-ui/cdk';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiResizable,
    TuiResizer,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<div tuiResizable>
  <div [tuiResizer]="[1, 0]"></div>
</div>
```

---

# directives/Ripple

- **Package**: `ADDON-MOBILE`
- **Type**: directives

Directive for «ripple» effect on mobile devices


### How to Use (Import)

```ts
import {TuiRipple} from '@taiga-ui/addon-mobile';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiRipple,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<div tuiRipple>...</div>
```

---

# directives/Sensitive

- **Package**: `KIT`
- **Type**: directives

A directive that allows you to hide sensitive data under a pixel mask. This can be account balances,
            write-off amounts and any other content


### How to Use (Import)

```ts
import {Component} from '@angular/core';
import {TuiSensitive} from '@taiga-ui/kit';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiSensitive,
  ],
})
export class Example {}
```
### How to Use (Template)

```html
<span [tuiSensitive]="true">text</span>
```

### Example

```html
<span [tuiSensitive]="sensitive">Confidential information</span>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| tuiSensitive | `boolean` | Sensitive mode |

### TypeScript

```ts
import {Component} from '@angular/core';
import {changeDetection} from '@demo/emulate/change-detection';
import {TuiDemo} from '@demo/utils';
import {TuiSensitive} from '@taiga-ui/kit';

@Component({
    standalone: true,
    imports: [TuiDemo, TuiSensitive],
    templateUrl: './index.html',
    changeDetection,
})
export default class Page {
    protected sensitive = true;
}
```

---

# directives/Sidebar

- **Package**: `ADDON-MOBILE`
- **Type**: directives

Directive allows to show arbitrary content in a sidebar above all content. A darkening overlay is shown
            under the sidebar.
        

        
            This directive is deprecated and will be removed in the next major version. Use
            
                Drawer
            
            instead.


### How to Use (Import)

```ts
import {TuiSidebar} from '@taiga-ui/addon-mobile';
import {TuiActiveZone} from '@taiga-ui/cdk';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiSidebar,
    TuiActiveZone,
  ],
  // ...
})
export class Example {
  open = false;

  toggle(open: boolean) {
    this.open = open;
  }
}
```
### How to Use (Template)

```html
<button
  tuiButton
  type="button"
  (click)="toggle(true)"
  (tuiActiveZoneChange)="toggle($event)"
>
  Show sidebar
  <div *tuiSidebar="open">Content</div>
</button>
```

---

# directives/Skeleton

- **Package**: `KIT`
- **Type**: directives


### How to Use (Import)

```ts
import {Component} from '@angular/core';
import {TuiSkeleton} from '@taiga-ui/kit';
// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiSkeleton,
  ],
})
export class Example {}
```
### How to Use (Template)

```html
<span [tuiSkeleton]="true">Loading..</span>
```

---

# directives/Swipe

- **Package**: `CDK`
- **Type**: directives

tuiSwipe
            directive allows detecting swipes on mobile devices.
        

        
            You can configure the directive with
            TUI_SWIPE_OPTIONS
            token.
            
            Allowed options:
        
        
            
                timeout:
            
            max time between touchstart and touchend
            
                threshold
                :
            
            min distance between touchstart and touchend.


### How to Use (Import)

```ts
import {TuiSwipe} from '@taiga-ui/cdk';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiSwipe,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<div (tuiSwipe)="..."></div>
```

---

# directives/TextfieldController

- **Package**: `LEGACY`
- **Type**: directives

Directive allows to customize
            
                TuiPrimitiveTextfield
            
            with parameters that it adds into DI tree.
        

        
            That means that you can use the directive on any root element and it will customize all textfields in this
            scope. Most Taiga UI form controls are based on
            
                TuiPrimitiveTextfield
            
            and thus accept these options.
        

        
            If there are several controllers above textfield, their values will be merged. The nearest directives are in
            priority.


### How to Use (Import)

```ts
import {TuiTextfieldControllerModule} from '@taiga-ui/legacy';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiTextfieldControllerModule,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<div
  class="wrapper"
  [tuiTextfieldCleaner]="true"
>
  <tui-input>...</tui-input>
</div>
```

### Example

```html
<ng-template>
                <tui-input
                    [formControl]="control"
                    [tuiTextfieldCleaner]="cleaner"
                    [tuiTextfieldCustomContent]="customContentSelected"
                    [tuiTextfieldLabelOutside]="labelOutside"
                    [tuiTextfieldSize]="size"
                >
                    Hello
                </tui-input>
            </ng-template>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| tuiTextfieldCleaner | `boolean` | Shows a cross to reset a value |
| tuiTextfieldCustomContent | `PolymorpheusContent` | Right content (e.g. avatar with maximum size 32x32px) |
| tuiTextfieldLabelOutside | `boolean` | Label is outside a component and made with Label |
| tuiTextfieldSize | `TuiSizeS | TuiSizeL` | Size |

### TypeScript

```ts
import {Component} from '@angular/core';
import {FormControl, ReactiveFormsModule, Validators} from '@angular/forms';
import {changeDetection} from '@demo/emulate/change-detection';
import {DemoRoute} from '@demo/routes';
import {TuiDemo} from '@demo/utils';
import type {TuiSizeL, TuiSizeS} from '@taiga-ui/core';
import {TuiTextfield} from '@taiga-ui/core';
import {TuiInputModule, TuiTextfieldControllerModule} from '@taiga-ui/legacy';

@Component({
    standalone: true,
    imports: [
        ReactiveFormsModule,
        TuiDemo,
        TuiInputModule,
        TuiTextfield,
        TuiTextfieldControllerModule,
    ],
    templateUrl: './index.html',
    changeDetection,
})
export default class Page {
    protected readonly sizeVariants: ReadonlyArray<TuiSizeL | TuiSizeS> = ['s', 'm', 'l'];

    protected readonly inputModeVariants: readonly string[] = ['text', 'numeric'];

    protected readonly maxLengthVariants: readonly number[] = [10];

    protected readonly typeVariants: readonly string[] = [
        'text',
        'email',
        'password',
        'tel',
        'url',
    ];

    protected type = this.typeVariants[0]!;

    protected readonly customContentVariants = ['', 'Bell'];

    protected customContentSelected = this.customContentVariants[0]!;

    protected cleaner = false;
    protected exampleText = '';
    protected labelOutside = false;
    protected size = this.sizeVariants[2]!;
    protected inputMode = this.inputModeVariants[0]!;
    protected maxLength: number | null = null;

    protected readonly control = new FormControl('111', Validators.required);
    protected readonly routes = DemoRoute;
}
```

---

# directives/Title

- **Package**: `CORE`
- **Type**: directives

A directive for title with optional subtitle


### How to Use (Import)

```ts
import {TuiTitle} from '@taiga-ui/core';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiTitle,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<h2 tuiTitle="s">
  <div tuiSubtitle>Caption</div>
  I am a title
  <div tuiSubtitle>I'm a subtitle</div>
</h2>
```

---

# directives/Touchable

- **Package**: `ADDON-MOBILE`
- **Type**: directives

Directive to emulate native iOS touches


### How to Use (Import)

```ts
import {TuiTouchable} from '@taiga-ui/addon-mobile';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiTouchable,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<div tuiTouchable="transform">...</div>
<a
  tuiLink
  tuiTouchable="opacity"
>
  ...
</a>
```

---

# directives/Validator

- **Package**: `CDK`
- **Type**: directives

tuiValidator
            allows set validators for form control on the fly


### How to Use (Import)

```ts
import {TuiValidator} from '@taiga-ui/cdk';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiValidator,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<tui-input
  formControlName="control"
  [tuiValidator]="validator"
></tui-input>
```

---

# directives/ValueChanges

- **Package**: `CDK`
- **Type**: directives

This directive allows you to access reactive control or container value changes as an output


### How to Use (Import)

```ts
import {TuiValueChanges} from '@taiga-ui/cdk';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiValueChanges,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<input
  [formControl]="control"
  (tuiValueChanges)="onChanges($event)"
/>
```

---

# directives/Zoom

- **Package**: `CDK`
- **Type**: directives

tuiZoom
            directive emits delta between wheel events or between pinch on mobile devices. It emits coordinates of the
            zoom center as well. You can use it to change the scale of an element as in example below


### How to Use (Import)

```ts
import {TuiZoom} from '@taiga-ui/cdk';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiZoom,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<div (tuiZoom)="onZoom(scale += $event.delta)">
  <div [style.transform]="'scale(' + scale + ')'">Zoomable</div>
</div>
```

---

# customization/Viewport

- **Package**: `CORE`
- **Type**: customization

TUI_VIEWPORT
            - define the area relative to which the position constraints will be calculated. Also you can use
            tuiAsViewport
            helper instead of token.


---

# pipes/Amount

- **Package**: `ADDON-COMMERCE`
- **Type**: pipes

Pipe to format number values to show money sums

        
            Number formatting can be customized by using
            
                TUI_NUMBER_FORMAT


### How to Use (Import)

```ts
import {TuiAmountPipe} from '@taiga-ui/addon-commerce';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiAmountPipe,
  ],
})
export class Example {}
```
### How to Use (Template)

```html
<!-- {{ 100000 | tuiAmount : currency : align | async }} -->
<p>{{ 100000 | tuiAmount : '978' : 'left' | async }}</p>
<p>{{ 100000 | tuiAmount : 'EUR' : 'right' | async }}</p>
```

---

# pipes/Currency

- **Package**: `ADDON-COMMERCE`
- **Type**: pipes

Pipe for transforming number into money. It is usually used with
        
            InputNumber


### How to Use (Import)

```ts
import {TuiCurrencyPipe} from '@taiga-ui/addon-commerce';

//...

@Component({
  standalone: true,
  imports: [
    //...
    TuiCurrencyPipe,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<tui-textfield>
  <label tuiLabel>Type a sum</label>

  <input
    formControlName="testValue"
    tuiInputNumber
    [prefix]="'USD' | tuiCurrency"
  />
</tui-textfield>
```

### Example

```html
<ng-template>
                    <tui-textfield>
                        <label tuiLabel>Type a sum</label>

                        <input
                            tuiInputNumber
                            [formControl]="control"
                            [postfix]="' ' + (currency || '' | tuiCurrency)"
                        />
                    </tui-textfield>
                </ng-template>
```

### API

| Property | Type | Description |
|----------|-----|----------|
| currency | `TuiCurrencyVariants` | Currency symbol |

### TypeScript

```ts
import {Component} from '@angular/core';
import {FormControl, ReactiveFormsModule, Validators} from '@angular/forms';
import {changeDetection} from '@demo/emulate/change-detection';
import {DemoRoute} from '@demo/routes';
import {TuiDemo} from '@demo/utils';
import {TuiCurrencyPipe} from '@taiga-ui/addon-commerce';
import {TuiTextfield} from '@taiga-ui/core';
import {TuiInputNumber} from '@taiga-ui/kit';

@Component({
    standalone: true,
    imports: [
        ReactiveFormsModule,
        TuiCurrencyPipe,
        TuiDemo,
        TuiInputNumber,
        TuiTextfield,
    ],
    templateUrl: './index.html',
    changeDetection,
})
export default class Page {
    protected readonly currencyVariants = [null, 826, 840, 'EUR', 'RUB', 'UGX', 'USD'];
    protected currency = this.currencyVariants[0];

    protected readonly control = new FormControl(6432, Validators.required);
    protected readonly routes = DemoRoute;
}
```

---

# pipes/Emails

- **Package**: `KIT`
- **Type**: pipes

Pipe for creating autocomplete when entering email addresses


### How to Use (Import)

```ts
import {FormsModule} from '@angular/forms';
import {TuiDataList} from '@taiga-ui/core';
import {TuiDataListWrapper, TuiInputModule} from '@taiga-ui/kit';
import {TuiEmailsPipe} from '@taiga-ui/proprietary';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    FormsModule,
    TuiEmailsPipe,
    TuiInputModule,
    TuiDataList,
    TuiDataListWrapper,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<tui-input
  *ngIf="value | tuiEmails as emails"
  [(ngModel)]="value"
>
  Введите адрес
  <ng-template
    *ngIf="emails.length"
    [tuiDataList]
  >
    <tui-data-list-wrapper [items]="emails"></tui-data-list-wrapper>
  </ng-template>
</tui-input>
```

---

# pipes/FieldError

- **Package**: `KIT`
- **Type**: pipes

FieldErrorPipe takes order of errors as array and transform it to
            TuiValidationError
            . Can be used with TuiError component. You can also use
            tuiFieldErrorContentPipe
            with
            TuiHint
            (see
            
                tuiFieldErrorContentPipe example
            
            ). It returns a content of the TuiValidationError. The idea of
            tuiFieldError
            is to link
            tui-error
            with form controls. Also you can use
            tuiValidationErrorsProvider
            which provided
            TUI_VALIDATION_ERRORS
            . The idea of
            TUI_VALIDATION_ERRORS
            is to provide presentation for arbitrary error objects stored inside controls


### How to Use (Import)

```ts
import {TuiFieldErrorPipe} from '@taiga-ui/kit';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiFieldErrorPipe,
  ],
})
export class Example {}
```
### How to Use (Template)

```html
// ...
<tui-input [formControl]="user">User</tui-input>
<tui-error
  [formControl]="user"
  [error]="[] | tuiFieldError | async"
></tui-error>
// ...
```

---

# pipes/Filter

- **Package**: `CDK`
- **Type**: pipes

Pipe for filtering an array


### How to Use (Import)

```ts
import {TuiFilterPipe} from '@taiga-ui/cdk';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiFilterPipe,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<div *ngFor="let item of items | tuiFilter: matcher: someArg">{{item}}</div>
```

---

# pipes/FilterByInput

- **Package**: `KIT`
- **Type**: pipes

Pipe for filtering an array by value entered in a textfield


### How to Use (Import)

```ts
import {TuiFilterByInputPipe} from '@taiga-ui/kit';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiFilterByInputPipe,
  ],
  //  ...
})
export class Example {}
```
### How to Use (Template)

```html
<tui-input [formControl]="user">
  User
  <tui-data-list-wrapper
    *tuiDataList
    [items]="items | tuiFilterByInput"
  ></tui-data-list-wrapper>
</tui-input>
```

---

# pipes/Flag

- **Package**: `CORE`
- **Type**: pipes

Pipe for getting source path to image with flag


### How to Use (Import)

```ts
import {TuiFlagPipe} from '@taiga-ui/core';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiFlagPipe,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<img
  alt="United Arab Emirates"
  [src]="'AE' | tuiFlag"
/>
```

### Example

```html
<img
                alt=""
                [src]="countryIsoCode | tuiFlag"
            />
```

### TypeScript

```ts
import {Component} from '@angular/core';
import {changeDetection} from '@demo/emulate/change-detection';
import {TuiDemo} from '@demo/utils';
import {TuiFlagPipe} from '@taiga-ui/core';
import type {TuiCountryIsoCode} from '@taiga-ui/i18n';
import {getCountries} from 'libphonenumber-js';

@Component({
    standalone: true,
    imports: [TuiDemo, TuiFlagPipe],
    templateUrl: './index.html',
    changeDetection,
})
export default class Page {
    protected countryIsoCodeVariants = getCountries();
    protected countryIsoCode: TuiCountryIsoCode = 'FR';

    protected get apiCodeDemo(): string {
        return `<img [src]="'${this.countryIsoCode}' | tuiFlag" />`;
    }
}
```

---

# pipes/FormatDate

- **Package**: `CORE`
- **Type**: pipes

Pipe to format timestamps/dates dynamically
        
            Differs from built-in Angular date formatting pipe because it returns an
            Observable


### How to Use (Import)

```ts
import {TuiFormatDatePipe} from '@taiga-ui/core';

//...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiFormatDatePipe,
  ],
  //  ...
})
export class Example {}
```
### How to Use (Template)

```html
Formatted timestamp: {{timestamp | tuiFormatDate | async}}
```

---

# pipes/FormatNumber

- **Package**: `CORE`
- **Type**: pipes

Pipe to format number values to separate thousands

        
            Number formatting can be customized by using
            
                TUI_NUMBER_FORMAT


### How to Use (Import)

```ts
import {TuiFormatNumberPipe} from '@taiga-ui/core';

//...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiFormatNumberPipe,
  ],
  //  ...
})
export class Example {}
```
### How to Use (Template)

```html
Formatted number: {{index | tuiFormatNumber | async}}
```

---

# pipes/IsPresent

- **Package**: `CDK`
- **Type**: pipes

Pipe wrapper for
        
            IsPresent
        
        function


### How to Use (Import)

```ts
import {TuiIsPresentPipe} from '@taiga-ui/cdk';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiIsPresentPipe,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<div *ngIf="item | tuiIsPresent">{{item}}</div>
```

---

# pipes/Mapper

- **Package**: `CDK`
- **Type**: pipes

Pipe to transform a value with a function


### How to Use (Import)

```ts
import {TuiMapperPipe} from '@taiga-ui/cdk';

// ...

@Component({
  standalone: true,
  imports: [
    //    ...
    TuiMapperPipe,
  ],
  //  ...
})
export class Example {}
```
### How to Use (Template)

```html
{{item | tuiMapper: mapper: someArg}}
```

---

# pipes/Obfuscate

- **Package**: `CDK`
- **Type**: pipes

Pipe for obfuscating sensitive data


### How to Use (Import)

```ts
import {tuiObfuscateOptionsProvider, TuiObfuscatePipe} from '@taiga-ui/cdk';

//...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiObfuscatePipe,
  ],
  //  ...
  providers: [
    tuiObfuscateOptionsProvider({
      default: ({length}, symbol = '*') => symbol.repeat(length),
      recipes: {
        city: ({length}) => 'x'.repeat(length),
        phone: ({length}) => '*'.repeat(length),
      },
    }),
  ],
})
export class Example {}
```
### How to Use (Template)

```html
<p>Obfuscated value: {{'abc' | tuiObfuscate}}</p>
<p>Obfuscated value: {{'abc' | tuiObfuscate: '#'}}</p>
<p>Obfuscated value: {{'abc' | tuiObfuscate: 'city'}}</p>
<p>Obfuscated value: {{'abc' | tuiObfuscate: 'phone'}}</p>
```

---

# pipes/RepeatTimes

- **Package**: `CDK`
- **Type**: pipes


### How to Use (Import)

```ts
import {TuiRepeatTimesPipe} from '@taiga-ui/cdk';

//...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiRepeatTimesPipe,
  ],
  //  ...
})
export class Example {}
```
### How to Use (Template)

```html
@for (index of 3 | tuiRepeatTimes; track index) {
<div class="t-cell"></div>
}
```

---

# pipes/Stringify

- **Package**: `KIT`
- **Type**: pipes

Pipe that creates
        TuiStringHandler
        by given key.


### How to Use (Import)

```ts
import {TuiStringifyPipe} from '@taiga-ui/kit';

// ...

@Component({
  standalone: true,
  imports: [
    //...
    TuiStringifyPipe,
  ],
  //  ...
})
export class Example {}
```
### How to Use (Template)

```html
<tui-combo-box
  [stringify]="'name' | tuiStringify"
  [(ngModel)]="value"
>
  <!-- ... -->
</tui-combo-box>
```

---

# pipes/StringifyContent

- **Package**: `KIT`
- **Type**: pipes

Pipe that turns
        TuiStringHandler
        into content that works with
        $implicit
        .


### How to Use (Import)

```ts
import {TuiStringifyContentPipe} from '@taiga-ui/kit';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiStringifyContentPipe,
  ],
  // ...
})
export class Example {}
```
### How to Use (Template)

```html
<tui-combo-box
  [stringify]="stringify"
  [(ngModel)]="value"
>
  <tui-data-list-wrapper
    *tuiDataList
    [items]="items"
    [itemContent]="stringify | tuiStringifyContent"
  ></tui-data-list-wrapper>
</tui-combo-box>
```

---
