@import '@taiga-ui/core/styles/taiga-ui-local';

@height: 6.75rem;
@heightCounter: 7.875rem;

:host {
    position: relative;
    z-index: 0;
    display: flex;
    flex-direction: column;
    min-height: var(--tui-textarea-height);
    border-radius: var(--tui-radius-m);
    color: var(--tui-text-01);

    &[data-mode='onDark'] {
        color: var(--tui-text-01-night);
    }

    &[data-size='s'] {
        --tui-height: var(--tui-height-s);
        --tui-textarea-height: 4.5625rem;
        font: var(--tui-font-text-s);
    }

    &[data-size='m'] {
        --tui-height: var(--tui-height-m);
        --tui-textarea-height: 5.5rem;
        font: var(--tui-font-text-s);
    }

    &[data-size='l'] {
        --tui-height: var(--tui-height-l);
        --tui-textarea-height: @height;
        font: var(--tui-font-text-m);
    }

    &[data-size='m']._has-counter {
        --tui-textarea-height: 6.625rem;
    }

    &[data-size='l']._has-counter {
        --tui-textarea-height: @heightCounter;
    }

    // https://bugs.webkit.org/show_bug.cgi?id=278558
    .safari-only({
        .t-pseudo-content, .t-input {
            text-wrap: balance;
            white-space: break-spaces;
        }
    });
}

.t-outline {
    min-height: inherit;
}

.t-content {
    display: block;
    margin-top: 0;
    margin-bottom: 0;
    min-height: inherit;
    box-sizing: border-box;
    overflow: hidden;
    cursor: text;

    :host._disabled & {
        cursor: auto;
        opacity: var(--tui-disabled-opacity);
    }

    :host:not(._expandable) & {
        position: absolute;
        top: 0;
        left: 0;
        bottom: 1px;
        right: 0;
        min-height: auto;
    }

    :host._has-counter:not(._expandable) & {
        bottom: 1.6875rem;
    }

    :host._label-outside._has-counter:not(._expandable) & {
        bottom: 1rem;
    }
}

.t-wrapper {
    position: relative;
    width: 100%;
    height: 100%;
    min-height: inherit;
    box-sizing: border-box;
    padding: calc((var(--tui-height) - 1.25rem) / 2) 0;

    :host[data-size='l']._label-outside & {
        padding: calc((var(--tui-height) - 1.5rem) / 2) 0;
    }

    :host[data-size='m']:not(._label-outside) & {
        padding: calc((var(--tui-height) - 2.25rem) / 2) 0;
    }

    :host[data-size='l']:not(._label-outside) & {
        padding: calc((var(--tui-height) - 2.625rem) / 2) 0;
    }
}

:host-context(table)[data-size='m']._label-outside .t-wrapper {
    padding-bottom: 0.75rem;
}

:host-context(table)[data-size='l']._label-outside .t-wrapper {
    padding-bottom: 1rem;
}

.t-input-wrapper {
    min-height: inherit;
    width: 100%;
    flex: 1;
}

.t-relative {
    position: relative;
    min-height: inherit;
}

.t-box {
    display: flex;
    min-height: calc(100% - 1rem);
    width: 100%;

    :host:not(._expandable) & {
        height: calc(100% - 1rem);
    }

    :host:not(._expandable)._label-outside & {
        height: 100%;
    }

    :host._has-counter._expandable & {
        margin-bottom: 1.25rem;
    }

    // For placeholder
    :host[data-size='m']:not(._label-outside) & {
        border-top: 1rem solid transparent;
    }

    :host[data-size='l']:not(._label-outside) & {
        border-top: 1.25rem solid transparent;
    }
}

.t-pseudo-content {
    white-space: pre-wrap;
    word-wrap: break-word;
    pointer-events: none;
    color: transparent;
    overflow: hidden;
    border: 0 solid transparent;
    border-inline-start-width: var(--border-start, 0);
    border-inline-end-width: var(--border-end, 0);

    :host[data-size='s'] &,
    :host[data-size='m'] & {
        padding: 0 0.75rem;
    }

    :host[data-size='l'] & {
        padding: 0 1rem;
    }

    &__extra {
        background-color: var(--tui-error-bg-night);
    }
}

.t-input {
    .clearinput();
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    box-sizing: border-box;
    resize: none;
    overflow: hidden;
    outline: none;
    border: 0 solid transparent;
    border-inline-start-width: var(--border-start, 0);
    border-inline-end-width: var(--border-end, 0);

    &:not(:last-of-type) {
        display: none;
    }

    &::placeholder {
        color: var(--tui-text-03);
        opacity: 0;
    }

    :host[data-mode='onDark'] &::placeholder {
        color: var(--tui-text-03-night);
    }

    :host._focused &:not(:read-only)::placeholder {
        opacity: 1;
    }

    :host[data-size='s'] &,
    :host[data-size='m'] & {
        padding: 0 0.75rem;
        font: var(--tui-font-text-s);
    }

    :host[data-size='l'] & {
        padding: 0 1rem;
        font: var(--tui-font-text-m);
    }

    :host[data-mode='onDark']._disabled & {
        color: var(--tui-text-03-night);
    }

    /* Safari 9+, < 13.1 */
    @supports (-webkit-marquee-repetition: infinite) and (object-fit: fill) {
        :host._ios & {
            padding-left: 0.8125rem; // compensation of unkillable padding in mobile safari
        }
    }
}

.t-pseudo-content,
.t-input {
    word-break: break-word;
}

.t-placeholder {
    .textfield-placeholder();
    position: absolute;
    top: calc(var(--tui-height) / 2 - 0.625rem);
    left: 0;
    max-width: 100%;
    border: 0 solid transparent;
    border-inline-start-width: var(--border-start, 0);
    border-inline-end-width: var(--border-end, 0);
    box-sizing: border-box;

    :host[data-size='s'] & {
        padding: 0 0.75rem;
    }

    :host[data-size='m'] & {
        padding: 0 0.75rem;
    }

    :host[data-size='l'] & {
        padding: 0 1rem;
    }

    :host._label-outside & {
        overflow: initial;
        height: auto;
        white-space: initial;
    }
}

.t-icons {
    .fullsize(absolute, inset);
    display: flex;
    justify-content: flex-end;
    pointer-events: none;
    padding: calc((var(--tui-height) - 1.5rem) / 2) 1rem;

    :host[data-size='m'] & {
        padding: calc((var(--tui-height) - 1.5rem) / 2) 0.625rem;
    }

    & > :not(:first-child) {
        margin-inline-start: 0.25rem;
    }
}

.t-icon {
    .input-icon();

    &_left {
        margin-inline-end: auto;
    }
}

.t-cleaner {
    .icon-button();
    pointer-events: auto;
}

.t-caret {
    display: inline-block;
    height: 1rem;
    width: 0;
}

.t-counter {
    position: absolute;
    right: 0.75rem;
    bottom: 0.5rem;
    font: var(--tui-font-text-s);
    pointer-events: none;
    margin-top: auto;
    text-align: right;
    color: var(--tui-text-03);

    :host[data-mode='onDark'] & {
        color: var(--tui-text-03-night);
    }
}
