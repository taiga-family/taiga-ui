@import '@taiga-ui/core/styles/taiga-ui-local.less';

tui-textfield {
    .transition(color);

    --t-height: var(--tui-height-l);
    --t-padding: var(--tui-padding-l);

    position: relative;
    display: flex;
    align-items: center;
    pointer-events: none;
    cursor: pointer;
    block-size: var(--t-height);
    color: var(--tui-text-tertiary);
    padding: 0 var(--t-padding);
    border-radius: var(--tui-radius-l);
    font: var(--tui-font-text-m);
    box-sizing: border-box;
    gap: 0.25rem;

    &[style*='--t-icon-start:'] {
        --t-left: 2.25rem;
    }

    &[style*='--t-icon-end:'] {
        --t-right: 2.25rem;
    }

    input,
    select {
        font: var(--tui-font-text-m);
    }

    &[data-size='s'] {
        --t-height: var(--tui-height-s);
        --t-padding: var(--tui-padding-s);

        border-radius: var(--tui-radius-m);
        gap: 0;
        font: var(--tui-font-text-s);

        &[style*='--t-icon-start:'] {
            --t-left: 1.25rem;
        }

        &[style*='--t-icon-end:'] {
            --t-right: 1.25rem;
        }

        &::before {
            margin: 0 0.5rem 0 -0.125rem;
            font-size: 1rem;
        }

        &::after {
            margin: 0 -0.175rem 0 0.575rem;
            font-size: 1rem;
        }

        input,
        select {
            font: var(--tui-font-text-s);
        }

        .t-content {
            margin-inline-end: -0.325rem;
        }
    }

    &[data-size='m'] {
        --t-height: var(--tui-height-m);
        --t-padding: var(--tui-padding-m);

        border-radius: var(--tui-radius-m);
        font: var(--tui-font-text-s);

        &[style*='--t-icon-start:'] {
            --t-left: 1.75rem;
        }

        &[style*='--t-icon-end:'] {
            --t-right: 1.75rem;
        }

        &::before {
            margin: 0 0.125rem 0 -0.125rem;
        }

        &::after {
            margin: 0 -0.125rem 0 0.25rem;
        }

        input,
        select {
            font: var(--tui-font-text-s);
        }

        .t-content {
            margin-inline-end: -0.125rem;
        }
    }

    /*
    TODO: refactor to the following way after Chrome 105+ & Safari 15.4+
    &:hover:has(input:not(:read-only)),
    &:hover:has(select:not([data-mode='readonly'])) {
        color: var(--tui-text-secondary);
    }
    */
    &:hover {
        color: var(--tui-text-secondary);

        &:has(input:read-only),
        &:has(select[data-mode~='readonly']) {
            color: var(--tui-text-tertiary);
        }
    }

    &::before {
        z-index: 1;
        margin-inline-end: 0.5rem;
    }

    &:has(:disabled:not(.t-filler, button, option))::before,
    &:has(:disabled:not(.t-filler, button, option))::after,
    &:has(:disabled:not(.t-filler, button, option)) .t-template {
        opacity: var(--tui-disabled-opacity);
    }

    // TODO: Fallback until Safari 15.4
    &._disabled::before,
    &._disabled::after,
    &._disabled .t-template {
        opacity: var(--tui-disabled-opacity);
    }

    &:has(label:not(:empty)) {
        .t-template,
        input:defined,
        select:defined {
            padding-top: calc(var(--t-height) / 3);

            &::placeholder,
            &._empty {
                color: transparent;
            }
        }
    }

    // TODO: Fallback until Safari 15.4
    &._with-label {
        .t-template,
        input:defined,
        select:defined {
            padding-top: calc(var(--t-height) / 3);

            &::placeholder,
            &._empty {
                color: transparent;
            }
        }
    }

    .t-template,
    input:defined,
    select:defined {
        .fullsize();

        appearance: none;
        box-sizing: border-box;
        border-radius: inherit;
        padding: inherit;
        border: none;
        text-indent: var(--t-left, 0);
        // StackBlitz changes "0rem" to "0" breaking calc
        padding-inline-end: calc(var(--t-right, ~'0rem') + var(--t-side) + var(--t-padding));
    }

    .t-template {
        display: flex;
        align-items: center;
        color: var(--tui-text-primary);
    }

    &._with-template input,
    &._with-template select {
        color: transparent !important;
    }

    input:defined,
    select:defined {
        pointer-events: auto;
        background: transparent;

        &:read-only ~ .t-filler {
            display: none;
        }

        &:disabled {
            & ~ label,
            & ~ .t-content {
                opacity: var(--tui-disabled-opacity);

                > tui-icon {
                    display: none;
                }
            }
        }

        &:-webkit-autofill,
        &:not(._empty):not(:placeholder-shown) {
            & ~ label {
                font-size: 0.83em;
                transform: translateY(-0.7em);
            }

            &:not(:disabled)[data-mode~='invalid'] ~ label,
            &:invalid:not(:disabled):not([data-mode]) ~ label {
                color: var(--tui-text-negative);
            }

            &:not(:disabled):not([data-mode~='readonly']) ~ .t-content .t-clear {
                display: flex;
            }
        }

        &:not([data-mode~='readonly']) {
            .appearance-focus({
                &::placeholder,
                &._empty {
                    color: var(--tui-text-tertiary);
                }

                & ~ label {
                    color: var(--tui-text-primary) !important;
                    font-size: 0.83em;
                    transform: translateY(-0.7em);
                }
            });
        }

        .ios-only({
            &._ios-fix {
                position: fixed;
                left: 1000rem;
            }
        });
    }

    label:not([data-orientation='vertical']) {
        .transition(all);
        .text-overflow();

        position: relative;
        display: block;
        flex: 1;
        font-size: inherit;
    }

    label:defined,
    input:defined::placeholder,
    select:defined._empty {
        color: var(--tui-text-secondary);
    }

    select:not([data-mode~='readonly']) {
        cursor: pointer;
    }

    button,
    a {
        pointer-events: auto;
    }

    .t-content {
        display: flex;
        align-items: center;
        gap: inherit;
        margin-inline-start: auto;
        isolation: isolate;
        border-radius: inherit;

        > tui-icon {
            pointer-events: auto;
        }
    }

    .t-clear {
        display: none;
        pointer-events: auto;
    }

    .t-filler:defined {
        pointer-events: none;
        background: none;
        color: var(--tui-text-tertiary);
        opacity: 1;
    }

    [tuiFluidTypography] {
        font-weight: bold;
    }
}
